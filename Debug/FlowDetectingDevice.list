
FlowDetectingDevice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000478c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000744  0800492c  0800492c  0001492c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005070  08005070  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08005070  08005070  00015070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005078  08005078  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005078  08005078  00015078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800507c  0800507c  0001507c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005080  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000634  2000005c  080050dc  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000690  080050dc  00020690  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d1b2  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023fe  00000000  00000000  0002d281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000db8  00000000  00000000  0002f680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aa9  00000000  00000000  00030438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001732b  00000000  00000000  00030ee1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011b36  00000000  00000000  0004820c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d6a6  00000000  00000000  00059d42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d48  00000000  00000000  000e73e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000eb130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004914 	.word	0x08004914

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08004914 	.word	0x08004914

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <start_timer>:
extern uint8_t timer;
extern TIM_HandleTypeDef htim2;

//start timer
static void start_timer(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Init(&htim2);
 8000590:	4810      	ldr	r0, [pc, #64]	; (80005d4 <start_timer+0x48>)
 8000592:	f003 f89d 	bl	80036d0 <HAL_TIM_Base_Init>
	__HAL_TIM_SET_AUTORELOAD(&htim2, time_limit*2000-1);
 8000596:	4b10      	ldr	r3, [pc, #64]	; (80005d8 <start_timer+0x4c>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800059e:	fb02 f303 	mul.w	r3, r2, r3
 80005a2:	1e5a      	subs	r2, r3, #1
 80005a4:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <start_timer+0x48>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80005aa:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <start_timer+0x4c>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80005b2:	fb02 f303 	mul.w	r3, r2, r3
 80005b6:	3b01      	subs	r3, #1
 80005b8:	461a      	mov	r2, r3
 80005ba:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <start_timer+0x48>)
 80005bc:	60da      	str	r2, [r3, #12]
	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 80005be:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <start_timer+0x48>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	f06f 0201 	mvn.w	r2, #1
 80005c6:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim2);
 80005c8:	4802      	ldr	r0, [pc, #8]	; (80005d4 <start_timer+0x48>)
 80005ca:	f003 f8d1 	bl	8003770 <HAL_TIM_Base_Start_IT>
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	200004fc 	.word	0x200004fc
 80005d8:	200000d4 	.word	0x200000d4

080005dc <stop_timer>:

//stop timer
static void stop_timer(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim2);
 80005e0:	4802      	ldr	r0, [pc, #8]	; (80005ec <stop_timer+0x10>)
 80005e2:	f003 f927 	bl	8003834 <HAL_TIM_Base_Stop_IT>
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	200004fc 	.word	0x200004fc

080005f0 <add_detection>:

//add flow number detection
static void add_detection(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	detection = 0;
 80005f4:	4b2b      	ldr	r3, [pc, #172]	; (80006a4 <add_detection+0xb4>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	701a      	strb	r2, [r3, #0]
	start_timer();
 80005fa:	f7ff ffc7 	bl	800058c <start_timer>
	while (detection == 0)
 80005fe:	e027      	b.n	8000650 <add_detection+0x60>
	{
		if (time_warning == 1)
 8000600:	4b29      	ldr	r3, [pc, #164]	; (80006a8 <add_detection+0xb8>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b01      	cmp	r3, #1
 8000606:	d111      	bne.n	800062c <add_detection+0x3c>
		{
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000608:	2201      	movs	r2, #1
 800060a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800060e:	4827      	ldr	r0, [pc, #156]	; (80006ac <add_detection+0xbc>)
 8000610:	f001 ff80 	bl	8002514 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000614:	2200      	movs	r2, #0
 8000616:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800061a:	4824      	ldr	r0, [pc, #144]	; (80006ac <add_detection+0xbc>)
 800061c:	f001 ff7a 	bl	8002514 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ALARM_GPIO_Port, ALARM_Pin, GPIO_PIN_SET);
 8000620:	2201      	movs	r2, #1
 8000622:	2104      	movs	r1, #4
 8000624:	4821      	ldr	r0, [pc, #132]	; (80006ac <add_detection+0xbc>)
 8000626:	f001 ff75 	bl	8002514 <HAL_GPIO_WritePin>
 800062a:	e011      	b.n	8000650 <add_detection+0x60>
		}
		else
		{
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000632:	481e      	ldr	r0, [pc, #120]	; (80006ac <add_detection+0xbc>)
 8000634:	f001 ff6e 	bl	8002514 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8000638:	2064      	movs	r0, #100	; 0x64
 800063a:	f001 fc99 	bl	8001f70 <HAL_Delay>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800063e:	2201      	movs	r2, #1
 8000640:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000644:	4819      	ldr	r0, [pc, #100]	; (80006ac <add_detection+0xbc>)
 8000646:	f001 ff65 	bl	8002514 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 800064a:	2064      	movs	r0, #100	; 0x64
 800064c:	f001 fc90 	bl	8001f70 <HAL_Delay>
	while (detection == 0)
 8000650:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <add_detection+0xb4>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d0d3      	beq.n	8000600 <add_detection+0x10>
		}
	}
	stop_timer();
 8000658:	f7ff ffc0 	bl	80005dc <stop_timer>
	time_warning = 0;
 800065c:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <add_detection+0xb8>)
 800065e:	2200      	movs	r2, #0
 8000660:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000668:	4810      	ldr	r0, [pc, #64]	; (80006ac <add_detection+0xbc>)
 800066a:	f001 ff53 	bl	8002514 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800066e:	2201      	movs	r2, #1
 8000670:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000674:	480d      	ldr	r0, [pc, #52]	; (80006ac <add_detection+0xbc>)
 8000676:	f001 ff4d 	bl	8002514 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ALARM_GPIO_Port, ALARM_Pin, GPIO_PIN_RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	2104      	movs	r1, #4
 800067e:	480b      	ldr	r0, [pc, #44]	; (80006ac <add_detection+0xbc>)
 8000680:	f001 ff48 	bl	8002514 <HAL_GPIO_WritePin>
	if (detection == 2)
 8000684:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <add_detection+0xb4>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b02      	cmp	r3, #2
 800068a:	d104      	bne.n	8000696 <add_detection+0xa6>
		flow_num++;
 800068c:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <add_detection+0xc0>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	3301      	adds	r3, #1
 8000692:	4a07      	ldr	r2, [pc, #28]	; (80006b0 <add_detection+0xc0>)
 8000694:	6013      	str	r3, [r2, #0]
	detection = 0;
 8000696:	4b03      	ldr	r3, [pc, #12]	; (80006a4 <add_detection+0xb4>)
 8000698:	2200      	movs	r2, #0
 800069a:	701a      	strb	r2, [r3, #0]
	main_show();
 800069c:	f000 fa9c 	bl	8000bd8 <main_show>
}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	200000d9 	.word	0x200000d9
 80006a8:	200000da 	.word	0x200000da
 80006ac:	40020400 	.word	0x40020400
 80006b0:	200000cc 	.word	0x200000cc

080006b4 <reduce_detection>:

//reduce flow number detection
static void reduce_detection(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
	detection = 0;
 80006b8:	4b2b      	ldr	r3, [pc, #172]	; (8000768 <reduce_detection+0xb4>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	701a      	strb	r2, [r3, #0]
	start_timer();
 80006be:	f7ff ff65 	bl	800058c <start_timer>
	while (detection == 0)
 80006c2:	e027      	b.n	8000714 <reduce_detection+0x60>
	{
		if (time_warning == 1)
 80006c4:	4b29      	ldr	r3, [pc, #164]	; (800076c <reduce_detection+0xb8>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d111      	bne.n	80006f0 <reduce_detection+0x3c>
		{
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80006cc:	2201      	movs	r2, #1
 80006ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006d2:	4827      	ldr	r0, [pc, #156]	; (8000770 <reduce_detection+0xbc>)
 80006d4:	f001 ff1e 	bl	8002514 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006de:	4824      	ldr	r0, [pc, #144]	; (8000770 <reduce_detection+0xbc>)
 80006e0:	f001 ff18 	bl	8002514 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ALARM_GPIO_Port, ALARM_Pin, GPIO_PIN_SET);
 80006e4:	2201      	movs	r2, #1
 80006e6:	2104      	movs	r1, #4
 80006e8:	4821      	ldr	r0, [pc, #132]	; (8000770 <reduce_detection+0xbc>)
 80006ea:	f001 ff13 	bl	8002514 <HAL_GPIO_WritePin>
 80006ee:	e011      	b.n	8000714 <reduce_detection+0x60>
		}
		else
		{
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006f6:	481e      	ldr	r0, [pc, #120]	; (8000770 <reduce_detection+0xbc>)
 80006f8:	f001 ff0c 	bl	8002514 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 80006fc:	2064      	movs	r0, #100	; 0x64
 80006fe:	f001 fc37 	bl	8001f70 <HAL_Delay>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000702:	2201      	movs	r2, #1
 8000704:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000708:	4819      	ldr	r0, [pc, #100]	; (8000770 <reduce_detection+0xbc>)
 800070a:	f001 ff03 	bl	8002514 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 800070e:	2064      	movs	r0, #100	; 0x64
 8000710:	f001 fc2e 	bl	8001f70 <HAL_Delay>
	while (detection == 0)
 8000714:	4b14      	ldr	r3, [pc, #80]	; (8000768 <reduce_detection+0xb4>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d0d3      	beq.n	80006c4 <reduce_detection+0x10>
		}
	}
	stop_timer();
 800071c:	f7ff ff5e 	bl	80005dc <stop_timer>
	time_warning = 0;
 8000720:	4b12      	ldr	r3, [pc, #72]	; (800076c <reduce_detection+0xb8>)
 8000722:	2200      	movs	r2, #0
 8000724:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800072c:	4810      	ldr	r0, [pc, #64]	; (8000770 <reduce_detection+0xbc>)
 800072e:	f001 fef1 	bl	8002514 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000732:	2201      	movs	r2, #1
 8000734:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000738:	480d      	ldr	r0, [pc, #52]	; (8000770 <reduce_detection+0xbc>)
 800073a:	f001 feeb 	bl	8002514 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ALARM_GPIO_Port, ALARM_Pin, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	2104      	movs	r1, #4
 8000742:	480b      	ldr	r0, [pc, #44]	; (8000770 <reduce_detection+0xbc>)
 8000744:	f001 fee6 	bl	8002514 <HAL_GPIO_WritePin>
	if (detection == 1)
 8000748:	4b07      	ldr	r3, [pc, #28]	; (8000768 <reduce_detection+0xb4>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b01      	cmp	r3, #1
 800074e:	d104      	bne.n	800075a <reduce_detection+0xa6>
		flow_num--;
 8000750:	4b08      	ldr	r3, [pc, #32]	; (8000774 <reduce_detection+0xc0>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	3b01      	subs	r3, #1
 8000756:	4a07      	ldr	r2, [pc, #28]	; (8000774 <reduce_detection+0xc0>)
 8000758:	6013      	str	r3, [r2, #0]
	detection = 0;
 800075a:	4b03      	ldr	r3, [pc, #12]	; (8000768 <reduce_detection+0xb4>)
 800075c:	2200      	movs	r2, #0
 800075e:	701a      	strb	r2, [r3, #0]
	main_show();
 8000760:	f000 fa3a 	bl	8000bd8 <main_show>
}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	200000d9 	.word	0x200000d9
 800076c:	200000da 	.word	0x200000da
 8000770:	40020400 	.word	0x40020400
 8000774:	200000cc 	.word	0x200000cc

08000778 <check_detection>:

//check whether trigger detection
void check_detection(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
	if (detection == 1)
 800077c:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <check_detection+0x30>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	2b01      	cmp	r3, #1
 8000782:	d105      	bne.n	8000790 <check_detection+0x18>
	{
		HAL_Delay(10);//eliminate the interference of parasitic capacitance of detection
 8000784:	200a      	movs	r0, #10
 8000786:	f001 fbf3 	bl	8001f70 <HAL_Delay>
		add_detection();
 800078a:	f7ff ff31 	bl	80005f0 <add_detection>
	else if (detection == 2)
	{
		HAL_Delay(10);//eliminate the interference of parasitic capacitance of detection
		reduce_detection();
	}
}
 800078e:	e008      	b.n	80007a2 <check_detection+0x2a>
	else if (detection == 2)
 8000790:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <check_detection+0x30>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b02      	cmp	r3, #2
 8000796:	d104      	bne.n	80007a2 <check_detection+0x2a>
		HAL_Delay(10);//eliminate the interference of parasitic capacitance of detection
 8000798:	200a      	movs	r0, #10
 800079a:	f001 fbe9 	bl	8001f70 <HAL_Delay>
		reduce_detection();
 800079e:	f7ff ff89 	bl	80006b4 <reduce_detection>
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200000d9 	.word	0x200000d9

080007ac <check_flow>:

//check whether flow number over the limit
void check_flow(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
	if (flow_num > flow_limit)
 80007b0:	4b1d      	ldr	r3, [pc, #116]	; (8000828 <check_flow+0x7c>)
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	4b1d      	ldr	r3, [pc, #116]	; (800082c <check_flow+0x80>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	429a      	cmp	r2, r3
 80007ba:	dd22      	ble.n	8000802 <check_flow+0x56>
	{
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007c2:	481b      	ldr	r0, [pc, #108]	; (8000830 <check_flow+0x84>)
 80007c4:	f001 fea6 	bl	8002514 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ce:	4818      	ldr	r0, [pc, #96]	; (8000830 <check_flow+0x84>)
 80007d0:	f001 fea0 	bl	8002514 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ALARM_GPIO_Port, ALARM_Pin, GPIO_PIN_SET);
 80007d4:	2201      	movs	r2, #1
 80007d6:	2104      	movs	r1, #4
 80007d8:	4815      	ldr	r0, [pc, #84]	; (8000830 <check_flow+0x84>)
 80007da:	f001 fe9b 	bl	8002514 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80007de:	2064      	movs	r0, #100	; 0x64
 80007e0:	f001 fbc6 	bl	8001f70 <HAL_Delay>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80007e4:	2201      	movs	r2, #1
 80007e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ea:	4811      	ldr	r0, [pc, #68]	; (8000830 <check_flow+0x84>)
 80007ec:	f001 fe92 	bl	8002514 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ALARM_GPIO_Port, ALARM_Pin, GPIO_PIN_RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2104      	movs	r1, #4
 80007f4:	480e      	ldr	r0, [pc, #56]	; (8000830 <check_flow+0x84>)
 80007f6:	f001 fe8d 	bl	8002514 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80007fa:	2064      	movs	r0, #100	; 0x64
 80007fc:	f001 fbb8 	bl	8001f70 <HAL_Delay>
	{
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(ALARM_GPIO_Port, ALARM_Pin, GPIO_PIN_RESET);
	}
}
 8000800:	e010      	b.n	8000824 <check_flow+0x78>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000808:	4809      	ldr	r0, [pc, #36]	; (8000830 <check_flow+0x84>)
 800080a:	f001 fe83 	bl	8002514 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800080e:	2201      	movs	r2, #1
 8000810:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000814:	4806      	ldr	r0, [pc, #24]	; (8000830 <check_flow+0x84>)
 8000816:	f001 fe7d 	bl	8002514 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ALARM_GPIO_Port, ALARM_Pin, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	2104      	movs	r1, #4
 800081e:	4804      	ldr	r0, [pc, #16]	; (8000830 <check_flow+0x84>)
 8000820:	f001 fe78 	bl	8002514 <HAL_GPIO_WritePin>
}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	200000cc 	.word	0x200000cc
 800082c:	200000d0 	.word	0x200000d0
 8000830:	40020400 	.word	0x40020400

08000834 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b088      	sub	sp, #32
 8000838:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083a:	f107 030c 	add.w	r3, r7, #12
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	4b60      	ldr	r3, [pc, #384]	; (80009d0 <MX_GPIO_Init+0x19c>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a5f      	ldr	r2, [pc, #380]	; (80009d0 <MX_GPIO_Init+0x19c>)
 8000854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b5d      	ldr	r3, [pc, #372]	; (80009d0 <MX_GPIO_Init+0x19c>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	4b59      	ldr	r3, [pc, #356]	; (80009d0 <MX_GPIO_Init+0x19c>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a58      	ldr	r2, [pc, #352]	; (80009d0 <MX_GPIO_Init+0x19c>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b56      	ldr	r3, [pc, #344]	; (80009d0 <MX_GPIO_Init+0x19c>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	603b      	str	r3, [r7, #0]
 8000886:	4b52      	ldr	r3, [pc, #328]	; (80009d0 <MX_GPIO_Init+0x19c>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a51      	ldr	r2, [pc, #324]	; (80009d0 <MX_GPIO_Init+0x19c>)
 800088c:	f043 0302 	orr.w	r3, r3, #2
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b4f      	ldr	r3, [pc, #316]	; (80009d0 <MX_GPIO_Init+0x19c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ALARM_Pin|LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_SET);
 800089e:	2201      	movs	r2, #1
 80008a0:	f243 0104 	movw	r1, #12292	; 0x3004
 80008a4:	484b      	ldr	r0, [pc, #300]	; (80009d4 <MX_GPIO_Init+0x1a0>)
 80008a6:	f001 fe35 	bl	8002514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NUM_KEY_O3_Pin|NUM_KEY_O2_Pin|NUM_KEY_O1_Pin, GPIO_PIN_SET);
 80008aa:	2201      	movs	r2, #1
 80008ac:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80008b0:	4849      	ldr	r0, [pc, #292]	; (80009d8 <MX_GPIO_Init+0x1a4>)
 80008b2:	f001 fe2f 	bl	8002514 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USER_KEY_Pin|NUM_KEY_I2_Pin|NUM_KEY_I1_Pin;
 80008b6:	f240 3301 	movw	r3, #769	; 0x301
 80008ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008bc:	2300      	movs	r3, #0
 80008be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008c0:	2301      	movs	r3, #1
 80008c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	4619      	mov	r1, r3
 80008ca:	4843      	ldr	r0, [pc, #268]	; (80009d8 <MX_GPIO_Init+0x1a4>)
 80008cc:	f001 fc86 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SIG1_Pin|SIG2_Pin|TIME_LIMIT_KEY_Pin|FLOW_LIMIT_KEY_Pin;
 80008d0:	2333      	movs	r3, #51	; 0x33
 80008d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008d4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008da:	2301      	movs	r3, #1
 80008dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008de:	f107 030c 	add.w	r3, r7, #12
 80008e2:	4619      	mov	r1, r3
 80008e4:	483b      	ldr	r0, [pc, #236]	; (80009d4 <MX_GPIO_Init+0x1a0>)
 80008e6:	f001 fc79 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ALARM_Pin;
 80008ea:	2304      	movs	r3, #4
 80008ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ee:	2301      	movs	r3, #1
 80008f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ALARM_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 030c 	add.w	r3, r7, #12
 80008fe:	4619      	mov	r1, r3
 8000900:	4834      	ldr	r0, [pc, #208]	; (80009d4 <MX_GPIO_Init+0x1a0>)
 8000902:	f001 fc6b 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000906:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800090a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800090c:	2311      	movs	r3, #17
 800090e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000910:	2301      	movs	r3, #1
 8000912:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000918:	f107 030c 	add.w	r3, r7, #12
 800091c:	4619      	mov	r1, r3
 800091e:	482d      	ldr	r0, [pc, #180]	; (80009d4 <MX_GPIO_Init+0x1a0>)
 8000920:	f001 fc5c 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = NUM_KEY_I4_Pin|NUM_KEY_I3_Pin|ENTER_KEY_Pin;
 8000924:	f24c 0308 	movw	r3, #49160	; 0xc008
 8000928:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092a:	2300      	movs	r3, #0
 800092c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800092e:	2301      	movs	r3, #1
 8000930:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000932:	f107 030c 	add.w	r3, r7, #12
 8000936:	4619      	mov	r1, r3
 8000938:	4826      	ldr	r0, [pc, #152]	; (80009d4 <MX_GPIO_Init+0x1a0>)
 800093a:	f001 fc4f 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = NUM_KEY_O3_Pin|NUM_KEY_O2_Pin|NUM_KEY_O1_Pin;
 800093e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000942:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000944:	2301      	movs	r3, #1
 8000946:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000948:	2301      	movs	r3, #1
 800094a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094c:	2300      	movs	r3, #0
 800094e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000950:	f107 030c 	add.w	r3, r7, #12
 8000954:	4619      	mov	r1, r3
 8000956:	4820      	ldr	r0, [pc, #128]	; (80009d8 <MX_GPIO_Init+0x1a4>)
 8000958:	f001 fc40 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLOW_NUM_KEY_Pin;
 800095c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000960:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000962:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000966:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000968:	2301      	movs	r3, #1
 800096a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FLOW_NUM_KEY_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 030c 	add.w	r3, r7, #12
 8000970:	4619      	mov	r1, r3
 8000972:	4819      	ldr	r0, [pc, #100]	; (80009d8 <MX_GPIO_Init+0x1a4>)
 8000974:	f001 fc32 	bl	80021dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 8000978:	2200      	movs	r2, #0
 800097a:	2102      	movs	r1, #2
 800097c:	2006      	movs	r0, #6
 800097e:	f001 fbf6 	bl	800216e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000982:	2006      	movs	r0, #6
 8000984:	f001 fc0f 	bl	80021a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 2, 0);
 8000988:	2200      	movs	r2, #0
 800098a:	2102      	movs	r1, #2
 800098c:	2007      	movs	r0, #7
 800098e:	f001 fbee 	bl	800216e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000992:	2007      	movs	r0, #7
 8000994:	f001 fc07 	bl	80021a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8000998:	2200      	movs	r2, #0
 800099a:	2101      	movs	r1, #1
 800099c:	200a      	movs	r0, #10
 800099e:	f001 fbe6 	bl	800216e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80009a2:	200a      	movs	r0, #10
 80009a4:	f001 fbff 	bl	80021a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80009a8:	2200      	movs	r2, #0
 80009aa:	2101      	movs	r1, #1
 80009ac:	2017      	movs	r0, #23
 80009ae:	f001 fbde 	bl	800216e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80009b2:	2017      	movs	r0, #23
 80009b4:	f001 fbf7 	bl	80021a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 80009b8:	2200      	movs	r2, #0
 80009ba:	2101      	movs	r1, #1
 80009bc:	2028      	movs	r0, #40	; 0x28
 80009be:	f001 fbd6 	bl	800216e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009c2:	2028      	movs	r0, #40	; 0x28
 80009c4:	f001 fbef 	bl	80021a6 <HAL_NVIC_EnableIRQ>

}
 80009c8:	bf00      	nop
 80009ca:	3720      	adds	r7, #32
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40020400 	.word	0x40020400
 80009d8:	40020000 	.word	0x40020000

080009dc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <MX_I2C1_Init+0x50>)
 80009e2:	4a13      	ldr	r2, [pc, #76]	; (8000a30 <MX_I2C1_Init+0x54>)
 80009e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80009e6:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <MX_I2C1_Init+0x50>)
 80009e8:	4a12      	ldr	r2, [pc, #72]	; (8000a34 <MX_I2C1_Init+0x58>)
 80009ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <MX_I2C1_Init+0x50>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <MX_I2C1_Init+0x50>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <MX_I2C1_Init+0x50>)
 80009fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a00:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <MX_I2C1_Init+0x50>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a06:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <MX_I2C1_Init+0x50>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a0c:	4b07      	ldr	r3, [pc, #28]	; (8000a2c <MX_I2C1_Init+0x50>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <MX_I2C1_Init+0x50>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a18:	4804      	ldr	r0, [pc, #16]	; (8000a2c <MX_I2C1_Init+0x50>)
 8000a1a:	f001 fdb9 	bl	8002590 <HAL_I2C_Init>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a24:	f000 f9ca 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000078 	.word	0x20000078
 8000a30:	40005400 	.word	0x40005400
 8000a34:	00061a80 	.word	0x00061a80

08000a38 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08a      	sub	sp, #40	; 0x28
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a19      	ldr	r2, [pc, #100]	; (8000abc <HAL_I2C_MspInit+0x84>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d12b      	bne.n	8000ab2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
 8000a5e:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <HAL_I2C_MspInit+0x88>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a17      	ldr	r2, [pc, #92]	; (8000ac0 <HAL_I2C_MspInit+0x88>)
 8000a64:	f043 0302 	orr.w	r3, r3, #2
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <HAL_I2C_MspInit+0x88>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a76:	23c0      	movs	r3, #192	; 0xc0
 8000a78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a7a:	2312      	movs	r3, #18
 8000a7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a82:	2303      	movs	r3, #3
 8000a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a86:	2304      	movs	r3, #4
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4619      	mov	r1, r3
 8000a90:	480c      	ldr	r0, [pc, #48]	; (8000ac4 <HAL_I2C_MspInit+0x8c>)
 8000a92:	f001 fba3 	bl	80021dc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <HAL_I2C_MspInit+0x88>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	4a08      	ldr	r2, [pc, #32]	; (8000ac0 <HAL_I2C_MspInit+0x88>)
 8000aa0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa6:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <HAL_I2C_MspInit+0x88>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ab2:	bf00      	nop
 8000ab4:	3728      	adds	r7, #40	; 0x28
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40005400 	.word	0x40005400
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40020400 	.word	0x40020400

08000ac8 <main_init>:
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

//initialize and show start page
static void main_init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ad4:	4838      	ldr	r0, [pc, #224]	; (8000bb8 <main_init+0xf0>)
 8000ad6:	f001 fd1d 	bl	8002514 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ae0:	4835      	ldr	r0, [pc, #212]	; (8000bb8 <main_init+0xf0>)
 8000ae2:	f001 fd17 	bl	8002514 <HAL_GPIO_WritePin>

	oled_init();
 8000ae6:	f000 fdab 	bl	8001640 <oled_init>
	oled_fill();
 8000aea:	f000 ff6d 	bl	80019c8 <oled_fill>
	HAL_Delay(200);
 8000aee:	20c8      	movs	r0, #200	; 0xc8
 8000af0:	f001 fa3e 	bl	8001f70 <HAL_Delay>
	oled_clear();
 8000af4:	f000 ff74 	bl	80019e0 <oled_clear>
	oled_draw_ASCII(0, 0, " Flow Detecting ", SET, LEFT);
 8000af8:	2300      	movs	r3, #0
 8000afa:	9300      	str	r3, [sp, #0]
 8000afc:	2301      	movs	r3, #1
 8000afe:	4a2f      	ldr	r2, [pc, #188]	; (8000bbc <main_init+0xf4>)
 8000b00:	2100      	movs	r1, #0
 8000b02:	2000      	movs	r0, #0
 8000b04:	f000 ff78 	bl	80019f8 <oled_draw_ASCII>
	oled_draw_ASCII(0, 16, " Device ---V1.0 ", SET, LEFT);
 8000b08:	2300      	movs	r3, #0
 8000b0a:	9300      	str	r3, [sp, #0]
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	4a2c      	ldr	r2, [pc, #176]	; (8000bc0 <main_init+0xf8>)
 8000b10:	2110      	movs	r1, #16
 8000b12:	2000      	movs	r0, #0
 8000b14:	f000 ff70 	bl	80019f8 <oled_draw_ASCII>
	oled_draw_ASCII(0, 32, " By Feng Mingze ", SET, LEFT);
 8000b18:	2300      	movs	r3, #0
 8000b1a:	9300      	str	r3, [sp, #0]
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	4a29      	ldr	r2, [pc, #164]	; (8000bc4 <main_init+0xfc>)
 8000b20:	2120      	movs	r1, #32
 8000b22:	2000      	movs	r0, #0
 8000b24:	f000 ff68 	bl	80019f8 <oled_draw_ASCII>
	oled_draw_ASCII(0, 48, " Initializing", SET, LEFT);
 8000b28:	2300      	movs	r3, #0
 8000b2a:	9300      	str	r3, [sp, #0]
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	4a26      	ldr	r2, [pc, #152]	; (8000bc8 <main_init+0x100>)
 8000b30:	2130      	movs	r1, #48	; 0x30
 8000b32:	2000      	movs	r0, #0
 8000b34:	f000 ff60 	bl	80019f8 <oled_draw_ASCII>
	HAL_Delay(500);
 8000b38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b3c:	f001 fa18 	bl	8001f70 <HAL_Delay>
	oled_draw_ASCII(0, 48, " Initializing.", SET, LEFT);
 8000b40:	2300      	movs	r3, #0
 8000b42:	9300      	str	r3, [sp, #0]
 8000b44:	2301      	movs	r3, #1
 8000b46:	4a21      	ldr	r2, [pc, #132]	; (8000bcc <main_init+0x104>)
 8000b48:	2130      	movs	r1, #48	; 0x30
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	f000 ff54 	bl	80019f8 <oled_draw_ASCII>
	HAL_Delay(500);
 8000b50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b54:	f001 fa0c 	bl	8001f70 <HAL_Delay>
	oled_draw_ASCII(0, 48, " Initializing..", SET, LEFT);
 8000b58:	2300      	movs	r3, #0
 8000b5a:	9300      	str	r3, [sp, #0]
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	4a1c      	ldr	r2, [pc, #112]	; (8000bd0 <main_init+0x108>)
 8000b60:	2130      	movs	r1, #48	; 0x30
 8000b62:	2000      	movs	r0, #0
 8000b64:	f000 ff48 	bl	80019f8 <oled_draw_ASCII>
	HAL_Delay(500);
 8000b68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b6c:	f001 fa00 	bl	8001f70 <HAL_Delay>
	oled_draw_ASCII(0, 48, " Initializing...", SET, LEFT);
 8000b70:	2300      	movs	r3, #0
 8000b72:	9300      	str	r3, [sp, #0]
 8000b74:	2301      	movs	r3, #1
 8000b76:	4a17      	ldr	r2, [pc, #92]	; (8000bd4 <main_init+0x10c>)
 8000b78:	2130      	movs	r1, #48	; 0x30
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f000 ff3c 	bl	80019f8 <oled_draw_ASCII>
	HAL_Delay(500);
 8000b80:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b84:	f001 f9f4 	bl	8001f70 <HAL_Delay>

	HAL_GPIO_WritePin(ALARM_GPIO_Port, ALARM_Pin, GPIO_PIN_RESET);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2104      	movs	r1, #4
 8000b8c:	480a      	ldr	r0, [pc, #40]	; (8000bb8 <main_init+0xf0>)
 8000b8e:	f001 fcc1 	bl	8002514 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000b92:	2201      	movs	r2, #1
 8000b94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b98:	4807      	ldr	r0, [pc, #28]	; (8000bb8 <main_init+0xf0>)
 8000b9a:	f001 fcbb 	bl	8002514 <HAL_GPIO_WritePin>

	oled_fill();
 8000b9e:	f000 ff13 	bl	80019c8 <oled_fill>
	HAL_Delay(200);
 8000ba2:	20c8      	movs	r0, #200	; 0xc8
 8000ba4:	f001 f9e4 	bl	8001f70 <HAL_Delay>
	oled_clear();
 8000ba8:	f000 ff1a 	bl	80019e0 <oled_clear>

	main_show();
 8000bac:	f000 f814 	bl	8000bd8 <main_show>
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40020400 	.word	0x40020400
 8000bbc:	0800492c 	.word	0x0800492c
 8000bc0:	08004940 	.word	0x08004940
 8000bc4:	08004954 	.word	0x08004954
 8000bc8:	08004968 	.word	0x08004968
 8000bcc:	08004978 	.word	0x08004978
 8000bd0:	08004988 	.word	0x08004988
 8000bd4:	08004998 	.word	0x08004998

08000bd8 <main_show>:

//show main page
void main_show(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af02      	add	r7, sp, #8
	oled_clear();
 8000bde:	f000 feff 	bl	80019e0 <oled_clear>

	if (flow_num > 99999999)
 8000be2:	4b2b      	ldr	r3, [pc, #172]	; (8000c90 <main_show+0xb8>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a2b      	ldr	r2, [pc, #172]	; (8000c94 <main_show+0xbc>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	dd02      	ble.n	8000bf2 <main_show+0x1a>
		flow_num = 99999999;
 8000bec:	4b28      	ldr	r3, [pc, #160]	; (8000c90 <main_show+0xb8>)
 8000bee:	4a29      	ldr	r2, [pc, #164]	; (8000c94 <main_show+0xbc>)
 8000bf0:	601a      	str	r2, [r3, #0]
	if (flow_num < 0)
 8000bf2:	4b27      	ldr	r3, [pc, #156]	; (8000c90 <main_show+0xb8>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	da02      	bge.n	8000c00 <main_show+0x28>
		flow_num = 0;
 8000bfa:	4b25      	ldr	r3, [pc, #148]	; (8000c90 <main_show+0xb8>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]

	static char flow_num_char[8];
	sprintf(flow_num_char, "%d", flow_num);
 8000c00:	4b23      	ldr	r3, [pc, #140]	; (8000c90 <main_show+0xb8>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	461a      	mov	r2, r3
 8000c06:	4924      	ldr	r1, [pc, #144]	; (8000c98 <main_show+0xc0>)
 8000c08:	4824      	ldr	r0, [pc, #144]	; (8000c9c <main_show+0xc4>)
 8000c0a:	f003 f9df 	bl	8003fcc <siprintf>
	oled_draw_ASCII(0, 0, "Flow Number:", SET, LEFT);
 8000c0e:	2300      	movs	r3, #0
 8000c10:	9300      	str	r3, [sp, #0]
 8000c12:	2301      	movs	r3, #1
 8000c14:	4a22      	ldr	r2, [pc, #136]	; (8000ca0 <main_show+0xc8>)
 8000c16:	2100      	movs	r1, #0
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f000 feed 	bl	80019f8 <oled_draw_ASCII>
	oled_draw_ASCII(120, 16, flow_num_char, SET, RIGHT);
 8000c1e:	2301      	movs	r3, #1
 8000c20:	9300      	str	r3, [sp, #0]
 8000c22:	2301      	movs	r3, #1
 8000c24:	4a1d      	ldr	r2, [pc, #116]	; (8000c9c <main_show+0xc4>)
 8000c26:	2110      	movs	r1, #16
 8000c28:	2078      	movs	r0, #120	; 0x78
 8000c2a:	f000 fee5 	bl	80019f8 <oled_draw_ASCII>

	static char flow_limit_char[8];
	sprintf(flow_limit_char, "%d", flow_limit);
 8000c2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <main_show+0xcc>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	461a      	mov	r2, r3
 8000c34:	4918      	ldr	r1, [pc, #96]	; (8000c98 <main_show+0xc0>)
 8000c36:	481c      	ldr	r0, [pc, #112]	; (8000ca8 <main_show+0xd0>)
 8000c38:	f003 f9c8 	bl	8003fcc <siprintf>
	oled_draw_ASCII(0, 32, "MaxFlow:", SET, LEFT);
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	9300      	str	r3, [sp, #0]
 8000c40:	2301      	movs	r3, #1
 8000c42:	4a1a      	ldr	r2, [pc, #104]	; (8000cac <main_show+0xd4>)
 8000c44:	2120      	movs	r1, #32
 8000c46:	2000      	movs	r0, #0
 8000c48:	f000 fed6 	bl	80019f8 <oled_draw_ASCII>
	oled_draw_ASCII(120, 32, flow_limit_char, SET, RIGHT);
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	9300      	str	r3, [sp, #0]
 8000c50:	2301      	movs	r3, #1
 8000c52:	4a15      	ldr	r2, [pc, #84]	; (8000ca8 <main_show+0xd0>)
 8000c54:	2120      	movs	r1, #32
 8000c56:	2078      	movs	r0, #120	; 0x78
 8000c58:	f000 fece 	bl	80019f8 <oled_draw_ASCII>

	static char time_limit_char[8];
	sprintf(time_limit_char, "%d", time_limit);
 8000c5c:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <main_show+0xd8>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	461a      	mov	r2, r3
 8000c62:	490d      	ldr	r1, [pc, #52]	; (8000c98 <main_show+0xc0>)
 8000c64:	4813      	ldr	r0, [pc, #76]	; (8000cb4 <main_show+0xdc>)
 8000c66:	f003 f9b1 	bl	8003fcc <siprintf>
	oled_draw_ASCII(0, 48, "MaxTime:", SET, LEFT);
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	9300      	str	r3, [sp, #0]
 8000c6e:	2301      	movs	r3, #1
 8000c70:	4a11      	ldr	r2, [pc, #68]	; (8000cb8 <main_show+0xe0>)
 8000c72:	2130      	movs	r1, #48	; 0x30
 8000c74:	2000      	movs	r0, #0
 8000c76:	f000 febf 	bl	80019f8 <oled_draw_ASCII>
	oled_draw_ASCII(120, 48, time_limit_char, SET, RIGHT);
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	9300      	str	r3, [sp, #0]
 8000c7e:	2301      	movs	r3, #1
 8000c80:	4a0c      	ldr	r2, [pc, #48]	; (8000cb4 <main_show+0xdc>)
 8000c82:	2130      	movs	r1, #48	; 0x30
 8000c84:	2078      	movs	r0, #120	; 0x78
 8000c86:	f000 feb7 	bl	80019f8 <oled_draw_ASCII>
}
 8000c8a:	bf00      	nop
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	200000cc 	.word	0x200000cc
 8000c94:	05f5e0ff 	.word	0x05f5e0ff
 8000c98:	080049ac 	.word	0x080049ac
 8000c9c:	200000dc 	.word	0x200000dc
 8000ca0:	080049b0 	.word	0x080049b0
 8000ca4:	200000d0 	.word	0x200000d0
 8000ca8:	200000e4 	.word	0x200000e4
 8000cac:	080049c0 	.word	0x080049c0
 8000cb0:	200000d4 	.word	0x200000d4
 8000cb4:	200000ec 	.word	0x200000ec
 8000cb8:	080049cc 	.word	0x080049cc

08000cbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cc0:	f001 f8e4 	bl	8001e8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cc4:	f000 f810 	bl	8000ce8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc8:	f7ff fdb4 	bl	8000834 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ccc:	f7ff fe86 	bl	80009dc <MX_I2C1_Init>
  MX_TIM2_Init();
 8000cd0:	f001 f840 	bl	8001d54 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  main_init();
 8000cd4:	f7ff fef8 	bl	8000ac8 <main_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	check_menu();
 8000cd8:	f000 fc02 	bl	80014e0 <check_menu>
	check_detection();
 8000cdc:	f7ff fd4c 	bl	8000778 <check_detection>
	check_flow();
 8000ce0:	f7ff fd64 	bl	80007ac <check_flow>
	check_menu();
 8000ce4:	e7f8      	b.n	8000cd8 <main+0x1c>
	...

08000ce8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b094      	sub	sp, #80	; 0x50
 8000cec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cee:	f107 0320 	add.w	r3, r7, #32
 8000cf2:	2230      	movs	r2, #48	; 0x30
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f003 f988 	bl	800400c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cfc:	f107 030c 	add.w	r3, r7, #12
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	4b28      	ldr	r3, [pc, #160]	; (8000db4 <SystemClock_Config+0xcc>)
 8000d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d14:	4a27      	ldr	r2, [pc, #156]	; (8000db4 <SystemClock_Config+0xcc>)
 8000d16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1c:	4b25      	ldr	r3, [pc, #148]	; (8000db4 <SystemClock_Config+0xcc>)
 8000d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d28:	2300      	movs	r3, #0
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	4b22      	ldr	r3, [pc, #136]	; (8000db8 <SystemClock_Config+0xd0>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d34:	4a20      	ldr	r2, [pc, #128]	; (8000db8 <SystemClock_Config+0xd0>)
 8000d36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d3a:	6013      	str	r3, [r2, #0]
 8000d3c:	4b1e      	ldr	r3, [pc, #120]	; (8000db8 <SystemClock_Config+0xd0>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d52:	2302      	movs	r3, #2
 8000d54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000d5c:	2319      	movs	r3, #25
 8000d5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000d60:	23a8      	movs	r3, #168	; 0xa8
 8000d62:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d64:	2302      	movs	r3, #2
 8000d66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d68:	2304      	movs	r3, #4
 8000d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d6c:	f107 0320 	add.w	r3, r7, #32
 8000d70:	4618      	mov	r0, r3
 8000d72:	f002 f869 	bl	8002e48 <HAL_RCC_OscConfig>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000d7c:	f000 f81e 	bl	8000dbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d80:	230f      	movs	r3, #15
 8000d82:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d84:	2302      	movs	r3, #2
 8000d86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d96:	f107 030c 	add.w	r3, r7, #12
 8000d9a:	2102      	movs	r1, #2
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f002 facb 	bl	8003338 <HAL_RCC_ClockConfig>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000da8:	f000 f808 	bl	8000dbc <Error_Handler>
  }
}
 8000dac:	bf00      	nop
 8000dae:	3750      	adds	r7, #80	; 0x50
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40007000 	.word	0x40007000

08000dbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc0:	b672      	cpsid	i
}
 8000dc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <Error_Handler+0x8>
	...

08000dc8 <num_key_scan>:
extern uint8_t menu;
static uint8_t menu_current;//current menu selection

//scan number keyboard
static uint8_t num_key_scan(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NUM_KEY_O1_GPIO_Port, NUM_KEY_O1_Pin, GPIO_PIN_RESET);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dd2:	48ae      	ldr	r0, [pc, #696]	; (800108c <num_key_scan+0x2c4>)
 8000dd4:	f001 fb9e 	bl	8002514 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(NUM_KEY_O2_GPIO_Port, NUM_KEY_O2_Pin, GPIO_PIN_SET);
 8000dd8:	2201      	movs	r2, #1
 8000dda:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dde:	48ab      	ldr	r0, [pc, #684]	; (800108c <num_key_scan+0x2c4>)
 8000de0:	f001 fb98 	bl	8002514 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(NUM_KEY_O3_GPIO_Port, NUM_KEY_O3_Pin, GPIO_PIN_SET);
 8000de4:	2201      	movs	r2, #1
 8000de6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dea:	48a8      	ldr	r0, [pc, #672]	; (800108c <num_key_scan+0x2c4>)
 8000dec:	f001 fb92 	bl	8002514 <HAL_GPIO_WritePin>
	HAL_Delay(10);//eliminate the interference of parasitic capacitance of keyboard
 8000df0:	200a      	movs	r0, #10
 8000df2:	f001 f8bd 	bl	8001f70 <HAL_Delay>
	if (HAL_GPIO_ReadPin(NUM_KEY_I1_GPIO_Port, NUM_KEY_I1_Pin) == GPIO_PIN_RESET)
 8000df6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dfa:	48a4      	ldr	r0, [pc, #656]	; (800108c <num_key_scan+0x2c4>)
 8000dfc:	f001 fb72 	bl	80024e4 <HAL_GPIO_ReadPin>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d10d      	bne.n	8000e22 <num_key_scan+0x5a>
	{
		HAL_Delay(10);//eliminate buffering of keyboard
 8000e06:	200a      	movs	r0, #10
 8000e08:	f001 f8b2 	bl	8001f70 <HAL_Delay>
		while(HAL_GPIO_ReadPin(NUM_KEY_I1_GPIO_Port, NUM_KEY_I1_Pin) == GPIO_PIN_RESET);
 8000e0c:	bf00      	nop
 8000e0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e12:	489e      	ldr	r0, [pc, #632]	; (800108c <num_key_scan+0x2c4>)
 8000e14:	f001 fb66 	bl	80024e4 <HAL_GPIO_ReadPin>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d0f7      	beq.n	8000e0e <num_key_scan+0x46>
		return 14;//#
 8000e1e:	230e      	movs	r3, #14
 8000e20:	e131      	b.n	8001086 <num_key_scan+0x2be>
	}
	if (HAL_GPIO_ReadPin(NUM_KEY_I2_GPIO_Port, NUM_KEY_I2_Pin) == GPIO_PIN_RESET)
 8000e22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e26:	4899      	ldr	r0, [pc, #612]	; (800108c <num_key_scan+0x2c4>)
 8000e28:	f001 fb5c 	bl	80024e4 <HAL_GPIO_ReadPin>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d10d      	bne.n	8000e4e <num_key_scan+0x86>
	{
		HAL_Delay(10);//eliminate buffering of keyboard
 8000e32:	200a      	movs	r0, #10
 8000e34:	f001 f89c 	bl	8001f70 <HAL_Delay>
		while(HAL_GPIO_ReadPin(NUM_KEY_I2_GPIO_Port, NUM_KEY_I2_Pin) == GPIO_PIN_RESET);
 8000e38:	bf00      	nop
 8000e3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e3e:	4893      	ldr	r0, [pc, #588]	; (800108c <num_key_scan+0x2c4>)
 8000e40:	f001 fb50 	bl	80024e4 <HAL_GPIO_ReadPin>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d0f7      	beq.n	8000e3a <num_key_scan+0x72>
		return 9;
 8000e4a:	2309      	movs	r3, #9
 8000e4c:	e11b      	b.n	8001086 <num_key_scan+0x2be>
	}
	if (HAL_GPIO_ReadPin(NUM_KEY_I3_GPIO_Port, NUM_KEY_I3_Pin) == GPIO_PIN_RESET)
 8000e4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e52:	488f      	ldr	r0, [pc, #572]	; (8001090 <num_key_scan+0x2c8>)
 8000e54:	f001 fb46 	bl	80024e4 <HAL_GPIO_ReadPin>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d10d      	bne.n	8000e7a <num_key_scan+0xb2>
	{
		HAL_Delay(10);//eliminate buffering of keyboard
 8000e5e:	200a      	movs	r0, #10
 8000e60:	f001 f886 	bl	8001f70 <HAL_Delay>
		while(HAL_GPIO_ReadPin(NUM_KEY_I2_GPIO_Port, NUM_KEY_I2_Pin) == GPIO_PIN_RESET);
 8000e64:	bf00      	nop
 8000e66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e6a:	4888      	ldr	r0, [pc, #544]	; (800108c <num_key_scan+0x2c4>)
 8000e6c:	f001 fb3a 	bl	80024e4 <HAL_GPIO_ReadPin>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d0f7      	beq.n	8000e66 <num_key_scan+0x9e>
		return 6;
 8000e76:	2306      	movs	r3, #6
 8000e78:	e105      	b.n	8001086 <num_key_scan+0x2be>
	}
	if (HAL_GPIO_ReadPin(NUM_KEY_I4_GPIO_Port, NUM_KEY_I4_Pin) == GPIO_PIN_RESET)
 8000e7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e7e:	4884      	ldr	r0, [pc, #528]	; (8001090 <num_key_scan+0x2c8>)
 8000e80:	f001 fb30 	bl	80024e4 <HAL_GPIO_ReadPin>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d10d      	bne.n	8000ea6 <num_key_scan+0xde>
	{
		HAL_Delay(10);//eliminate buffering of keyboard
 8000e8a:	200a      	movs	r0, #10
 8000e8c:	f001 f870 	bl	8001f70 <HAL_Delay>
		while(HAL_GPIO_ReadPin(NUM_KEY_I2_GPIO_Port, NUM_KEY_I2_Pin) == GPIO_PIN_RESET);
 8000e90:	bf00      	nop
 8000e92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e96:	487d      	ldr	r0, [pc, #500]	; (800108c <num_key_scan+0x2c4>)
 8000e98:	f001 fb24 	bl	80024e4 <HAL_GPIO_ReadPin>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d0f7      	beq.n	8000e92 <num_key_scan+0xca>
		return 3;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	e0ef      	b.n	8001086 <num_key_scan+0x2be>
	}

	HAL_GPIO_WritePin(NUM_KEY_O1_GPIO_Port, NUM_KEY_O1_Pin, GPIO_PIN_SET);
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eac:	4877      	ldr	r0, [pc, #476]	; (800108c <num_key_scan+0x2c4>)
 8000eae:	f001 fb31 	bl	8002514 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(NUM_KEY_O2_GPIO_Port, NUM_KEY_O2_Pin, GPIO_PIN_RESET);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eb8:	4874      	ldr	r0, [pc, #464]	; (800108c <num_key_scan+0x2c4>)
 8000eba:	f001 fb2b 	bl	8002514 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(NUM_KEY_O3_GPIO_Port, NUM_KEY_O3_Pin, GPIO_PIN_SET);
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ec4:	4871      	ldr	r0, [pc, #452]	; (800108c <num_key_scan+0x2c4>)
 8000ec6:	f001 fb25 	bl	8002514 <HAL_GPIO_WritePin>
	HAL_Delay(10);//eliminate the interference of parasitic capacitance of keyboard
 8000eca:	200a      	movs	r0, #10
 8000ecc:	f001 f850 	bl	8001f70 <HAL_Delay>
	if (HAL_GPIO_ReadPin(NUM_KEY_I1_GPIO_Port, NUM_KEY_I1_Pin) == GPIO_PIN_RESET)
 8000ed0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ed4:	486d      	ldr	r0, [pc, #436]	; (800108c <num_key_scan+0x2c4>)
 8000ed6:	f001 fb05 	bl	80024e4 <HAL_GPIO_ReadPin>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d10d      	bne.n	8000efc <num_key_scan+0x134>
	{
		HAL_Delay(10);//eliminate buffering of keyboard
 8000ee0:	200a      	movs	r0, #10
 8000ee2:	f001 f845 	bl	8001f70 <HAL_Delay>
		while(HAL_GPIO_ReadPin(NUM_KEY_I1_GPIO_Port, NUM_KEY_I1_Pin) == GPIO_PIN_RESET);
 8000ee6:	bf00      	nop
 8000ee8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eec:	4867      	ldr	r0, [pc, #412]	; (800108c <num_key_scan+0x2c4>)
 8000eee:	f001 faf9 	bl	80024e4 <HAL_GPIO_ReadPin>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d0f7      	beq.n	8000ee8 <num_key_scan+0x120>
		return 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	e0c4      	b.n	8001086 <num_key_scan+0x2be>
	}
	if (HAL_GPIO_ReadPin(NUM_KEY_I2_GPIO_Port, NUM_KEY_I2_Pin) == GPIO_PIN_RESET)
 8000efc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f00:	4862      	ldr	r0, [pc, #392]	; (800108c <num_key_scan+0x2c4>)
 8000f02:	f001 faef 	bl	80024e4 <HAL_GPIO_ReadPin>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d10d      	bne.n	8000f28 <num_key_scan+0x160>
	{
		HAL_Delay(10);//eliminate buffering of keyboard
 8000f0c:	200a      	movs	r0, #10
 8000f0e:	f001 f82f 	bl	8001f70 <HAL_Delay>
		while(HAL_GPIO_ReadPin(NUM_KEY_I2_GPIO_Port, NUM_KEY_I2_Pin) == GPIO_PIN_RESET);
 8000f12:	bf00      	nop
 8000f14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f18:	485c      	ldr	r0, [pc, #368]	; (800108c <num_key_scan+0x2c4>)
 8000f1a:	f001 fae3 	bl	80024e4 <HAL_GPIO_ReadPin>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d0f7      	beq.n	8000f14 <num_key_scan+0x14c>
		return 8;
 8000f24:	2308      	movs	r3, #8
 8000f26:	e0ae      	b.n	8001086 <num_key_scan+0x2be>
	}
	if (HAL_GPIO_ReadPin(NUM_KEY_I3_GPIO_Port, NUM_KEY_I3_Pin) == GPIO_PIN_RESET)
 8000f28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f2c:	4858      	ldr	r0, [pc, #352]	; (8001090 <num_key_scan+0x2c8>)
 8000f2e:	f001 fad9 	bl	80024e4 <HAL_GPIO_ReadPin>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d10d      	bne.n	8000f54 <num_key_scan+0x18c>
	{
		HAL_Delay(10);//eliminate buffering of keyboard
 8000f38:	200a      	movs	r0, #10
 8000f3a:	f001 f819 	bl	8001f70 <HAL_Delay>
		while(HAL_GPIO_ReadPin(NUM_KEY_I2_GPIO_Port, NUM_KEY_I2_Pin) == GPIO_PIN_RESET);
 8000f3e:	bf00      	nop
 8000f40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f44:	4851      	ldr	r0, [pc, #324]	; (800108c <num_key_scan+0x2c4>)
 8000f46:	f001 facd 	bl	80024e4 <HAL_GPIO_ReadPin>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d0f7      	beq.n	8000f40 <num_key_scan+0x178>
		return 5;
 8000f50:	2305      	movs	r3, #5
 8000f52:	e098      	b.n	8001086 <num_key_scan+0x2be>
	}
	if (HAL_GPIO_ReadPin(NUM_KEY_I4_GPIO_Port, NUM_KEY_I4_Pin) == GPIO_PIN_RESET)
 8000f54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f58:	484d      	ldr	r0, [pc, #308]	; (8001090 <num_key_scan+0x2c8>)
 8000f5a:	f001 fac3 	bl	80024e4 <HAL_GPIO_ReadPin>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d10d      	bne.n	8000f80 <num_key_scan+0x1b8>
	{
		HAL_Delay(10);//eliminate buffering of keyboard
 8000f64:	200a      	movs	r0, #10
 8000f66:	f001 f803 	bl	8001f70 <HAL_Delay>
		while(HAL_GPIO_ReadPin(NUM_KEY_I2_GPIO_Port, NUM_KEY_I2_Pin) == GPIO_PIN_RESET);
 8000f6a:	bf00      	nop
 8000f6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f70:	4846      	ldr	r0, [pc, #280]	; (800108c <num_key_scan+0x2c4>)
 8000f72:	f001 fab7 	bl	80024e4 <HAL_GPIO_ReadPin>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d0f7      	beq.n	8000f6c <num_key_scan+0x1a4>
		return 2;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	e082      	b.n	8001086 <num_key_scan+0x2be>
	}

	HAL_GPIO_WritePin(NUM_KEY_O1_GPIO_Port, NUM_KEY_O1_Pin, GPIO_PIN_SET);
 8000f80:	2201      	movs	r2, #1
 8000f82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f86:	4841      	ldr	r0, [pc, #260]	; (800108c <num_key_scan+0x2c4>)
 8000f88:	f001 fac4 	bl	8002514 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(NUM_KEY_O2_GPIO_Port, NUM_KEY_O2_Pin, GPIO_PIN_SET);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f92:	483e      	ldr	r0, [pc, #248]	; (800108c <num_key_scan+0x2c4>)
 8000f94:	f001 fabe 	bl	8002514 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(NUM_KEY_O3_GPIO_Port, NUM_KEY_O3_Pin, GPIO_PIN_RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f9e:	483b      	ldr	r0, [pc, #236]	; (800108c <num_key_scan+0x2c4>)
 8000fa0:	f001 fab8 	bl	8002514 <HAL_GPIO_WritePin>
	HAL_Delay(10);//eliminate the interference of parasitic capacitance
 8000fa4:	200a      	movs	r0, #10
 8000fa6:	f000 ffe3 	bl	8001f70 <HAL_Delay>
	if (HAL_GPIO_ReadPin(NUM_KEY_I1_GPIO_Port, NUM_KEY_I1_Pin) == GPIO_PIN_RESET)
 8000faa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fae:	4837      	ldr	r0, [pc, #220]	; (800108c <num_key_scan+0x2c4>)
 8000fb0:	f001 fa98 	bl	80024e4 <HAL_GPIO_ReadPin>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d10d      	bne.n	8000fd6 <num_key_scan+0x20e>
	{
		HAL_Delay(10);//eliminate buffering of keyboard
 8000fba:	200a      	movs	r0, #10
 8000fbc:	f000 ffd8 	bl	8001f70 <HAL_Delay>
		while(HAL_GPIO_ReadPin(NUM_KEY_I1_GPIO_Port, NUM_KEY_I1_Pin) == GPIO_PIN_RESET);
 8000fc0:	bf00      	nop
 8000fc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fc6:	4831      	ldr	r0, [pc, #196]	; (800108c <num_key_scan+0x2c4>)
 8000fc8:	f001 fa8c 	bl	80024e4 <HAL_GPIO_ReadPin>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d0f7      	beq.n	8000fc2 <num_key_scan+0x1fa>
		return 13;//*
 8000fd2:	230d      	movs	r3, #13
 8000fd4:	e057      	b.n	8001086 <num_key_scan+0x2be>
	}
	if (HAL_GPIO_ReadPin(NUM_KEY_I2_GPIO_Port, NUM_KEY_I2_Pin) == GPIO_PIN_RESET)
 8000fd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fda:	482c      	ldr	r0, [pc, #176]	; (800108c <num_key_scan+0x2c4>)
 8000fdc:	f001 fa82 	bl	80024e4 <HAL_GPIO_ReadPin>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d10d      	bne.n	8001002 <num_key_scan+0x23a>
	{
		HAL_Delay(10);//eliminate buffering of keyboard
 8000fe6:	200a      	movs	r0, #10
 8000fe8:	f000 ffc2 	bl	8001f70 <HAL_Delay>
		while(HAL_GPIO_ReadPin(NUM_KEY_I2_GPIO_Port, NUM_KEY_I2_Pin) == GPIO_PIN_RESET);
 8000fec:	bf00      	nop
 8000fee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ff2:	4826      	ldr	r0, [pc, #152]	; (800108c <num_key_scan+0x2c4>)
 8000ff4:	f001 fa76 	bl	80024e4 <HAL_GPIO_ReadPin>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d0f7      	beq.n	8000fee <num_key_scan+0x226>
		return 7;
 8000ffe:	2307      	movs	r3, #7
 8001000:	e041      	b.n	8001086 <num_key_scan+0x2be>
	}
	if (HAL_GPIO_ReadPin(NUM_KEY_I3_GPIO_Port, NUM_KEY_I3_Pin) == GPIO_PIN_RESET)
 8001002:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001006:	4822      	ldr	r0, [pc, #136]	; (8001090 <num_key_scan+0x2c8>)
 8001008:	f001 fa6c 	bl	80024e4 <HAL_GPIO_ReadPin>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d10d      	bne.n	800102e <num_key_scan+0x266>
	{
		HAL_Delay(10);//eliminate buffering of keyboard
 8001012:	200a      	movs	r0, #10
 8001014:	f000 ffac 	bl	8001f70 <HAL_Delay>
		while(HAL_GPIO_ReadPin(NUM_KEY_I2_GPIO_Port, NUM_KEY_I2_Pin) == GPIO_PIN_RESET);
 8001018:	bf00      	nop
 800101a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800101e:	481b      	ldr	r0, [pc, #108]	; (800108c <num_key_scan+0x2c4>)
 8001020:	f001 fa60 	bl	80024e4 <HAL_GPIO_ReadPin>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d0f7      	beq.n	800101a <num_key_scan+0x252>
		return 4;
 800102a:	2304      	movs	r3, #4
 800102c:	e02b      	b.n	8001086 <num_key_scan+0x2be>
	}
	if (HAL_GPIO_ReadPin(NUM_KEY_I4_GPIO_Port, NUM_KEY_I4_Pin) == GPIO_PIN_RESET)
 800102e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001032:	4817      	ldr	r0, [pc, #92]	; (8001090 <num_key_scan+0x2c8>)
 8001034:	f001 fa56 	bl	80024e4 <HAL_GPIO_ReadPin>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d10d      	bne.n	800105a <num_key_scan+0x292>
	{
		HAL_Delay(10);//eliminate buffering of keyboard
 800103e:	200a      	movs	r0, #10
 8001040:	f000 ff96 	bl	8001f70 <HAL_Delay>
		while(HAL_GPIO_ReadPin(NUM_KEY_I2_GPIO_Port, NUM_KEY_I2_Pin) == GPIO_PIN_RESET);
 8001044:	bf00      	nop
 8001046:	f44f 7180 	mov.w	r1, #256	; 0x100
 800104a:	4810      	ldr	r0, [pc, #64]	; (800108c <num_key_scan+0x2c4>)
 800104c:	f001 fa4a 	bl	80024e4 <HAL_GPIO_ReadPin>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d0f7      	beq.n	8001046 <num_key_scan+0x27e>
		return 1;
 8001056:	2301      	movs	r3, #1
 8001058:	e015      	b.n	8001086 <num_key_scan+0x2be>
	}

	HAL_GPIO_WritePin(NUM_KEY_O1_GPIO_Port, NUM_KEY_O1_Pin, GPIO_PIN_SET);
 800105a:	2201      	movs	r2, #1
 800105c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001060:	480a      	ldr	r0, [pc, #40]	; (800108c <num_key_scan+0x2c4>)
 8001062:	f001 fa57 	bl	8002514 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(NUM_KEY_O2_GPIO_Port, NUM_KEY_O2_Pin, GPIO_PIN_SET);
 8001066:	2201      	movs	r2, #1
 8001068:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800106c:	4807      	ldr	r0, [pc, #28]	; (800108c <num_key_scan+0x2c4>)
 800106e:	f001 fa51 	bl	8002514 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(NUM_KEY_O3_GPIO_Port, NUM_KEY_O3_Pin, GPIO_PIN_SET);
 8001072:	2201      	movs	r2, #1
 8001074:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001078:	4804      	ldr	r0, [pc, #16]	; (800108c <num_key_scan+0x2c4>)
 800107a:	f001 fa4b 	bl	8002514 <HAL_GPIO_WritePin>
	HAL_Delay(10);//eliminate the interference of parasitic capacitance of keyboard
 800107e:	200a      	movs	r0, #10
 8001080:	f000 ff76 	bl	8001f70 <HAL_Delay>

	return 15;
 8001084:	230f      	movs	r3, #15
}
 8001086:	4618      	mov	r0, r3
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40020000 	.word	0x40020000
 8001090:	40020400 	.word	0x40020400

08001094 <num_key>:

//get number keyboard input
static int num_key(int num_current)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08c      	sub	sp, #48	; 0x30
 8001098:	af02      	add	r7, sp, #8
 800109a:	6078      	str	r0, [r7, #4]
	uint8_t num_mode = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t num_key = 15;
 80010a2:	230f      	movs	r3, #15
 80010a4:	77fb      	strb	r3, [r7, #31]
	int num_input = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	623b      	str	r3, [r7, #32]

	if (num_current > 99999999)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a8b      	ldr	r2, [pc, #556]	; (80012dc <num_key+0x248>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	dd01      	ble.n	80010b6 <num_key+0x22>
		num_current = 99999999;
 80010b2:	4b8a      	ldr	r3, [pc, #552]	; (80012dc <num_key+0x248>)
 80010b4:	607b      	str	r3, [r7, #4]

	oled_area_clear(0, 16, 128, 48);
 80010b6:	2330      	movs	r3, #48	; 0x30
 80010b8:	2280      	movs	r2, #128	; 0x80
 80010ba:	2110      	movs	r1, #16
 80010bc:	2000      	movs	r0, #0
 80010be:	f000 fc1d 	bl	80018fc <oled_area_clear>

	char num_current_char[8];
	sprintf(num_current_char, "%d", num_current);
 80010c2:	f107 0314 	add.w	r3, r7, #20
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	4985      	ldr	r1, [pc, #532]	; (80012e0 <num_key+0x24c>)
 80010ca:	4618      	mov	r0, r3
 80010cc:	f002 ff7e 	bl	8003fcc <siprintf>
	oled_draw_ASCII(0, 16, "Current Value:", SET, LEFT);
 80010d0:	2300      	movs	r3, #0
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	2301      	movs	r3, #1
 80010d6:	4a83      	ldr	r2, [pc, #524]	; (80012e4 <num_key+0x250>)
 80010d8:	2110      	movs	r1, #16
 80010da:	2000      	movs	r0, #0
 80010dc:	f000 fc8c 	bl	80019f8 <oled_draw_ASCII>
	oled_draw_ASCII(120, 32, num_current_char, SET, RIGHT);
 80010e0:	f107 0214 	add.w	r2, r7, #20
 80010e4:	2301      	movs	r3, #1
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	2301      	movs	r3, #1
 80010ea:	2120      	movs	r1, #32
 80010ec:	2078      	movs	r0, #120	; 0x78
 80010ee:	f000 fc83 	bl	80019f8 <oled_draw_ASCII>
	oled_draw_ASCII(0, 48, "Reset", SET, LEFT);
 80010f2:	2300      	movs	r3, #0
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	2301      	movs	r3, #1
 80010f8:	4a7b      	ldr	r2, [pc, #492]	; (80012e8 <num_key+0x254>)
 80010fa:	2130      	movs	r1, #48	; 0x30
 80010fc:	2000      	movs	r0, #0
 80010fe:	f000 fc7b 	bl	80019f8 <oled_draw_ASCII>
	oled_draw_ASCII(120, 48, "0", SET, RIGHT);
 8001102:	2301      	movs	r3, #1
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	2301      	movs	r3, #1
 8001108:	4a78      	ldr	r2, [pc, #480]	; (80012ec <num_key+0x258>)
 800110a:	2130      	movs	r1, #48	; 0x30
 800110c:	2078      	movs	r0, #120	; 0x78
 800110e:	f000 fc73 	bl	80019f8 <oled_draw_ASCII>

	while (HAL_GPIO_ReadPin(ENTER_KEY_GPIO_Port, ENTER_KEY_Pin) == GPIO_PIN_SET){
 8001112:	e0b6      	b.n	8001282 <num_key+0x1ee>
		//check whether change the menu
		if (menu != menu_current)
 8001114:	4b76      	ldr	r3, [pc, #472]	; (80012f0 <num_key+0x25c>)
 8001116:	781a      	ldrb	r2, [r3, #0]
 8001118:	4b76      	ldr	r3, [pc, #472]	; (80012f4 <num_key+0x260>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	429a      	cmp	r2, r3
 800111e:	d001      	beq.n	8001124 <num_key+0x90>
			return num_current;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	e0d6      	b.n	80012d2 <num_key+0x23e>

		num_key = num_key_scan();
 8001124:	f7ff fe50 	bl	8000dc8 <num_key_scan>
 8001128:	4603      	mov	r3, r0
 800112a:	77fb      	strb	r3, [r7, #31]
		if (num_key == 14)//#
 800112c:	7ffb      	ldrb	r3, [r7, #31]
 800112e:	2b0e      	cmp	r3, #14
 8001130:	d10f      	bne.n	8001152 <num_key+0xbe>
		{
			num_input = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	623b      	str	r3, [r7, #32]

			oled_area_clear(40, 48, 88, 16);
 8001136:	2310      	movs	r3, #16
 8001138:	2258      	movs	r2, #88	; 0x58
 800113a:	2130      	movs	r1, #48	; 0x30
 800113c:	2028      	movs	r0, #40	; 0x28
 800113e:	f000 fbdd 	bl	80018fc <oled_area_clear>
			oled_draw_ASCII(120, 48, "0", SET, RIGHT);
 8001142:	2301      	movs	r3, #1
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	2301      	movs	r3, #1
 8001148:	4a68      	ldr	r2, [pc, #416]	; (80012ec <num_key+0x258>)
 800114a:	2130      	movs	r1, #48	; 0x30
 800114c:	2078      	movs	r0, #120	; 0x78
 800114e:	f000 fc53 	bl	80019f8 <oled_draw_ASCII>
		}
		if (num_key == 13)//*
 8001152:	7ffb      	ldrb	r3, [r7, #31]
 8001154:	2b0d      	cmp	r3, #13
 8001156:	d15a      	bne.n	800120e <num_key+0x17a>
		{
			if (num_mode == 0)
 8001158:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800115c:	2b00      	cmp	r3, #0
 800115e:	d11b      	bne.n	8001198 <num_key+0x104>
			{
				num_input = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	623b      	str	r3, [r7, #32]
				num_mode = 1;
 8001164:	2301      	movs	r3, #1
 8001166:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

				oled_area_clear(0, 48, 128, 16);
 800116a:	2310      	movs	r3, #16
 800116c:	2280      	movs	r2, #128	; 0x80
 800116e:	2130      	movs	r1, #48	; 0x30
 8001170:	2000      	movs	r0, #0
 8001172:	f000 fbc3 	bl	80018fc <oled_area_clear>
				oled_draw_ASCII(0, 48, "+", SET, LEFT);
 8001176:	2300      	movs	r3, #0
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	2301      	movs	r3, #1
 800117c:	4a5e      	ldr	r2, [pc, #376]	; (80012f8 <num_key+0x264>)
 800117e:	2130      	movs	r1, #48	; 0x30
 8001180:	2000      	movs	r0, #0
 8001182:	f000 fc39 	bl	80019f8 <oled_draw_ASCII>
				oled_draw_ASCII(120, 48, "0", SET, RIGHT);
 8001186:	2301      	movs	r3, #1
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2301      	movs	r3, #1
 800118c:	4a57      	ldr	r2, [pc, #348]	; (80012ec <num_key+0x258>)
 800118e:	2130      	movs	r1, #48	; 0x30
 8001190:	2078      	movs	r0, #120	; 0x78
 8001192:	f000 fc31 	bl	80019f8 <oled_draw_ASCII>
 8001196:	e03a      	b.n	800120e <num_key+0x17a>
			}
			else if (num_mode == 1)
 8001198:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800119c:	2b01      	cmp	r3, #1
 800119e:	d11b      	bne.n	80011d8 <num_key+0x144>
			{
				num_input = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	623b      	str	r3, [r7, #32]
				num_mode = 2;
 80011a4:	2302      	movs	r3, #2
 80011a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

				oled_area_clear(0, 48, 128, 16);
 80011aa:	2310      	movs	r3, #16
 80011ac:	2280      	movs	r2, #128	; 0x80
 80011ae:	2130      	movs	r1, #48	; 0x30
 80011b0:	2000      	movs	r0, #0
 80011b2:	f000 fba3 	bl	80018fc <oled_area_clear>
				oled_draw_ASCII(0, 48, "-", SET, LEFT);
 80011b6:	2300      	movs	r3, #0
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	2301      	movs	r3, #1
 80011bc:	4a4f      	ldr	r2, [pc, #316]	; (80012fc <num_key+0x268>)
 80011be:	2130      	movs	r1, #48	; 0x30
 80011c0:	2000      	movs	r0, #0
 80011c2:	f000 fc19 	bl	80019f8 <oled_draw_ASCII>
				oled_draw_ASCII(120, 48, "0", SET, RIGHT);
 80011c6:	2301      	movs	r3, #1
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	2301      	movs	r3, #1
 80011cc:	4a47      	ldr	r2, [pc, #284]	; (80012ec <num_key+0x258>)
 80011ce:	2130      	movs	r1, #48	; 0x30
 80011d0:	2078      	movs	r0, #120	; 0x78
 80011d2:	f000 fc11 	bl	80019f8 <oled_draw_ASCII>
 80011d6:	e01a      	b.n	800120e <num_key+0x17a>
			}
			else
			{
				num_input = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	623b      	str	r3, [r7, #32]
				num_mode = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

				oled_area_clear(0, 48, 128, 16);
 80011e2:	2310      	movs	r3, #16
 80011e4:	2280      	movs	r2, #128	; 0x80
 80011e6:	2130      	movs	r1, #48	; 0x30
 80011e8:	2000      	movs	r0, #0
 80011ea:	f000 fb87 	bl	80018fc <oled_area_clear>
				oled_draw_ASCII(0, 48, "Reset", SET, LEFT);
 80011ee:	2300      	movs	r3, #0
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	2301      	movs	r3, #1
 80011f4:	4a3c      	ldr	r2, [pc, #240]	; (80012e8 <num_key+0x254>)
 80011f6:	2130      	movs	r1, #48	; 0x30
 80011f8:	2000      	movs	r0, #0
 80011fa:	f000 fbfd 	bl	80019f8 <oled_draw_ASCII>
				oled_draw_ASCII(120, 48, "0", SET, RIGHT);
 80011fe:	2301      	movs	r3, #1
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	2301      	movs	r3, #1
 8001204:	4a39      	ldr	r2, [pc, #228]	; (80012ec <num_key+0x258>)
 8001206:	2130      	movs	r1, #48	; 0x30
 8001208:	2078      	movs	r0, #120	; 0x78
 800120a:	f000 fbf5 	bl	80019f8 <oled_draw_ASCII>
			}
		}
		if (num_key < 10)
 800120e:	7ffb      	ldrb	r3, [r7, #31]
 8001210:	2b09      	cmp	r3, #9
 8001212:	d833      	bhi.n	800127c <num_key+0x1e8>
		{
			num_input = 10*num_input + num_key;
 8001214:	6a3a      	ldr	r2, [r7, #32]
 8001216:	4613      	mov	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	461a      	mov	r2, r3
 8001220:	7ffb      	ldrb	r3, [r7, #31]
 8001222:	4413      	add	r3, r2
 8001224:	623b      	str	r3, [r7, #32]

			if (num_input >= 99999999)
 8001226:	6a3b      	ldr	r3, [r7, #32]
 8001228:	4a35      	ldr	r2, [pc, #212]	; (8001300 <num_key+0x26c>)
 800122a:	4293      	cmp	r3, r2
 800122c:	dd10      	ble.n	8001250 <num_key+0x1bc>
			{
				num_input = 99999999;
 800122e:	4b2b      	ldr	r3, [pc, #172]	; (80012dc <num_key+0x248>)
 8001230:	623b      	str	r3, [r7, #32]

				oled_draw_ASCII(40, 48, "Max", SET, LEFT);
 8001232:	2300      	movs	r3, #0
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	2301      	movs	r3, #1
 8001238:	4a32      	ldr	r2, [pc, #200]	; (8001304 <num_key+0x270>)
 800123a:	2130      	movs	r1, #48	; 0x30
 800123c:	2028      	movs	r0, #40	; 0x28
 800123e:	f000 fbdb 	bl	80019f8 <oled_draw_ASCII>
				oled_area_clear(64, 48, 64, 16);
 8001242:	2310      	movs	r3, #16
 8001244:	2240      	movs	r2, #64	; 0x40
 8001246:	2130      	movs	r1, #48	; 0x30
 8001248:	2040      	movs	r0, #64	; 0x40
 800124a:	f000 fb57 	bl	80018fc <oled_area_clear>
 800124e:	e005      	b.n	800125c <num_key+0x1c8>
			}
			else
				oled_area_clear(40, 48, 88, 16);
 8001250:	2310      	movs	r3, #16
 8001252:	2258      	movs	r2, #88	; 0x58
 8001254:	2130      	movs	r1, #48	; 0x30
 8001256:	2028      	movs	r0, #40	; 0x28
 8001258:	f000 fb50 	bl	80018fc <oled_area_clear>

			char num_input_char[8];
			sprintf(num_input_char, "%d", num_input);
 800125c:	f107 030c 	add.w	r3, r7, #12
 8001260:	6a3a      	ldr	r2, [r7, #32]
 8001262:	491f      	ldr	r1, [pc, #124]	; (80012e0 <num_key+0x24c>)
 8001264:	4618      	mov	r0, r3
 8001266:	f002 feb1 	bl	8003fcc <siprintf>
			oled_draw_ASCII(120, 48, num_input_char, SET, RIGHT);
 800126a:	f107 020c 	add.w	r2, r7, #12
 800126e:	2301      	movs	r3, #1
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	2301      	movs	r3, #1
 8001274:	2130      	movs	r1, #48	; 0x30
 8001276:	2078      	movs	r0, #120	; 0x78
 8001278:	f000 fbbe 	bl	80019f8 <oled_draw_ASCII>
		}
		HAL_Delay(100);
 800127c:	2064      	movs	r0, #100	; 0x64
 800127e:	f000 fe77 	bl	8001f70 <HAL_Delay>
	while (HAL_GPIO_ReadPin(ENTER_KEY_GPIO_Port, ENTER_KEY_Pin) == GPIO_PIN_SET){
 8001282:	2108      	movs	r1, #8
 8001284:	4820      	ldr	r0, [pc, #128]	; (8001308 <num_key+0x274>)
 8001286:	f001 f92d 	bl	80024e4 <HAL_GPIO_ReadPin>
 800128a:	4603      	mov	r3, r0
 800128c:	2b01      	cmp	r3, #1
 800128e:	f43f af41 	beq.w	8001114 <num_key+0x80>
	}

	if (num_mode == 1)
 8001292:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001296:	2b01      	cmp	r3, #1
 8001298:	d10b      	bne.n	80012b2 <num_key+0x21e>
	{
		if (num_current+num_input > 99999999)
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	6a3b      	ldr	r3, [r7, #32]
 800129e:	4413      	add	r3, r2
 80012a0:	4a0e      	ldr	r2, [pc, #56]	; (80012dc <num_key+0x248>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	dd01      	ble.n	80012aa <num_key+0x216>
			return 99999999;
 80012a6:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <num_key+0x248>)
 80012a8:	e013      	b.n	80012d2 <num_key+0x23e>
		else
			return num_current+num_input;
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	6a3b      	ldr	r3, [r7, #32]
 80012ae:	4413      	add	r3, r2
 80012b0:	e00f      	b.n	80012d2 <num_key+0x23e>
	}
	else if (num_mode == 2)
 80012b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d10a      	bne.n	80012d0 <num_key+0x23c>
	{
		if (num_current-num_input < 0)
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	6a3b      	ldr	r3, [r7, #32]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	da01      	bge.n	80012c8 <num_key+0x234>
			return 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	e004      	b.n	80012d2 <num_key+0x23e>
		else
			return num_current-num_input;
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	6a3b      	ldr	r3, [r7, #32]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	e000      	b.n	80012d2 <num_key+0x23e>
	}
	else
		return num_input;
 80012d0:	6a3b      	ldr	r3, [r7, #32]
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3728      	adds	r7, #40	; 0x28
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	05f5e0ff 	.word	0x05f5e0ff
 80012e0:	080049d8 	.word	0x080049d8
 80012e4:	080049dc 	.word	0x080049dc
 80012e8:	080049ec 	.word	0x080049ec
 80012ec:	080049f4 	.word	0x080049f4
 80012f0:	200000d8 	.word	0x200000d8
 80012f4:	200000f4 	.word	0x200000f4
 80012f8:	080049f8 	.word	0x080049f8
 80012fc:	080049fc 	.word	0x080049fc
 8001300:	05f5e0fe 	.word	0x05f5e0fe
 8001304:	08004a00 	.word	0x08004a00
 8001308:	40020400 	.word	0x40020400

0800130c <set_flow_num>:

//set current flow number
static void set_flow_num(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af02      	add	r7, sp, #8
	menu_current = menu;
 8001312:	4b20      	ldr	r3, [pc, #128]	; (8001394 <set_flow_num+0x88>)
 8001314:	781a      	ldrb	r2, [r3, #0]
 8001316:	4b20      	ldr	r3, [pc, #128]	; (8001398 <set_flow_num+0x8c>)
 8001318:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800131a:	2201      	movs	r2, #1
 800131c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001320:	481e      	ldr	r0, [pc, #120]	; (800139c <set_flow_num+0x90>)
 8001322:	f001 f8f7 	bl	8002514 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8001326:	2201      	movs	r2, #1
 8001328:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800132c:	481b      	ldr	r0, [pc, #108]	; (800139c <set_flow_num+0x90>)
 800132e:	f001 f8f1 	bl	8002514 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ALARM_GPIO_Port, ALARM_Pin, GPIO_PIN_RESET);
 8001332:	2200      	movs	r2, #0
 8001334:	2104      	movs	r1, #4
 8001336:	4819      	ldr	r0, [pc, #100]	; (800139c <set_flow_num+0x90>)
 8001338:	f001 f8ec 	bl	8002514 <HAL_GPIO_WritePin>
	oled_clear();
 800133c:	f000 fb50 	bl	80019e0 <oled_clear>
	oled_draw_ASCII(0, 0, "Set Flow Number", SET, LEFT);
 8001340:	2300      	movs	r3, #0
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	2301      	movs	r3, #1
 8001346:	4a16      	ldr	r2, [pc, #88]	; (80013a0 <set_flow_num+0x94>)
 8001348:	2100      	movs	r1, #0
 800134a:	2000      	movs	r0, #0
 800134c:	f000 fb54 	bl	80019f8 <oled_draw_ASCII>
	flow_num = num_key(flow_num);
 8001350:	4b14      	ldr	r3, [pc, #80]	; (80013a4 <set_flow_num+0x98>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff fe9d 	bl	8001094 <num_key>
 800135a:	4603      	mov	r3, r0
 800135c:	4a11      	ldr	r2, [pc, #68]	; (80013a4 <set_flow_num+0x98>)
 800135e:	6013      	str	r3, [r2, #0]
	oled_clear();
 8001360:	f000 fb3e 	bl	80019e0 <oled_clear>
	if (menu_current == menu)
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <set_flow_num+0x8c>)
 8001366:	781a      	ldrb	r2, [r3, #0]
 8001368:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <set_flow_num+0x88>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	429a      	cmp	r2, r3
 800136e:	d10b      	bne.n	8001388 <set_flow_num+0x7c>
	{
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001370:	2200      	movs	r2, #0
 8001372:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001376:	4809      	ldr	r0, [pc, #36]	; (800139c <set_flow_num+0x90>)
 8001378:	f001 f8cc 	bl	8002514 <HAL_GPIO_WritePin>
		menu = 0;
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <set_flow_num+0x88>)
 800137e:	2200      	movs	r2, #0
 8001380:	701a      	strb	r2, [r3, #0]
		main_show();
 8001382:	f7ff fc29 	bl	8000bd8 <main_show>
	}
	else
		check_menu();
}
 8001386:	e001      	b.n	800138c <set_flow_num+0x80>
		check_menu();
 8001388:	f000 f8aa 	bl	80014e0 <check_menu>
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	200000d8 	.word	0x200000d8
 8001398:	200000f4 	.word	0x200000f4
 800139c:	40020400 	.word	0x40020400
 80013a0:	08004a04 	.word	0x08004a04
 80013a4:	200000cc 	.word	0x200000cc

080013a8 <set_flow_limit>:

//set flow number limit
static void set_flow_limit(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af02      	add	r7, sp, #8
	menu_current = menu;
 80013ae:	4b20      	ldr	r3, [pc, #128]	; (8001430 <set_flow_limit+0x88>)
 80013b0:	781a      	ldrb	r2, [r3, #0]
 80013b2:	4b20      	ldr	r3, [pc, #128]	; (8001434 <set_flow_limit+0x8c>)
 80013b4:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80013b6:	2201      	movs	r2, #1
 80013b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013bc:	481e      	ldr	r0, [pc, #120]	; (8001438 <set_flow_limit+0x90>)
 80013be:	f001 f8a9 	bl	8002514 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80013c2:	2201      	movs	r2, #1
 80013c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013c8:	481b      	ldr	r0, [pc, #108]	; (8001438 <set_flow_limit+0x90>)
 80013ca:	f001 f8a3 	bl	8002514 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ALARM_GPIO_Port, ALARM_Pin, GPIO_PIN_RESET);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2104      	movs	r1, #4
 80013d2:	4819      	ldr	r0, [pc, #100]	; (8001438 <set_flow_limit+0x90>)
 80013d4:	f001 f89e 	bl	8002514 <HAL_GPIO_WritePin>
	oled_clear();
 80013d8:	f000 fb02 	bl	80019e0 <oled_clear>
	oled_draw_ASCII(0, 0, "Set Flow Limit", SET, LEFT);
 80013dc:	2300      	movs	r3, #0
 80013de:	9300      	str	r3, [sp, #0]
 80013e0:	2301      	movs	r3, #1
 80013e2:	4a16      	ldr	r2, [pc, #88]	; (800143c <set_flow_limit+0x94>)
 80013e4:	2100      	movs	r1, #0
 80013e6:	2000      	movs	r0, #0
 80013e8:	f000 fb06 	bl	80019f8 <oled_draw_ASCII>
	flow_limit = num_key(flow_limit);
 80013ec:	4b14      	ldr	r3, [pc, #80]	; (8001440 <set_flow_limit+0x98>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fe4f 	bl	8001094 <num_key>
 80013f6:	4603      	mov	r3, r0
 80013f8:	4a11      	ldr	r2, [pc, #68]	; (8001440 <set_flow_limit+0x98>)
 80013fa:	6013      	str	r3, [r2, #0]
	oled_clear();
 80013fc:	f000 faf0 	bl	80019e0 <oled_clear>
	if (menu_current == menu)
 8001400:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <set_flow_limit+0x8c>)
 8001402:	781a      	ldrb	r2, [r3, #0]
 8001404:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <set_flow_limit+0x88>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	429a      	cmp	r2, r3
 800140a:	d10b      	bne.n	8001424 <set_flow_limit+0x7c>
	{
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800140c:	2200      	movs	r2, #0
 800140e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001412:	4809      	ldr	r0, [pc, #36]	; (8001438 <set_flow_limit+0x90>)
 8001414:	f001 f87e 	bl	8002514 <HAL_GPIO_WritePin>
		menu = 0;
 8001418:	4b05      	ldr	r3, [pc, #20]	; (8001430 <set_flow_limit+0x88>)
 800141a:	2200      	movs	r2, #0
 800141c:	701a      	strb	r2, [r3, #0]
		main_show();
 800141e:	f7ff fbdb 	bl	8000bd8 <main_show>
	}
	else
		check_menu();
}
 8001422:	e001      	b.n	8001428 <set_flow_limit+0x80>
		check_menu();
 8001424:	f000 f85c 	bl	80014e0 <check_menu>
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	200000d8 	.word	0x200000d8
 8001434:	200000f4 	.word	0x200000f4
 8001438:	40020400 	.word	0x40020400
 800143c:	08004a14 	.word	0x08004a14
 8001440:	200000d0 	.word	0x200000d0

08001444 <set_time_limit>:

//set stay time limit
static void set_time_limit(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af02      	add	r7, sp, #8
	menu_current = menu;
 800144a:	4b20      	ldr	r3, [pc, #128]	; (80014cc <set_time_limit+0x88>)
 800144c:	781a      	ldrb	r2, [r3, #0]
 800144e:	4b20      	ldr	r3, [pc, #128]	; (80014d0 <set_time_limit+0x8c>)
 8001450:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8001452:	2201      	movs	r2, #1
 8001454:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001458:	481e      	ldr	r0, [pc, #120]	; (80014d4 <set_time_limit+0x90>)
 800145a:	f001 f85b 	bl	8002514 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800145e:	2201      	movs	r2, #1
 8001460:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001464:	481b      	ldr	r0, [pc, #108]	; (80014d4 <set_time_limit+0x90>)
 8001466:	f001 f855 	bl	8002514 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ALARM_GPIO_Port, ALARM_Pin, GPIO_PIN_RESET);
 800146a:	2200      	movs	r2, #0
 800146c:	2104      	movs	r1, #4
 800146e:	4819      	ldr	r0, [pc, #100]	; (80014d4 <set_time_limit+0x90>)
 8001470:	f001 f850 	bl	8002514 <HAL_GPIO_WritePin>
	oled_clear();
 8001474:	f000 fab4 	bl	80019e0 <oled_clear>
	oled_draw_ASCII(0, 0, "Set Time Limit", SET, LEFT);
 8001478:	2300      	movs	r3, #0
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	2301      	movs	r3, #1
 800147e:	4a16      	ldr	r2, [pc, #88]	; (80014d8 <set_time_limit+0x94>)
 8001480:	2100      	movs	r1, #0
 8001482:	2000      	movs	r0, #0
 8001484:	f000 fab8 	bl	80019f8 <oled_draw_ASCII>
	time_limit = num_key(time_limit);
 8001488:	4b14      	ldr	r3, [pc, #80]	; (80014dc <set_time_limit+0x98>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fe01 	bl	8001094 <num_key>
 8001492:	4603      	mov	r3, r0
 8001494:	4a11      	ldr	r2, [pc, #68]	; (80014dc <set_time_limit+0x98>)
 8001496:	6013      	str	r3, [r2, #0]
	oled_clear();
 8001498:	f000 faa2 	bl	80019e0 <oled_clear>
	if (menu_current == menu)
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <set_time_limit+0x8c>)
 800149e:	781a      	ldrb	r2, [r3, #0]
 80014a0:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <set_time_limit+0x88>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d10b      	bne.n	80014c0 <set_time_limit+0x7c>
	{
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80014a8:	2200      	movs	r2, #0
 80014aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014ae:	4809      	ldr	r0, [pc, #36]	; (80014d4 <set_time_limit+0x90>)
 80014b0:	f001 f830 	bl	8002514 <HAL_GPIO_WritePin>
		menu = 0;
 80014b4:	4b05      	ldr	r3, [pc, #20]	; (80014cc <set_time_limit+0x88>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	701a      	strb	r2, [r3, #0]
		main_show();
 80014ba:	f7ff fb8d 	bl	8000bd8 <main_show>
	}
	else
		check_menu();
}
 80014be:	e001      	b.n	80014c4 <set_time_limit+0x80>
		check_menu();
 80014c0:	f000 f80e 	bl	80014e0 <check_menu>
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	200000d8 	.word	0x200000d8
 80014d0:	200000f4 	.word	0x200000f4
 80014d4:	40020400 	.word	0x40020400
 80014d8:	08004a24 	.word	0x08004a24
 80014dc:	200000d4 	.word	0x200000d4

080014e0 <check_menu>:

//check whether select menu
void check_menu(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
	if (menu == 1)
 80014e4:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <check_menu+0x30>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d102      	bne.n	80014f2 <check_menu+0x12>
		set_flow_num();
 80014ec:	f7ff ff0e 	bl	800130c <set_flow_num>
	else if (menu == 2)
		set_flow_limit();
	else if (menu == 3)
		set_time_limit();
}
 80014f0:	e00c      	b.n	800150c <check_menu+0x2c>
	else if (menu == 2)
 80014f2:	4b07      	ldr	r3, [pc, #28]	; (8001510 <check_menu+0x30>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d102      	bne.n	8001500 <check_menu+0x20>
		set_flow_limit();
 80014fa:	f7ff ff55 	bl	80013a8 <set_flow_limit>
}
 80014fe:	e005      	b.n	800150c <check_menu+0x2c>
	else if (menu == 3)
 8001500:	4b03      	ldr	r3, [pc, #12]	; (8001510 <check_menu+0x30>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b03      	cmp	r3, #3
 8001506:	d101      	bne.n	800150c <check_menu+0x2c>
		set_time_limit();
 8001508:	f7ff ff9c 	bl	8001444 <set_time_limit>
}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}
 8001510:	200000d8 	.word	0x200000d8

08001514 <send_cmd>:
const uint16_t display_height = 64;
static uint8_t OLED_RAM[64/8][128];

//send command
static void send_cmd(uint8_t cmd)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af04      	add	r7, sp, #16
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, 0x78, 0x00, I2C_MEMADD_SIZE_8BIT, &cmd, 1, 0x100);
 800151e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001522:	9302      	str	r3, [sp, #8]
 8001524:	2301      	movs	r3, #1
 8001526:	9301      	str	r3, [sp, #4]
 8001528:	1dfb      	adds	r3, r7, #7
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	2301      	movs	r3, #1
 800152e:	2200      	movs	r2, #0
 8001530:	2178      	movs	r1, #120	; 0x78
 8001532:	4803      	ldr	r0, [pc, #12]	; (8001540 <send_cmd+0x2c>)
 8001534:	f001 f970 	bl	8002818 <HAL_I2C_Mem_Write>
}
 8001538:	bf00      	nop
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000078 	.word	0x20000078

08001544 <send_data>:

//send data
static void send_data(uint8_t data)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af04      	add	r7, sp, #16
 800154a:	4603      	mov	r3, r0
 800154c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, 0x78, 0x40, I2C_MEMADD_SIZE_8BIT, &data, 1, 0x100);
 800154e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001552:	9302      	str	r3, [sp, #8]
 8001554:	2301      	movs	r3, #1
 8001556:	9301      	str	r3, [sp, #4]
 8001558:	1dfb      	adds	r3, r7, #7
 800155a:	9300      	str	r3, [sp, #0]
 800155c:	2301      	movs	r3, #1
 800155e:	2240      	movs	r2, #64	; 0x40
 8001560:	2178      	movs	r1, #120	; 0x78
 8001562:	4803      	ldr	r0, [pc, #12]	; (8001570 <send_data+0x2c>)
 8001564:	f001 f958 	bl	8002818 <HAL_I2C_Mem_Write>
}
 8001568:	bf00      	nop
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000078 	.word	0x20000078

08001574 <send_RAM>:

//send RAM
static void send_RAM(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
	for(uint16_t i = 0; i < display_height/8; i++)
 800157a:	2300      	movs	r3, #0
 800157c:	80fb      	strh	r3, [r7, #6]
 800157e:	e023      	b.n	80015c8 <send_RAM+0x54>
	{
		send_cmd(0xB0+i);	//设置页地址b0~b7
 8001580:	88fb      	ldrh	r3, [r7, #6]
 8001582:	b2db      	uxtb	r3, r3
 8001584:	3b50      	subs	r3, #80	; 0x50
 8001586:	b2db      	uxtb	r3, r3
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff ffc3 	bl	8001514 <send_cmd>
		send_cmd(0x00);		//设置显示位置—列低地址00-0f
 800158e:	2000      	movs	r0, #0
 8001590:	f7ff ffc0 	bl	8001514 <send_cmd>
		send_cmd(0x10);		//设置显示位置—列高地址10-1f
 8001594:	2010      	movs	r0, #16
 8001596:	f7ff ffbd 	bl	8001514 <send_cmd>
		for(uint16_t j = 0; j < display_width; j++)
 800159a:	2300      	movs	r3, #0
 800159c:	80bb      	strh	r3, [r7, #4]
 800159e:	e00c      	b.n	80015ba <send_RAM+0x46>
		{
				send_data(OLED_RAM[i][j]);
 80015a0:	88fa      	ldrh	r2, [r7, #6]
 80015a2:	88bb      	ldrh	r3, [r7, #4]
 80015a4:	490e      	ldr	r1, [pc, #56]	; (80015e0 <send_RAM+0x6c>)
 80015a6:	01d2      	lsls	r2, r2, #7
 80015a8:	440a      	add	r2, r1
 80015aa:	4413      	add	r3, r2
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff ffc8 	bl	8001544 <send_data>
		for(uint16_t j = 0; j < display_width; j++)
 80015b4:	88bb      	ldrh	r3, [r7, #4]
 80015b6:	3301      	adds	r3, #1
 80015b8:	80bb      	strh	r3, [r7, #4]
 80015ba:	2280      	movs	r2, #128	; 0x80
 80015bc:	88bb      	ldrh	r3, [r7, #4]
 80015be:	4293      	cmp	r3, r2
 80015c0:	d3ee      	bcc.n	80015a0 <send_RAM+0x2c>
	for(uint16_t i = 0; i < display_height/8; i++)
 80015c2:	88fb      	ldrh	r3, [r7, #6]
 80015c4:	3301      	adds	r3, #1
 80015c6:	80fb      	strh	r3, [r7, #6]
 80015c8:	2340      	movs	r3, #64	; 0x40
 80015ca:	08db      	lsrs	r3, r3, #3
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	88fa      	ldrh	r2, [r7, #6]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d3d5      	bcc.n	8001580 <send_RAM+0xc>
		}
	}
}
 80015d4:	bf00      	nop
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	200000f8 	.word	0x200000f8

080015e4 <reverse>:

//invert string
static void reverse(char arr[])
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	int left = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]
	int right = strlen(arr)-1;
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7fe fdf5 	bl	80001e0 <strlen>
 80015f6:	4603      	mov	r3, r0
 80015f8:	3b01      	subs	r3, #1
 80015fa:	613b      	str	r3, [r7, #16]
	while (left < right)
 80015fc:	e017      	b.n	800162e <reverse+0x4a>
	{
		char temp = arr[left];
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	4413      	add	r3, r2
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	73fb      	strb	r3, [r7, #15]
		arr[left] = arr[right];
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	441a      	add	r2, r3
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	6879      	ldr	r1, [r7, #4]
 8001612:	440b      	add	r3, r1
 8001614:	7812      	ldrb	r2, [r2, #0]
 8001616:	701a      	strb	r2, [r3, #0]
		arr[right] = temp;
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	4413      	add	r3, r2
 800161e:	7bfa      	ldrb	r2, [r7, #15]
 8001620:	701a      	strb	r2, [r3, #0]
		left++;
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	3301      	adds	r3, #1
 8001626:	617b      	str	r3, [r7, #20]
		right--;
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	3b01      	subs	r3, #1
 800162c:	613b      	str	r3, [r7, #16]
	while (left < right)
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	429a      	cmp	r2, r3
 8001634:	dbe3      	blt.n	80015fe <reverse+0x1a>
	}

}
 8001636:	bf00      	nop
 8001638:	bf00      	nop
 800163a:	3718      	adds	r7, #24
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <oled_init>:

//initialize OLED
void oled_init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8001644:	2064      	movs	r0, #100	; 0x64
 8001646:	f000 fc93 	bl	8001f70 <HAL_Delay>

	send_cmd(0xAE); //关闭显示
 800164a:	20ae      	movs	r0, #174	; 0xae
 800164c:	f7ff ff62 	bl	8001514 <send_cmd>
	send_cmd(0x20);	//设置内存寻址模式
 8001650:	2020      	movs	r0, #32
 8001652:	f7ff ff5f 	bl	8001514 <send_cmd>
	send_cmd(0x10);	//页面寻址模式
 8001656:	2010      	movs	r0, #16
 8001658:	f7ff ff5c 	bl	8001514 <send_cmd>
	send_cmd(0xB0);	//页面开始地址
 800165c:	20b0      	movs	r0, #176	; 0xb0
 800165e:	f7ff ff59 	bl	8001514 <send_cmd>
	send_cmd(0x00); //低列地址
 8001662:	2000      	movs	r0, #0
 8001664:	f7ff ff56 	bl	8001514 <send_cmd>
	send_cmd(0x10); //高列地址
 8001668:	2010      	movs	r0, #16
 800166a:	f7ff ff53 	bl	8001514 <send_cmd>
	send_cmd(0xC8);	//设置COM输出扫描方向
 800166e:	20c8      	movs	r0, #200	; 0xc8
 8001670:	f7ff ff50 	bl	8001514 <send_cmd>
	send_cmd(0x40); //设置起始行地址
 8001674:	2040      	movs	r0, #64	; 0x40
 8001676:	f7ff ff4d 	bl	8001514 <send_cmd>
	send_cmd(0x81); //设置对比度
 800167a:	2081      	movs	r0, #129	; 0x81
 800167c:	f7ff ff4a 	bl	8001514 <send_cmd>
	send_cmd(0xFF);
 8001680:	20ff      	movs	r0, #255	; 0xff
 8001682:	f7ff ff47 	bl	8001514 <send_cmd>
	send_cmd(0xA1); //设置段重映射
 8001686:	20a1      	movs	r0, #161	; 0xa1
 8001688:	f7ff ff44 	bl	8001514 <send_cmd>
	send_cmd(0xA6); //设置正常显示
 800168c:	20a6      	movs	r0, #166	; 0xa6
 800168e:	f7ff ff41 	bl	8001514 <send_cmd>
	send_cmd(0xA8); //设置复用比
 8001692:	20a8      	movs	r0, #168	; 0xa8
 8001694:	f7ff ff3e 	bl	8001514 <send_cmd>
	send_cmd(0x3F);
 8001698:	203f      	movs	r0, #63	; 0x3f
 800169a:	f7ff ff3b 	bl	8001514 <send_cmd>
	send_cmd(0xA4); //恢复内存内容显示
 800169e:	20a4      	movs	r0, #164	; 0xa4
 80016a0:	f7ff ff38 	bl	8001514 <send_cmd>
	send_cmd(0xD3); //设置显示补偿
 80016a4:	20d3      	movs	r0, #211	; 0xd3
 80016a6:	f7ff ff35 	bl	8001514 <send_cmd>
	send_cmd(0x00);
 80016aa:	2000      	movs	r0, #0
 80016ac:	f7ff ff32 	bl	8001514 <send_cmd>
	send_cmd(0xD5); //设置显示时钟分比率/振荡器频率
 80016b0:	20d5      	movs	r0, #213	; 0xd5
 80016b2:	f7ff ff2f 	bl	8001514 <send_cmd>
	send_cmd(0xF0);
 80016b6:	20f0      	movs	r0, #240	; 0xf0
 80016b8:	f7ff ff2c 	bl	8001514 <send_cmd>
	send_cmd(0xD9); //设置预充电间隔
 80016bc:	20d9      	movs	r0, #217	; 0xd9
 80016be:	f7ff ff29 	bl	8001514 <send_cmd>
	send_cmd(0x22);
 80016c2:	2022      	movs	r0, #34	; 0x22
 80016c4:	f7ff ff26 	bl	8001514 <send_cmd>
	send_cmd(0xDA); //设置COM引脚硬件配置
 80016c8:	20da      	movs	r0, #218	; 0xda
 80016ca:	f7ff ff23 	bl	8001514 <send_cmd>
	send_cmd(0x12);
 80016ce:	2012      	movs	r0, #18
 80016d0:	f7ff ff20 	bl	8001514 <send_cmd>
	send_cmd(0xDB); //设置VCOMH电压
 80016d4:	20db      	movs	r0, #219	; 0xdb
 80016d6:	f7ff ff1d 	bl	8001514 <send_cmd>
	send_cmd(0x20);
 80016da:	2020      	movs	r0, #32
 80016dc:	f7ff ff1a 	bl	8001514 <send_cmd>
	send_cmd(0x8D); //设置电荷泵
 80016e0:	208d      	movs	r0, #141	; 0x8d
 80016e2:	f7ff ff17 	bl	8001514 <send_cmd>
	send_cmd(0x14); //开启电荷泵
 80016e6:	2014      	movs	r0, #20
 80016e8:	f7ff ff14 	bl	8001514 <send_cmd>
	send_cmd(0xAF); //打开显示
 80016ec:	20af      	movs	r0, #175	; 0xaf
 80016ee:	f7ff ff11 	bl	8001514 <send_cmd>

	oled_clear();
 80016f2:	f000 f975 	bl	80019e0 <oled_clear>
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
	...

080016fc <oled_set_pixel>:
}


//enable pixel
void oled_set_pixel(int16_t x, int16_t y)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	460a      	mov	r2, r1
 8001706:	80fb      	strh	r3, [r7, #6]
 8001708:	4613      	mov	r3, r2
 800170a:	80bb      	strh	r3, [r7, #4]
	if (x >= 0 && x < display_width && y >= 0 && y < display_height)
 800170c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001710:	2b00      	cmp	r3, #0
 8001712:	db37      	blt.n	8001784 <oled_set_pixel+0x88>
 8001714:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001718:	2280      	movs	r2, #128	; 0x80
 800171a:	4293      	cmp	r3, r2
 800171c:	da32      	bge.n	8001784 <oled_set_pixel+0x88>
 800171e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	db2e      	blt.n	8001784 <oled_set_pixel+0x88>
 8001726:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800172a:	2240      	movs	r2, #64	; 0x40
 800172c:	4293      	cmp	r3, r2
 800172e:	da29      	bge.n	8001784 <oled_set_pixel+0x88>
	{
		OLED_RAM[y/8][x] |= (0x01 << (y%8));
 8001730:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	da00      	bge.n	800173a <oled_set_pixel+0x3e>
 8001738:	3307      	adds	r3, #7
 800173a:	10db      	asrs	r3, r3, #3
 800173c:	b218      	sxth	r0, r3
 800173e:	4602      	mov	r2, r0
 8001740:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001744:	4912      	ldr	r1, [pc, #72]	; (8001790 <oled_set_pixel+0x94>)
 8001746:	01d2      	lsls	r2, r2, #7
 8001748:	440a      	add	r2, r1
 800174a:	4413      	add	r3, r2
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	b25a      	sxtb	r2, r3
 8001750:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001754:	4259      	negs	r1, r3
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	f001 0107 	and.w	r1, r1, #7
 800175e:	bf58      	it	pl
 8001760:	424b      	negpl	r3, r1
 8001762:	b21b      	sxth	r3, r3
 8001764:	4619      	mov	r1, r3
 8001766:	2301      	movs	r3, #1
 8001768:	408b      	lsls	r3, r1
 800176a:	b25b      	sxtb	r3, r3
 800176c:	4313      	orrs	r3, r2
 800176e:	b259      	sxtb	r1, r3
 8001770:	4602      	mov	r2, r0
 8001772:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001776:	b2c8      	uxtb	r0, r1
 8001778:	4905      	ldr	r1, [pc, #20]	; (8001790 <oled_set_pixel+0x94>)
 800177a:	01d2      	lsls	r2, r2, #7
 800177c:	440a      	add	r2, r1
 800177e:	4413      	add	r3, r2
 8001780:	4602      	mov	r2, r0
 8001782:	701a      	strb	r2, [r3, #0]
	}
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	200000f8 	.word	0x200000f8

08001794 <oled_reset_pixel>:

//disable pixel
void oled_reset_pixel(int16_t x, int16_t y)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	460a      	mov	r2, r1
 800179e:	80fb      	strh	r3, [r7, #6]
 80017a0:	4613      	mov	r3, r2
 80017a2:	80bb      	strh	r3, [r7, #4]
	if (x >= 0 && x < display_width && y >= 0 && y < display_height)
 80017a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	db39      	blt.n	8001820 <oled_reset_pixel+0x8c>
 80017ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017b0:	2280      	movs	r2, #128	; 0x80
 80017b2:	4293      	cmp	r3, r2
 80017b4:	da34      	bge.n	8001820 <oled_reset_pixel+0x8c>
 80017b6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	db30      	blt.n	8001820 <oled_reset_pixel+0x8c>
 80017be:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017c2:	2240      	movs	r2, #64	; 0x40
 80017c4:	4293      	cmp	r3, r2
 80017c6:	da2b      	bge.n	8001820 <oled_reset_pixel+0x8c>
	{
		OLED_RAM[y/8][x] &= ~(0x01 << (y%8));
 80017c8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	da00      	bge.n	80017d2 <oled_reset_pixel+0x3e>
 80017d0:	3307      	adds	r3, #7
 80017d2:	10db      	asrs	r3, r3, #3
 80017d4:	b218      	sxth	r0, r3
 80017d6:	4602      	mov	r2, r0
 80017d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017dc:	4913      	ldr	r1, [pc, #76]	; (800182c <oled_reset_pixel+0x98>)
 80017de:	01d2      	lsls	r2, r2, #7
 80017e0:	440a      	add	r2, r1
 80017e2:	4413      	add	r3, r2
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	b25a      	sxtb	r2, r3
 80017e8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017ec:	4259      	negs	r1, r3
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	f001 0107 	and.w	r1, r1, #7
 80017f6:	bf58      	it	pl
 80017f8:	424b      	negpl	r3, r1
 80017fa:	b21b      	sxth	r3, r3
 80017fc:	4619      	mov	r1, r3
 80017fe:	2301      	movs	r3, #1
 8001800:	408b      	lsls	r3, r1
 8001802:	b25b      	sxtb	r3, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	b25b      	sxtb	r3, r3
 8001808:	4013      	ands	r3, r2
 800180a:	b259      	sxtb	r1, r3
 800180c:	4602      	mov	r2, r0
 800180e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001812:	b2c8      	uxtb	r0, r1
 8001814:	4905      	ldr	r1, [pc, #20]	; (800182c <oled_reset_pixel+0x98>)
 8001816:	01d2      	lsls	r2, r2, #7
 8001818:	440a      	add	r2, r1
 800181a:	4413      	add	r3, r2
 800181c:	4602      	mov	r2, r0
 800181e:	701a      	strb	r2, [r3, #0]
	}
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	200000f8 	.word	0x200000f8

08001830 <oled_area_fill>:

//fill area
void oled_area_fill(int16_t x0, int16_t y0, int16_t w, int16_t h)
{
 8001830:	b590      	push	{r4, r7, lr}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	4604      	mov	r4, r0
 8001838:	4608      	mov	r0, r1
 800183a:	4611      	mov	r1, r2
 800183c:	461a      	mov	r2, r3
 800183e:	4623      	mov	r3, r4
 8001840:	80fb      	strh	r3, [r7, #6]
 8001842:	4603      	mov	r3, r0
 8001844:	80bb      	strh	r3, [r7, #4]
 8001846:	460b      	mov	r3, r1
 8001848:	807b      	strh	r3, [r7, #2]
 800184a:	4613      	mov	r3, r2
 800184c:	803b      	strh	r3, [r7, #0]
	if (x0 >= 0 && x0+w <= display_width && y0 >= 0 && y0+h <= display_height)
 800184e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001852:	2b00      	cmp	r3, #0
 8001854:	db4e      	blt.n	80018f4 <oled_area_fill+0xc4>
 8001856:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800185a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800185e:	4413      	add	r3, r2
 8001860:	2280      	movs	r2, #128	; 0x80
 8001862:	4293      	cmp	r3, r2
 8001864:	dc46      	bgt.n	80018f4 <oled_area_fill+0xc4>
 8001866:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	db42      	blt.n	80018f4 <oled_area_fill+0xc4>
 800186e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001872:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001876:	4413      	add	r3, r2
 8001878:	2240      	movs	r2, #64	; 0x40
 800187a:	4293      	cmp	r3, r2
 800187c:	dc3a      	bgt.n	80018f4 <oled_area_fill+0xc4>
	{
		for(int16_t y = y0; y < y0+h; y++)
 800187e:	88bb      	ldrh	r3, [r7, #4]
 8001880:	81fb      	strh	r3, [r7, #14]
 8001882:	e02c      	b.n	80018de <oled_area_fill+0xae>
		{
			for(int16_t x = x0; x < x0+w; x++)
 8001884:	88fb      	ldrh	r3, [r7, #6]
 8001886:	81bb      	strh	r3, [r7, #12]
 8001888:	e01a      	b.n	80018c0 <oled_area_fill+0x90>
			{
				for(int16_t i = 0; i < 8; i++)
 800188a:	2300      	movs	r3, #0
 800188c:	817b      	strh	r3, [r7, #10]
 800188e:	e00d      	b.n	80018ac <oled_area_fill+0x7c>
					{
						oled_set_pixel(x, y);
 8001890:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001894:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001898:	4611      	mov	r1, r2
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff ff2e 	bl	80016fc <oled_set_pixel>
				for(int16_t i = 0; i < 8; i++)
 80018a0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	3301      	adds	r3, #1
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	817b      	strh	r3, [r7, #10]
 80018ac:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80018b0:	2b07      	cmp	r3, #7
 80018b2:	dded      	ble.n	8001890 <oled_area_fill+0x60>
			for(int16_t x = x0; x < x0+w; x++)
 80018b4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	3301      	adds	r3, #1
 80018bc:	b29b      	uxth	r3, r3
 80018be:	81bb      	strh	r3, [r7, #12]
 80018c0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80018c4:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80018c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80018cc:	440b      	add	r3, r1
 80018ce:	429a      	cmp	r2, r3
 80018d0:	dbdb      	blt.n	800188a <oled_area_fill+0x5a>
		for(int16_t y = y0; y < y0+h; y++)
 80018d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	3301      	adds	r3, #1
 80018da:	b29b      	uxth	r3, r3
 80018dc:	81fb      	strh	r3, [r7, #14]
 80018de:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80018e2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80018e6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80018ea:	440b      	add	r3, r1
 80018ec:	429a      	cmp	r2, r3
 80018ee:	dbc9      	blt.n	8001884 <oled_area_fill+0x54>
					}
			}
		}
		send_RAM();
 80018f0:	f7ff fe40 	bl	8001574 <send_RAM>
	}
}
 80018f4:	bf00      	nop
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd90      	pop	{r4, r7, pc}

080018fc <oled_area_clear>:

//clear area
void oled_area_clear(int16_t x0, int16_t y0, int16_t w, int16_t h)
{
 80018fc:	b590      	push	{r4, r7, lr}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	4604      	mov	r4, r0
 8001904:	4608      	mov	r0, r1
 8001906:	4611      	mov	r1, r2
 8001908:	461a      	mov	r2, r3
 800190a:	4623      	mov	r3, r4
 800190c:	80fb      	strh	r3, [r7, #6]
 800190e:	4603      	mov	r3, r0
 8001910:	80bb      	strh	r3, [r7, #4]
 8001912:	460b      	mov	r3, r1
 8001914:	807b      	strh	r3, [r7, #2]
 8001916:	4613      	mov	r3, r2
 8001918:	803b      	strh	r3, [r7, #0]
	if (x0 >= 0 && x0+w <= display_width && y0 >= 0 && y0+h <= display_height)
 800191a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800191e:	2b00      	cmp	r3, #0
 8001920:	db4e      	blt.n	80019c0 <oled_area_clear+0xc4>
 8001922:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001926:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800192a:	4413      	add	r3, r2
 800192c:	2280      	movs	r2, #128	; 0x80
 800192e:	4293      	cmp	r3, r2
 8001930:	dc46      	bgt.n	80019c0 <oled_area_clear+0xc4>
 8001932:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	db42      	blt.n	80019c0 <oled_area_clear+0xc4>
 800193a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800193e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001942:	4413      	add	r3, r2
 8001944:	2240      	movs	r2, #64	; 0x40
 8001946:	4293      	cmp	r3, r2
 8001948:	dc3a      	bgt.n	80019c0 <oled_area_clear+0xc4>
	{
		for(int16_t y = y0; y < y0+h; y++)
 800194a:	88bb      	ldrh	r3, [r7, #4]
 800194c:	81fb      	strh	r3, [r7, #14]
 800194e:	e02c      	b.n	80019aa <oled_area_clear+0xae>
		{
			for(int16_t x = x0; x < x0+w; x++)
 8001950:	88fb      	ldrh	r3, [r7, #6]
 8001952:	81bb      	strh	r3, [r7, #12]
 8001954:	e01a      	b.n	800198c <oled_area_clear+0x90>
			{
				for(int16_t i = 0; i < 8; i++)
 8001956:	2300      	movs	r3, #0
 8001958:	817b      	strh	r3, [r7, #10]
 800195a:	e00d      	b.n	8001978 <oled_area_clear+0x7c>
					{
						oled_reset_pixel(x, y);
 800195c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001960:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001964:	4611      	mov	r1, r2
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff ff14 	bl	8001794 <oled_reset_pixel>
				for(int16_t i = 0; i < 8; i++)
 800196c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001970:	b29b      	uxth	r3, r3
 8001972:	3301      	adds	r3, #1
 8001974:	b29b      	uxth	r3, r3
 8001976:	817b      	strh	r3, [r7, #10]
 8001978:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800197c:	2b07      	cmp	r3, #7
 800197e:	dded      	ble.n	800195c <oled_area_clear+0x60>
			for(int16_t x = x0; x < x0+w; x++)
 8001980:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001984:	b29b      	uxth	r3, r3
 8001986:	3301      	adds	r3, #1
 8001988:	b29b      	uxth	r3, r3
 800198a:	81bb      	strh	r3, [r7, #12]
 800198c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001990:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001994:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001998:	440b      	add	r3, r1
 800199a:	429a      	cmp	r2, r3
 800199c:	dbdb      	blt.n	8001956 <oled_area_clear+0x5a>
		for(int16_t y = y0; y < y0+h; y++)
 800199e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	3301      	adds	r3, #1
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	81fb      	strh	r3, [r7, #14]
 80019aa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80019ae:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80019b2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80019b6:	440b      	add	r3, r1
 80019b8:	429a      	cmp	r2, r3
 80019ba:	dbc9      	blt.n	8001950 <oled_area_clear+0x54>
					}
			}
		}
		send_RAM();
 80019bc:	f7ff fdda 	bl	8001574 <send_RAM>
	}
}
 80019c0:	bf00      	nop
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd90      	pop	{r4, r7, pc}

080019c8 <oled_fill>:

//fully fill OLED
void oled_fill(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
	oled_area_fill(0, 0, display_width, display_height);
 80019cc:	2380      	movs	r3, #128	; 0x80
 80019ce:	b21a      	sxth	r2, r3
 80019d0:	2340      	movs	r3, #64	; 0x40
 80019d2:	b21b      	sxth	r3, r3
 80019d4:	2100      	movs	r1, #0
 80019d6:	2000      	movs	r0, #0
 80019d8:	f7ff ff2a 	bl	8001830 <oled_area_fill>
}
 80019dc:	bf00      	nop
 80019de:	bd80      	pop	{r7, pc}

080019e0 <oled_clear>:

//fully clear OLED
void oled_clear(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
	oled_area_clear(0, 0, display_width, display_height);
 80019e4:	2380      	movs	r3, #128	; 0x80
 80019e6:	b21a      	sxth	r2, r3
 80019e8:	2340      	movs	r3, #64	; 0x40
 80019ea:	b21b      	sxth	r3, r3
 80019ec:	2100      	movs	r1, #0
 80019ee:	2000      	movs	r0, #0
 80019f0:	f7ff ff84 	bl	80018fc <oled_area_clear>
}
 80019f4:	bf00      	nop
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <oled_draw_ASCII>:

//draw ASCII character
void oled_draw_ASCII(int16_t x, int16_t y, char arr[], FlagStatus mode, FlushStatus flush)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60ba      	str	r2, [r7, #8]
 8001a00:	461a      	mov	r2, r3
 8001a02:	4603      	mov	r3, r0
 8001a04:	81fb      	strh	r3, [r7, #14]
 8001a06:	460b      	mov	r3, r1
 8001a08:	81bb      	strh	r3, [r7, #12]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	71fb      	strb	r3, [r7, #7]
	if (x >= 0 && x <= display_width && y >= 0 && y <= display_height) {
 8001a0e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f2c0 80b0 	blt.w	8001b78 <oled_draw_ASCII+0x180>
 8001a18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a1c:	2280      	movs	r2, #128	; 0x80
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	f300 80aa 	bgt.w	8001b78 <oled_draw_ASCII+0x180>
 8001a24:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f2c0 80a5 	blt.w	8001b78 <oled_draw_ASCII+0x180>
 8001a2e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001a32:	2240      	movs	r2, #64	; 0x40
 8001a34:	4293      	cmp	r3, r2
 8001a36:	f300 809f 	bgt.w	8001b78 <oled_draw_ASCII+0x180>
		int32_t c = 0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	613b      	str	r3, [r7, #16]
		uint8_t j = 0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	75fb      	strb	r3, [r7, #23]
		if (flush)
 8001a42:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f000 808b 	beq.w	8001b62 <oled_draw_ASCII+0x16a>
		{
			reverse(arr);
 8001a4c:	68b8      	ldr	r0, [r7, #8]
 8001a4e:	f7ff fdc9 	bl	80015e4 <reverse>
		}
		while(arr[j] != '\0')
 8001a52:	e086      	b.n	8001b62 <oled_draw_ASCII+0x16a>
		{
			c = arr[j] - 32;
 8001a54:	7dfb      	ldrb	r3, [r7, #23]
 8001a56:	68ba      	ldr	r2, [r7, #8]
 8001a58:	4413      	add	r3, r2
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	3b20      	subs	r3, #32
 8001a5e:	613b      	str	r3, [r7, #16]
			if(c < 0)	//无效字符
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f2c0 8085 	blt.w	8001b72 <oled_draw_ASCII+0x17a>
				break;
			if(128-x < 8)//不能显示完整字符，换行显示
 8001a68:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a6c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001a70:	2b07      	cmp	r3, #7
 8001a72:	dc0b      	bgt.n	8001a8c <oled_draw_ASCII+0x94>
			{
				x = 0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	81fb      	strh	r3, [r7, #14]
				y += 16;
 8001a78:	89bb      	ldrh	r3, [r7, #12]
 8001a7a:	3310      	adds	r3, #16
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	81bb      	strh	r3, [r7, #12]
				if(64 - y < 16)	//不能显示一行时不显示
 8001a80:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001a84:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001a88:	2b0f      	cmp	r3, #15
 8001a8a:	dd74      	ble.n	8001b76 <oled_draw_ASCII+0x17e>
					break;
			}
			for(uint8_t m = 0; m < 2; m++)
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	75bb      	strb	r3, [r7, #22]
 8001a90:	e054      	b.n	8001b3c <oled_draw_ASCII+0x144>
			{
				for(uint8_t n = 0; n < 8; n++)
 8001a92:	2300      	movs	r3, #0
 8001a94:	757b      	strb	r3, [r7, #21]
 8001a96:	e04b      	b.n	8001b30 <oled_draw_ASCII+0x138>
				{
					for(uint8_t i = 0; i < 8; i++)
 8001a98:	2300      	movs	r3, #0
 8001a9a:	753b      	strb	r3, [r7, #20]
 8001a9c:	e042      	b.n	8001b24 <oled_draw_ASCII+0x12c>
					{
						if((ASCII[c][n+m*8] >> i) & 0x01){
 8001a9e:	7d7a      	ldrb	r2, [r7, #21]
 8001aa0:	7dbb      	ldrb	r3, [r7, #22]
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	4413      	add	r3, r2
 8001aa6:	4937      	ldr	r1, [pc, #220]	; (8001b84 <oled_draw_ASCII+0x18c>)
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	0112      	lsls	r2, r2, #4
 8001aac:	440a      	add	r2, r1
 8001aae:	4413      	add	r3, r2
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	7d3b      	ldrb	r3, [r7, #20]
 8001ab6:	fa42 f303 	asr.w	r3, r2, r3
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d02d      	beq.n	8001b1e <oled_draw_ASCII+0x126>
							if(mode)
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d015      	beq.n	8001af4 <oled_draw_ASCII+0xfc>
							{
								oled_set_pixel(x+n, y+i+m*8);
 8001ac8:	7d7b      	ldrb	r3, [r7, #21]
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	89fb      	ldrh	r3, [r7, #14]
 8001ace:	4413      	add	r3, r2
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	b218      	sxth	r0, r3
 8001ad4:	7d3b      	ldrb	r3, [r7, #20]
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	89bb      	ldrh	r3, [r7, #12]
 8001ada:	4413      	add	r3, r2
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	7dbb      	ldrb	r3, [r7, #22]
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	4413      	add	r3, r2
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	b21b      	sxth	r3, r3
 8001aec:	4619      	mov	r1, r3
 8001aee:	f7ff fe05 	bl	80016fc <oled_set_pixel>
 8001af2:	e014      	b.n	8001b1e <oled_draw_ASCII+0x126>
							}
							else
							{
								oled_reset_pixel(x+n, y+i+m*8);
 8001af4:	7d7b      	ldrb	r3, [r7, #21]
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	89fb      	ldrh	r3, [r7, #14]
 8001afa:	4413      	add	r3, r2
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	b218      	sxth	r0, r3
 8001b00:	7d3b      	ldrb	r3, [r7, #20]
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	89bb      	ldrh	r3, [r7, #12]
 8001b06:	4413      	add	r3, r2
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	7dbb      	ldrb	r3, [r7, #22]
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	4413      	add	r3, r2
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	b21b      	sxth	r3, r3
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f7ff fe3b 	bl	8001794 <oled_reset_pixel>
					for(uint8_t i = 0; i < 8; i++)
 8001b1e:	7d3b      	ldrb	r3, [r7, #20]
 8001b20:	3301      	adds	r3, #1
 8001b22:	753b      	strb	r3, [r7, #20]
 8001b24:	7d3b      	ldrb	r3, [r7, #20]
 8001b26:	2b07      	cmp	r3, #7
 8001b28:	d9b9      	bls.n	8001a9e <oled_draw_ASCII+0xa6>
				for(uint8_t n = 0; n < 8; n++)
 8001b2a:	7d7b      	ldrb	r3, [r7, #21]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	757b      	strb	r3, [r7, #21]
 8001b30:	7d7b      	ldrb	r3, [r7, #21]
 8001b32:	2b07      	cmp	r3, #7
 8001b34:	d9b0      	bls.n	8001a98 <oled_draw_ASCII+0xa0>
			for(uint8_t m = 0; m < 2; m++)
 8001b36:	7dbb      	ldrb	r3, [r7, #22]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	75bb      	strb	r3, [r7, #22]
 8001b3c:	7dbb      	ldrb	r3, [r7, #22]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d9a7      	bls.n	8001a92 <oled_draw_ASCII+0x9a>
							}
						}
					}
				}
			}
			if (flush)
 8001b42:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d004      	beq.n	8001b54 <oled_draw_ASCII+0x15c>
			{
				x -= 8;
 8001b4a:	89fb      	ldrh	r3, [r7, #14]
 8001b4c:	3b08      	subs	r3, #8
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	81fb      	strh	r3, [r7, #14]
 8001b52:	e003      	b.n	8001b5c <oled_draw_ASCII+0x164>
			}
			else
			{
				x += 8;
 8001b54:	89fb      	ldrh	r3, [r7, #14]
 8001b56:	3308      	adds	r3, #8
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	81fb      	strh	r3, [r7, #14]
			}
			j++;
 8001b5c:	7dfb      	ldrb	r3, [r7, #23]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	75fb      	strb	r3, [r7, #23]
		while(arr[j] != '\0')
 8001b62:	7dfb      	ldrb	r3, [r7, #23]
 8001b64:	68ba      	ldr	r2, [r7, #8]
 8001b66:	4413      	add	r3, r2
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f47f af72 	bne.w	8001a54 <oled_draw_ASCII+0x5c>
 8001b70:	e002      	b.n	8001b78 <oled_draw_ASCII+0x180>
				break;
 8001b72:	bf00      	nop
 8001b74:	e000      	b.n	8001b78 <oled_draw_ASCII+0x180>
					break;
 8001b76:	bf00      	nop
		}
	}
	send_RAM();
 8001b78:	f7ff fcfc 	bl	8001574 <send_RAM>
}
 8001b7c:	bf00      	nop
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	08004a34 	.word	0x08004a34

08001b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	607b      	str	r3, [r7, #4]
 8001b92:	4b10      	ldr	r3, [pc, #64]	; (8001bd4 <HAL_MspInit+0x4c>)
 8001b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b96:	4a0f      	ldr	r2, [pc, #60]	; (8001bd4 <HAL_MspInit+0x4c>)
 8001b98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b9e:	4b0d      	ldr	r3, [pc, #52]	; (8001bd4 <HAL_MspInit+0x4c>)
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ba6:	607b      	str	r3, [r7, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	603b      	str	r3, [r7, #0]
 8001bae:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <HAL_MspInit+0x4c>)
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	4a08      	ldr	r2, [pc, #32]	; (8001bd4 <HAL_MspInit+0x4c>)
 8001bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bba:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <HAL_MspInit+0x4c>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc2:	603b      	str	r3, [r7, #0]
 8001bc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	40023800 	.word	0x40023800

08001bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bdc:	e7fe      	b.n	8001bdc <NMI_Handler+0x4>

08001bde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001be2:	e7fe      	b.n	8001be2 <HardFault_Handler+0x4>

08001be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001be8:	e7fe      	b.n	8001be8 <MemManage_Handler+0x4>

08001bea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bee:	e7fe      	b.n	8001bee <BusFault_Handler+0x4>

08001bf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bf4:	e7fe      	b.n	8001bf4 <UsageFault_Handler+0x4>

08001bf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c12:	b480      	push	{r7}
 8001c14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c24:	f000 f984 	bl	8001f30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c28:	bf00      	nop
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	detection = 1;
 8001c30:	4b03      	ldr	r3, [pc, #12]	; (8001c40 <EXTI0_IRQHandler+0x14>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SIG1_Pin);
 8001c36:	2001      	movs	r0, #1
 8001c38:	f000 fc86 	bl	8002548 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001c3c:	bf00      	nop
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	200000d9 	.word	0x200000d9

08001c44 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	detection = 2;
 8001c48:	4b03      	ldr	r3, [pc, #12]	; (8001c58 <EXTI1_IRQHandler+0x14>)
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SIG2_Pin);
 8001c4e:	2002      	movs	r0, #2
 8001c50:	f000 fc7a 	bl	8002548 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001c54:	bf00      	nop
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	200000d9 	.word	0x200000d9

08001c5c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	menu = 3;
 8001c60:	4b03      	ldr	r3, [pc, #12]	; (8001c70 <EXTI4_IRQHandler+0x14>)
 8001c62:	2203      	movs	r2, #3
 8001c64:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TIME_LIMIT_KEY_Pin);
 8001c66:	2010      	movs	r0, #16
 8001c68:	f000 fc6e 	bl	8002548 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001c6c:	bf00      	nop
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	200000d8 	.word	0x200000d8

08001c74 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	menu = 2;
 8001c78:	4b03      	ldr	r3, [pc, #12]	; (8001c88 <EXTI9_5_IRQHandler+0x14>)
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FLOW_LIMIT_KEY_Pin);
 8001c7e:	2020      	movs	r0, #32
 8001c80:	f000 fc62 	bl	8002548 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c84:	bf00      	nop
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	200000d8 	.word	0x200000d8

08001c8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	time_warning = 1;
 8001c90:	4b03      	ldr	r3, [pc, #12]	; (8001ca0 <TIM2_IRQHandler+0x14>)
 8001c92:	2201      	movs	r2, #1
 8001c94:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c96:	4803      	ldr	r0, [pc, #12]	; (8001ca4 <TIM2_IRQHandler+0x18>)
 8001c98:	f001 fdfb 	bl	8003892 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c9c:	bf00      	nop
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	200000da 	.word	0x200000da
 8001ca4:	200004fc 	.word	0x200004fc

08001ca8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	menu = 1;
 8001cac:	4b04      	ldr	r3, [pc, #16]	; (8001cc0 <EXTI15_10_IRQHandler+0x18>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FLOW_NUM_KEY_Pin);
 8001cb2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001cb6:	f000 fc47 	bl	8002548 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	200000d8 	.word	0x200000d8

08001cc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ccc:	4a14      	ldr	r2, [pc, #80]	; (8001d20 <_sbrk+0x5c>)
 8001cce:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <_sbrk+0x60>)
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cd8:	4b13      	ldr	r3, [pc, #76]	; (8001d28 <_sbrk+0x64>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d102      	bne.n	8001ce6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ce0:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <_sbrk+0x64>)
 8001ce2:	4a12      	ldr	r2, [pc, #72]	; (8001d2c <_sbrk+0x68>)
 8001ce4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ce6:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <_sbrk+0x64>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4413      	add	r3, r2
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d207      	bcs.n	8001d04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cf4:	f002 f992 	bl	800401c <__errno>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	220c      	movs	r2, #12
 8001cfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001d02:	e009      	b.n	8001d18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d04:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <_sbrk+0x64>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d0a:	4b07      	ldr	r3, [pc, #28]	; (8001d28 <_sbrk+0x64>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4413      	add	r3, r2
 8001d12:	4a05      	ldr	r2, [pc, #20]	; (8001d28 <_sbrk+0x64>)
 8001d14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d16:	68fb      	ldr	r3, [r7, #12]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20010000 	.word	0x20010000
 8001d24:	00000400 	.word	0x00000400
 8001d28:	200004f8 	.word	0x200004f8
 8001d2c:	20000690 	.word	0x20000690

08001d30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <SystemInit+0x20>)
 8001d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d3a:	4a05      	ldr	r2, [pc, #20]	; (8001d50 <SystemInit+0x20>)
 8001d3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d5a:	f107 0308 	add.w	r3, r7, #8
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	609a      	str	r2, [r3, #8]
 8001d66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d68:	463b      	mov	r3, r7
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d70:	4b1d      	ldr	r3, [pc, #116]	; (8001de8 <MX_TIM2_Init+0x94>)
 8001d72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42000;
 8001d78:	4b1b      	ldr	r3, [pc, #108]	; (8001de8 <MX_TIM2_Init+0x94>)
 8001d7a:	f24a 4210 	movw	r2, #42000	; 0xa410
 8001d7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d80:	4b19      	ldr	r3, [pc, #100]	; (8001de8 <MX_TIM2_Init+0x94>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001d86:	4b18      	ldr	r3, [pc, #96]	; (8001de8 <MX_TIM2_Init+0x94>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d8c:	4b16      	ldr	r3, [pc, #88]	; (8001de8 <MX_TIM2_Init+0x94>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d92:	4b15      	ldr	r3, [pc, #84]	; (8001de8 <MX_TIM2_Init+0x94>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d98:	4813      	ldr	r0, [pc, #76]	; (8001de8 <MX_TIM2_Init+0x94>)
 8001d9a:	f001 fc99 	bl	80036d0 <HAL_TIM_Base_Init>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001da4:	f7ff f80a 	bl	8000dbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001da8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001dae:	f107 0308 	add.w	r3, r7, #8
 8001db2:	4619      	mov	r1, r3
 8001db4:	480c      	ldr	r0, [pc, #48]	; (8001de8 <MX_TIM2_Init+0x94>)
 8001db6:	f001 fe74 	bl	8003aa2 <HAL_TIM_ConfigClockSource>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001dc0:	f7fe fffc 	bl	8000dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001dcc:	463b      	mov	r3, r7
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4805      	ldr	r0, [pc, #20]	; (8001de8 <MX_TIM2_Init+0x94>)
 8001dd2:	f002 f879 	bl	8003ec8 <HAL_TIMEx_MasterConfigSynchronization>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001ddc:	f7fe ffee 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001de0:	bf00      	nop
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	200004fc 	.word	0x200004fc

08001dec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dfc:	d115      	bne.n	8001e2a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <HAL_TIM_Base_MspInit+0x48>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	4a0b      	ldr	r2, [pc, #44]	; (8001e34 <HAL_TIM_Base_MspInit+0x48>)
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e0e:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <HAL_TIM_Base_MspInit+0x48>)
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2103      	movs	r1, #3
 8001e1e:	201c      	movs	r0, #28
 8001e20:	f000 f9a5 	bl	800216e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e24:	201c      	movs	r0, #28
 8001e26:	f000 f9be 	bl	80021a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001e2a:	bf00      	nop
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40023800 	.word	0x40023800

08001e38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e3c:	480d      	ldr	r0, [pc, #52]	; (8001e74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e3e:	490e      	ldr	r1, [pc, #56]	; (8001e78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e40:	4a0e      	ldr	r2, [pc, #56]	; (8001e7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e44:	e002      	b.n	8001e4c <LoopCopyDataInit>

08001e46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e4a:	3304      	adds	r3, #4

08001e4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e50:	d3f9      	bcc.n	8001e46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e52:	4a0b      	ldr	r2, [pc, #44]	; (8001e80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e54:	4c0b      	ldr	r4, [pc, #44]	; (8001e84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e58:	e001      	b.n	8001e5e <LoopFillZerobss>

08001e5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e5c:	3204      	adds	r2, #4

08001e5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e60:	d3fb      	bcc.n	8001e5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e62:	f7ff ff65 	bl	8001d30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e66:	f002 f8df 	bl	8004028 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e6a:	f7fe ff27 	bl	8000cbc <main>
  bx  lr    
 8001e6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e70:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e78:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001e7c:	08005080 	.word	0x08005080
  ldr r2, =_sbss
 8001e80:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001e84:	20000690 	.word	0x20000690

08001e88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e88:	e7fe      	b.n	8001e88 <ADC_IRQHandler>
	...

08001e8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e90:	4b0e      	ldr	r3, [pc, #56]	; (8001ecc <HAL_Init+0x40>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a0d      	ldr	r2, [pc, #52]	; (8001ecc <HAL_Init+0x40>)
 8001e96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <HAL_Init+0x40>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a0a      	ldr	r2, [pc, #40]	; (8001ecc <HAL_Init+0x40>)
 8001ea2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ea6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ea8:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <HAL_Init+0x40>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a07      	ldr	r2, [pc, #28]	; (8001ecc <HAL_Init+0x40>)
 8001eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eb4:	2003      	movs	r0, #3
 8001eb6:	f000 f94f 	bl	8002158 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eba:	200f      	movs	r0, #15
 8001ebc:	f000 f808 	bl	8001ed0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ec0:	f7ff fe62 	bl	8001b88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40023c00 	.word	0x40023c00

08001ed0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ed8:	4b12      	ldr	r3, [pc, #72]	; (8001f24 <HAL_InitTick+0x54>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <HAL_InitTick+0x58>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ee6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 f967 	bl	80021c2 <HAL_SYSTICK_Config>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e00e      	b.n	8001f1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2b0f      	cmp	r3, #15
 8001f02:	d80a      	bhi.n	8001f1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f04:	2200      	movs	r2, #0
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	f04f 30ff 	mov.w	r0, #4294967295
 8001f0c:	f000 f92f 	bl	800216e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f10:	4a06      	ldr	r2, [pc, #24]	; (8001f2c <HAL_InitTick+0x5c>)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
 8001f18:	e000      	b.n	8001f1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20000000 	.word	0x20000000
 8001f28:	20000008 	.word	0x20000008
 8001f2c:	20000004 	.word	0x20000004

08001f30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f34:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <HAL_IncTick+0x20>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <HAL_IncTick+0x24>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4413      	add	r3, r2
 8001f40:	4a04      	ldr	r2, [pc, #16]	; (8001f54 <HAL_IncTick+0x24>)
 8001f42:	6013      	str	r3, [r2, #0]
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	20000008 	.word	0x20000008
 8001f54:	20000544 	.word	0x20000544

08001f58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f5c:	4b03      	ldr	r3, [pc, #12]	; (8001f6c <HAL_GetTick+0x14>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	20000544 	.word	0x20000544

08001f70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f78:	f7ff ffee 	bl	8001f58 <HAL_GetTick>
 8001f7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f88:	d005      	beq.n	8001f96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f8a:	4b0a      	ldr	r3, [pc, #40]	; (8001fb4 <HAL_Delay+0x44>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4413      	add	r3, r2
 8001f94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f96:	bf00      	nop
 8001f98:	f7ff ffde 	bl	8001f58 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d8f7      	bhi.n	8001f98 <HAL_Delay+0x28>
  {
  }
}
 8001fa8:	bf00      	nop
 8001faa:	bf00      	nop
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000008 	.word	0x20000008

08001fb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <__NVIC_SetPriorityGrouping+0x44>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fe0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fea:	4a04      	ldr	r2, [pc, #16]	; (8001ffc <__NVIC_SetPriorityGrouping+0x44>)
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	60d3      	str	r3, [r2, #12]
}
 8001ff0:	bf00      	nop
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002004:	4b04      	ldr	r3, [pc, #16]	; (8002018 <__NVIC_GetPriorityGrouping+0x18>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	0a1b      	lsrs	r3, r3, #8
 800200a:	f003 0307 	and.w	r3, r3, #7
}
 800200e:	4618      	mov	r0, r3
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202a:	2b00      	cmp	r3, #0
 800202c:	db0b      	blt.n	8002046 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800202e:	79fb      	ldrb	r3, [r7, #7]
 8002030:	f003 021f 	and.w	r2, r3, #31
 8002034:	4907      	ldr	r1, [pc, #28]	; (8002054 <__NVIC_EnableIRQ+0x38>)
 8002036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203a:	095b      	lsrs	r3, r3, #5
 800203c:	2001      	movs	r0, #1
 800203e:	fa00 f202 	lsl.w	r2, r0, r2
 8002042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	e000e100 	.word	0xe000e100

08002058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	6039      	str	r1, [r7, #0]
 8002062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002068:	2b00      	cmp	r3, #0
 800206a:	db0a      	blt.n	8002082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	b2da      	uxtb	r2, r3
 8002070:	490c      	ldr	r1, [pc, #48]	; (80020a4 <__NVIC_SetPriority+0x4c>)
 8002072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002076:	0112      	lsls	r2, r2, #4
 8002078:	b2d2      	uxtb	r2, r2
 800207a:	440b      	add	r3, r1
 800207c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002080:	e00a      	b.n	8002098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	b2da      	uxtb	r2, r3
 8002086:	4908      	ldr	r1, [pc, #32]	; (80020a8 <__NVIC_SetPriority+0x50>)
 8002088:	79fb      	ldrb	r3, [r7, #7]
 800208a:	f003 030f 	and.w	r3, r3, #15
 800208e:	3b04      	subs	r3, #4
 8002090:	0112      	lsls	r2, r2, #4
 8002092:	b2d2      	uxtb	r2, r2
 8002094:	440b      	add	r3, r1
 8002096:	761a      	strb	r2, [r3, #24]
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	e000e100 	.word	0xe000e100
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b089      	sub	sp, #36	; 0x24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	f1c3 0307 	rsb	r3, r3, #7
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	bf28      	it	cs
 80020ca:	2304      	movcs	r3, #4
 80020cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	3304      	adds	r3, #4
 80020d2:	2b06      	cmp	r3, #6
 80020d4:	d902      	bls.n	80020dc <NVIC_EncodePriority+0x30>
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	3b03      	subs	r3, #3
 80020da:	e000      	b.n	80020de <NVIC_EncodePriority+0x32>
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e0:	f04f 32ff 	mov.w	r2, #4294967295
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	43da      	mvns	r2, r3
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	401a      	ands	r2, r3
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020f4:	f04f 31ff 	mov.w	r1, #4294967295
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	fa01 f303 	lsl.w	r3, r1, r3
 80020fe:	43d9      	mvns	r1, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002104:	4313      	orrs	r3, r2
         );
}
 8002106:	4618      	mov	r0, r3
 8002108:	3724      	adds	r7, #36	; 0x24
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
	...

08002114 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3b01      	subs	r3, #1
 8002120:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002124:	d301      	bcc.n	800212a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002126:	2301      	movs	r3, #1
 8002128:	e00f      	b.n	800214a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800212a:	4a0a      	ldr	r2, [pc, #40]	; (8002154 <SysTick_Config+0x40>)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3b01      	subs	r3, #1
 8002130:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002132:	210f      	movs	r1, #15
 8002134:	f04f 30ff 	mov.w	r0, #4294967295
 8002138:	f7ff ff8e 	bl	8002058 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800213c:	4b05      	ldr	r3, [pc, #20]	; (8002154 <SysTick_Config+0x40>)
 800213e:	2200      	movs	r2, #0
 8002140:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002142:	4b04      	ldr	r3, [pc, #16]	; (8002154 <SysTick_Config+0x40>)
 8002144:	2207      	movs	r2, #7
 8002146:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	e000e010 	.word	0xe000e010

08002158 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f7ff ff29 	bl	8001fb8 <__NVIC_SetPriorityGrouping>
}
 8002166:	bf00      	nop
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800216e:	b580      	push	{r7, lr}
 8002170:	b086      	sub	sp, #24
 8002172:	af00      	add	r7, sp, #0
 8002174:	4603      	mov	r3, r0
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	607a      	str	r2, [r7, #4]
 800217a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800217c:	2300      	movs	r3, #0
 800217e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002180:	f7ff ff3e 	bl	8002000 <__NVIC_GetPriorityGrouping>
 8002184:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	68b9      	ldr	r1, [r7, #8]
 800218a:	6978      	ldr	r0, [r7, #20]
 800218c:	f7ff ff8e 	bl	80020ac <NVIC_EncodePriority>
 8002190:	4602      	mov	r2, r0
 8002192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002196:	4611      	mov	r1, r2
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff ff5d 	bl	8002058 <__NVIC_SetPriority>
}
 800219e:	bf00      	nop
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b082      	sub	sp, #8
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	4603      	mov	r3, r0
 80021ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff ff31 	bl	800201c <__NVIC_EnableIRQ>
}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b082      	sub	sp, #8
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7ff ffa2 	bl	8002114 <SysTick_Config>
 80021d0:	4603      	mov	r3, r0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
	...

080021dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021dc:	b480      	push	{r7}
 80021de:	b089      	sub	sp, #36	; 0x24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021ea:	2300      	movs	r3, #0
 80021ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021f2:	2300      	movs	r3, #0
 80021f4:	61fb      	str	r3, [r7, #28]
 80021f6:	e159      	b.n	80024ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021f8:	2201      	movs	r2, #1
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	4013      	ands	r3, r2
 800220a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	429a      	cmp	r2, r3
 8002212:	f040 8148 	bne.w	80024a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 0303 	and.w	r3, r3, #3
 800221e:	2b01      	cmp	r3, #1
 8002220:	d005      	beq.n	800222e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800222a:	2b02      	cmp	r3, #2
 800222c:	d130      	bne.n	8002290 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	2203      	movs	r2, #3
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	43db      	mvns	r3, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4013      	ands	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	68da      	ldr	r2, [r3, #12]
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4313      	orrs	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002264:	2201      	movs	r2, #1
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	091b      	lsrs	r3, r3, #4
 800227a:	f003 0201 	and.w	r2, r3, #1
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4313      	orrs	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 0303 	and.w	r3, r3, #3
 8002298:	2b03      	cmp	r3, #3
 800229a:	d017      	beq.n	80022cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	2203      	movs	r2, #3
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4013      	ands	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f003 0303 	and.w	r3, r3, #3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d123      	bne.n	8002320 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	08da      	lsrs	r2, r3, #3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3208      	adds	r2, #8
 80022e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	220f      	movs	r2, #15
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	691a      	ldr	r2, [r3, #16]
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	08da      	lsrs	r2, r3, #3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3208      	adds	r2, #8
 800231a:	69b9      	ldr	r1, [r7, #24]
 800231c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	2203      	movs	r2, #3
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4013      	ands	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f003 0203 	and.w	r2, r3, #3
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4313      	orrs	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 80a2 	beq.w	80024a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002362:	2300      	movs	r3, #0
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	4b57      	ldr	r3, [pc, #348]	; (80024c4 <HAL_GPIO_Init+0x2e8>)
 8002368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236a:	4a56      	ldr	r2, [pc, #344]	; (80024c4 <HAL_GPIO_Init+0x2e8>)
 800236c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002370:	6453      	str	r3, [r2, #68]	; 0x44
 8002372:	4b54      	ldr	r3, [pc, #336]	; (80024c4 <HAL_GPIO_Init+0x2e8>)
 8002374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800237e:	4a52      	ldr	r2, [pc, #328]	; (80024c8 <HAL_GPIO_Init+0x2ec>)
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	089b      	lsrs	r3, r3, #2
 8002384:	3302      	adds	r3, #2
 8002386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800238a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f003 0303 	and.w	r3, r3, #3
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	220f      	movs	r2, #15
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43db      	mvns	r3, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4013      	ands	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a49      	ldr	r2, [pc, #292]	; (80024cc <HAL_GPIO_Init+0x2f0>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d019      	beq.n	80023de <HAL_GPIO_Init+0x202>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a48      	ldr	r2, [pc, #288]	; (80024d0 <HAL_GPIO_Init+0x2f4>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d013      	beq.n	80023da <HAL_GPIO_Init+0x1fe>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a47      	ldr	r2, [pc, #284]	; (80024d4 <HAL_GPIO_Init+0x2f8>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d00d      	beq.n	80023d6 <HAL_GPIO_Init+0x1fa>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a46      	ldr	r2, [pc, #280]	; (80024d8 <HAL_GPIO_Init+0x2fc>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d007      	beq.n	80023d2 <HAL_GPIO_Init+0x1f6>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a45      	ldr	r2, [pc, #276]	; (80024dc <HAL_GPIO_Init+0x300>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d101      	bne.n	80023ce <HAL_GPIO_Init+0x1f2>
 80023ca:	2304      	movs	r3, #4
 80023cc:	e008      	b.n	80023e0 <HAL_GPIO_Init+0x204>
 80023ce:	2307      	movs	r3, #7
 80023d0:	e006      	b.n	80023e0 <HAL_GPIO_Init+0x204>
 80023d2:	2303      	movs	r3, #3
 80023d4:	e004      	b.n	80023e0 <HAL_GPIO_Init+0x204>
 80023d6:	2302      	movs	r3, #2
 80023d8:	e002      	b.n	80023e0 <HAL_GPIO_Init+0x204>
 80023da:	2301      	movs	r3, #1
 80023dc:	e000      	b.n	80023e0 <HAL_GPIO_Init+0x204>
 80023de:	2300      	movs	r3, #0
 80023e0:	69fa      	ldr	r2, [r7, #28]
 80023e2:	f002 0203 	and.w	r2, r2, #3
 80023e6:	0092      	lsls	r2, r2, #2
 80023e8:	4093      	lsls	r3, r2
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023f0:	4935      	ldr	r1, [pc, #212]	; (80024c8 <HAL_GPIO_Init+0x2ec>)
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	089b      	lsrs	r3, r3, #2
 80023f6:	3302      	adds	r3, #2
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023fe:	4b38      	ldr	r3, [pc, #224]	; (80024e0 <HAL_GPIO_Init+0x304>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	43db      	mvns	r3, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4013      	ands	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	4313      	orrs	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002422:	4a2f      	ldr	r2, [pc, #188]	; (80024e0 <HAL_GPIO_Init+0x304>)
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002428:	4b2d      	ldr	r3, [pc, #180]	; (80024e0 <HAL_GPIO_Init+0x304>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	43db      	mvns	r3, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4013      	ands	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d003      	beq.n	800244c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	4313      	orrs	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800244c:	4a24      	ldr	r2, [pc, #144]	; (80024e0 <HAL_GPIO_Init+0x304>)
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002452:	4b23      	ldr	r3, [pc, #140]	; (80024e0 <HAL_GPIO_Init+0x304>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	43db      	mvns	r3, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4013      	ands	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	4313      	orrs	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002476:	4a1a      	ldr	r2, [pc, #104]	; (80024e0 <HAL_GPIO_Init+0x304>)
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800247c:	4b18      	ldr	r3, [pc, #96]	; (80024e0 <HAL_GPIO_Init+0x304>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	43db      	mvns	r3, r3
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	4013      	ands	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	4313      	orrs	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024a0:	4a0f      	ldr	r2, [pc, #60]	; (80024e0 <HAL_GPIO_Init+0x304>)
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	3301      	adds	r3, #1
 80024aa:	61fb      	str	r3, [r7, #28]
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	2b0f      	cmp	r3, #15
 80024b0:	f67f aea2 	bls.w	80021f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024b4:	bf00      	nop
 80024b6:	bf00      	nop
 80024b8:	3724      	adds	r7, #36	; 0x24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	40023800 	.word	0x40023800
 80024c8:	40013800 	.word	0x40013800
 80024cc:	40020000 	.word	0x40020000
 80024d0:	40020400 	.word	0x40020400
 80024d4:	40020800 	.word	0x40020800
 80024d8:	40020c00 	.word	0x40020c00
 80024dc:	40021000 	.word	0x40021000
 80024e0:	40013c00 	.word	0x40013c00

080024e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	460b      	mov	r3, r1
 80024ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	691a      	ldr	r2, [r3, #16]
 80024f4:	887b      	ldrh	r3, [r7, #2]
 80024f6:	4013      	ands	r3, r2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d002      	beq.n	8002502 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024fc:	2301      	movs	r3, #1
 80024fe:	73fb      	strb	r3, [r7, #15]
 8002500:	e001      	b.n	8002506 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002502:	2300      	movs	r3, #0
 8002504:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002506:	7bfb      	ldrb	r3, [r7, #15]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	460b      	mov	r3, r1
 800251e:	807b      	strh	r3, [r7, #2]
 8002520:	4613      	mov	r3, r2
 8002522:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002524:	787b      	ldrb	r3, [r7, #1]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800252a:	887a      	ldrh	r2, [r7, #2]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002530:	e003      	b.n	800253a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002532:	887b      	ldrh	r3, [r7, #2]
 8002534:	041a      	lsls	r2, r3, #16
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	619a      	str	r2, [r3, #24]
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
	...

08002548 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002552:	4b08      	ldr	r3, [pc, #32]	; (8002574 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002554:	695a      	ldr	r2, [r3, #20]
 8002556:	88fb      	ldrh	r3, [r7, #6]
 8002558:	4013      	ands	r3, r2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d006      	beq.n	800256c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800255e:	4a05      	ldr	r2, [pc, #20]	; (8002574 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002560:	88fb      	ldrh	r3, [r7, #6]
 8002562:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002564:	88fb      	ldrh	r3, [r7, #6]
 8002566:	4618      	mov	r0, r3
 8002568:	f000 f806 	bl	8002578 <HAL_GPIO_EXTI_Callback>
  }
}
 800256c:	bf00      	nop
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	40013c00 	.word	0x40013c00

08002578 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
	...

08002590 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e12b      	b.n	80027fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d106      	bne.n	80025bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f7fe fa3e 	bl	8000a38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2224      	movs	r2, #36	; 0x24
 80025c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 0201 	bic.w	r2, r2, #1
 80025d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025f4:	f001 f858 	bl	80036a8 <HAL_RCC_GetPCLK1Freq>
 80025f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	4a81      	ldr	r2, [pc, #516]	; (8002804 <HAL_I2C_Init+0x274>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d807      	bhi.n	8002614 <HAL_I2C_Init+0x84>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	4a80      	ldr	r2, [pc, #512]	; (8002808 <HAL_I2C_Init+0x278>)
 8002608:	4293      	cmp	r3, r2
 800260a:	bf94      	ite	ls
 800260c:	2301      	movls	r3, #1
 800260e:	2300      	movhi	r3, #0
 8002610:	b2db      	uxtb	r3, r3
 8002612:	e006      	b.n	8002622 <HAL_I2C_Init+0x92>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	4a7d      	ldr	r2, [pc, #500]	; (800280c <HAL_I2C_Init+0x27c>)
 8002618:	4293      	cmp	r3, r2
 800261a:	bf94      	ite	ls
 800261c:	2301      	movls	r3, #1
 800261e:	2300      	movhi	r3, #0
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e0e7      	b.n	80027fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	4a78      	ldr	r2, [pc, #480]	; (8002810 <HAL_I2C_Init+0x280>)
 800262e:	fba2 2303 	umull	r2, r3, r2, r3
 8002632:	0c9b      	lsrs	r3, r3, #18
 8002634:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68ba      	ldr	r2, [r7, #8]
 8002646:	430a      	orrs	r2, r1
 8002648:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	4a6a      	ldr	r2, [pc, #424]	; (8002804 <HAL_I2C_Init+0x274>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d802      	bhi.n	8002664 <HAL_I2C_Init+0xd4>
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	3301      	adds	r3, #1
 8002662:	e009      	b.n	8002678 <HAL_I2C_Init+0xe8>
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800266a:	fb02 f303 	mul.w	r3, r2, r3
 800266e:	4a69      	ldr	r2, [pc, #420]	; (8002814 <HAL_I2C_Init+0x284>)
 8002670:	fba2 2303 	umull	r2, r3, r2, r3
 8002674:	099b      	lsrs	r3, r3, #6
 8002676:	3301      	adds	r3, #1
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6812      	ldr	r2, [r2, #0]
 800267c:	430b      	orrs	r3, r1
 800267e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800268a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	495c      	ldr	r1, [pc, #368]	; (8002804 <HAL_I2C_Init+0x274>)
 8002694:	428b      	cmp	r3, r1
 8002696:	d819      	bhi.n	80026cc <HAL_I2C_Init+0x13c>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	1e59      	subs	r1, r3, #1
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80026a6:	1c59      	adds	r1, r3, #1
 80026a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80026ac:	400b      	ands	r3, r1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00a      	beq.n	80026c8 <HAL_I2C_Init+0x138>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	1e59      	subs	r1, r3, #1
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80026c0:	3301      	adds	r3, #1
 80026c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026c6:	e051      	b.n	800276c <HAL_I2C_Init+0x1dc>
 80026c8:	2304      	movs	r3, #4
 80026ca:	e04f      	b.n	800276c <HAL_I2C_Init+0x1dc>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d111      	bne.n	80026f8 <HAL_I2C_Init+0x168>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	1e58      	subs	r0, r3, #1
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6859      	ldr	r1, [r3, #4]
 80026dc:	460b      	mov	r3, r1
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	440b      	add	r3, r1
 80026e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80026e6:	3301      	adds	r3, #1
 80026e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	bf0c      	ite	eq
 80026f0:	2301      	moveq	r3, #1
 80026f2:	2300      	movne	r3, #0
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	e012      	b.n	800271e <HAL_I2C_Init+0x18e>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	1e58      	subs	r0, r3, #1
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6859      	ldr	r1, [r3, #4]
 8002700:	460b      	mov	r3, r1
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	0099      	lsls	r1, r3, #2
 8002708:	440b      	add	r3, r1
 800270a:	fbb0 f3f3 	udiv	r3, r0, r3
 800270e:	3301      	adds	r3, #1
 8002710:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002714:	2b00      	cmp	r3, #0
 8002716:	bf0c      	ite	eq
 8002718:	2301      	moveq	r3, #1
 800271a:	2300      	movne	r3, #0
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <HAL_I2C_Init+0x196>
 8002722:	2301      	movs	r3, #1
 8002724:	e022      	b.n	800276c <HAL_I2C_Init+0x1dc>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d10e      	bne.n	800274c <HAL_I2C_Init+0x1bc>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	1e58      	subs	r0, r3, #1
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6859      	ldr	r1, [r3, #4]
 8002736:	460b      	mov	r3, r1
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	440b      	add	r3, r1
 800273c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002740:	3301      	adds	r3, #1
 8002742:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002746:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800274a:	e00f      	b.n	800276c <HAL_I2C_Init+0x1dc>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	1e58      	subs	r0, r3, #1
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6859      	ldr	r1, [r3, #4]
 8002754:	460b      	mov	r3, r1
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	440b      	add	r3, r1
 800275a:	0099      	lsls	r1, r3, #2
 800275c:	440b      	add	r3, r1
 800275e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002762:	3301      	adds	r3, #1
 8002764:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002768:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800276c:	6879      	ldr	r1, [r7, #4]
 800276e:	6809      	ldr	r1, [r1, #0]
 8002770:	4313      	orrs	r3, r2
 8002772:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	69da      	ldr	r2, [r3, #28]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	431a      	orrs	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	430a      	orrs	r2, r1
 800278e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800279a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	6911      	ldr	r1, [r2, #16]
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	68d2      	ldr	r2, [r2, #12]
 80027a6:	4311      	orrs	r1, r2
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	6812      	ldr	r2, [r2, #0]
 80027ac:	430b      	orrs	r3, r1
 80027ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	695a      	ldr	r2, [r3, #20]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	431a      	orrs	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	430a      	orrs	r2, r1
 80027ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f042 0201 	orr.w	r2, r2, #1
 80027da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2220      	movs	r2, #32
 80027e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	000186a0 	.word	0x000186a0
 8002808:	001e847f 	.word	0x001e847f
 800280c:	003d08ff 	.word	0x003d08ff
 8002810:	431bde83 	.word	0x431bde83
 8002814:	10624dd3 	.word	0x10624dd3

08002818 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b088      	sub	sp, #32
 800281c:	af02      	add	r7, sp, #8
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	4608      	mov	r0, r1
 8002822:	4611      	mov	r1, r2
 8002824:	461a      	mov	r2, r3
 8002826:	4603      	mov	r3, r0
 8002828:	817b      	strh	r3, [r7, #10]
 800282a:	460b      	mov	r3, r1
 800282c:	813b      	strh	r3, [r7, #8]
 800282e:	4613      	mov	r3, r2
 8002830:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002832:	f7ff fb91 	bl	8001f58 <HAL_GetTick>
 8002836:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b20      	cmp	r3, #32
 8002842:	f040 80d9 	bne.w	80029f8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	2319      	movs	r3, #25
 800284c:	2201      	movs	r2, #1
 800284e:	496d      	ldr	r1, [pc, #436]	; (8002a04 <HAL_I2C_Mem_Write+0x1ec>)
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f000 f971 	bl	8002b38 <I2C_WaitOnFlagUntilTimeout>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800285c:	2302      	movs	r3, #2
 800285e:	e0cc      	b.n	80029fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002866:	2b01      	cmp	r3, #1
 8002868:	d101      	bne.n	800286e <HAL_I2C_Mem_Write+0x56>
 800286a:	2302      	movs	r3, #2
 800286c:	e0c5      	b.n	80029fa <HAL_I2C_Mem_Write+0x1e2>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	2b01      	cmp	r3, #1
 8002882:	d007      	beq.n	8002894 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f042 0201 	orr.w	r2, r2, #1
 8002892:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2221      	movs	r2, #33	; 0x21
 80028a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2240      	movs	r2, #64	; 0x40
 80028b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6a3a      	ldr	r2, [r7, #32]
 80028be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80028c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	4a4d      	ldr	r2, [pc, #308]	; (8002a08 <HAL_I2C_Mem_Write+0x1f0>)
 80028d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028d6:	88f8      	ldrh	r0, [r7, #6]
 80028d8:	893a      	ldrh	r2, [r7, #8]
 80028da:	8979      	ldrh	r1, [r7, #10]
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	9301      	str	r3, [sp, #4]
 80028e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	4603      	mov	r3, r0
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f000 f890 	bl	8002a0c <I2C_RequestMemoryWrite>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d052      	beq.n	8002998 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e081      	b.n	80029fa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 f9f2 	bl	8002ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00d      	beq.n	8002922 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	2b04      	cmp	r3, #4
 800290c:	d107      	bne.n	800291e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800291c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e06b      	b.n	80029fa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002926:	781a      	ldrb	r2, [r3, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002932:	1c5a      	adds	r2, r3, #1
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800293c:	3b01      	subs	r3, #1
 800293e:	b29a      	uxth	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002948:	b29b      	uxth	r3, r3
 800294a:	3b01      	subs	r3, #1
 800294c:	b29a      	uxth	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	f003 0304 	and.w	r3, r3, #4
 800295c:	2b04      	cmp	r3, #4
 800295e:	d11b      	bne.n	8002998 <HAL_I2C_Mem_Write+0x180>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002964:	2b00      	cmp	r3, #0
 8002966:	d017      	beq.n	8002998 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296c:	781a      	ldrb	r2, [r3, #0]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	1c5a      	adds	r2, r3, #1
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002982:	3b01      	subs	r3, #1
 8002984:	b29a      	uxth	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800298e:	b29b      	uxth	r3, r3
 8002990:	3b01      	subs	r3, #1
 8002992:	b29a      	uxth	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1aa      	bne.n	80028f6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	f000 f9de 	bl	8002d66 <I2C_WaitOnBTFFlagUntilTimeout>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00d      	beq.n	80029cc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b4:	2b04      	cmp	r3, #4
 80029b6:	d107      	bne.n	80029c8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029c6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e016      	b.n	80029fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2220      	movs	r2, #32
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80029f4:	2300      	movs	r3, #0
 80029f6:	e000      	b.n	80029fa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80029f8:	2302      	movs	r3, #2
  }
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	00100002 	.word	0x00100002
 8002a08:	ffff0000 	.word	0xffff0000

08002a0c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b088      	sub	sp, #32
 8002a10:	af02      	add	r7, sp, #8
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	4608      	mov	r0, r1
 8002a16:	4611      	mov	r1, r2
 8002a18:	461a      	mov	r2, r3
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	817b      	strh	r3, [r7, #10]
 8002a1e:	460b      	mov	r3, r1
 8002a20:	813b      	strh	r3, [r7, #8]
 8002a22:	4613      	mov	r3, r2
 8002a24:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	9300      	str	r3, [sp, #0]
 8002a3a:	6a3b      	ldr	r3, [r7, #32]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f000 f878 	bl	8002b38 <I2C_WaitOnFlagUntilTimeout>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00d      	beq.n	8002a6a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a5c:	d103      	bne.n	8002a66 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a64:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e05f      	b.n	8002b2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a6a:	897b      	ldrh	r3, [r7, #10]
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	461a      	mov	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a78:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	6a3a      	ldr	r2, [r7, #32]
 8002a7e:	492d      	ldr	r1, [pc, #180]	; (8002b34 <I2C_RequestMemoryWrite+0x128>)
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 f8b0 	bl	8002be6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e04c      	b.n	8002b2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a90:	2300      	movs	r3, #0
 8002a92:	617b      	str	r3, [r7, #20]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	617b      	str	r3, [r7, #20]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	617b      	str	r3, [r7, #20]
 8002aa4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aa8:	6a39      	ldr	r1, [r7, #32]
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f000 f91a 	bl	8002ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00d      	beq.n	8002ad2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	d107      	bne.n	8002ace <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002acc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e02b      	b.n	8002b2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ad2:	88fb      	ldrh	r3, [r7, #6]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d105      	bne.n	8002ae4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ad8:	893b      	ldrh	r3, [r7, #8]
 8002ada:	b2da      	uxtb	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	611a      	str	r2, [r3, #16]
 8002ae2:	e021      	b.n	8002b28 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ae4:	893b      	ldrh	r3, [r7, #8]
 8002ae6:	0a1b      	lsrs	r3, r3, #8
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002af4:	6a39      	ldr	r1, [r7, #32]
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 f8f4 	bl	8002ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00d      	beq.n	8002b1e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d107      	bne.n	8002b1a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b18:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e005      	b.n	8002b2a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b1e:	893b      	ldrh	r3, [r7, #8]
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3718      	adds	r7, #24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	00010002 	.word	0x00010002

08002b38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	603b      	str	r3, [r7, #0]
 8002b44:	4613      	mov	r3, r2
 8002b46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b48:	e025      	b.n	8002b96 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b50:	d021      	beq.n	8002b96 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b52:	f7ff fa01 	bl	8001f58 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d302      	bcc.n	8002b68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d116      	bne.n	8002b96 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2220      	movs	r2, #32
 8002b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	f043 0220 	orr.w	r2, r3, #32
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e023      	b.n	8002bde <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	0c1b      	lsrs	r3, r3, #16
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d10d      	bne.n	8002bbc <I2C_WaitOnFlagUntilTimeout+0x84>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	43da      	mvns	r2, r3
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	4013      	ands	r3, r2
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	bf0c      	ite	eq
 8002bb2:	2301      	moveq	r3, #1
 8002bb4:	2300      	movne	r3, #0
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	461a      	mov	r2, r3
 8002bba:	e00c      	b.n	8002bd6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	43da      	mvns	r2, r3
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	bf0c      	ite	eq
 8002bce:	2301      	moveq	r3, #1
 8002bd0:	2300      	movne	r3, #0
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	79fb      	ldrb	r3, [r7, #7]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d0b6      	beq.n	8002b4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b084      	sub	sp, #16
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	60f8      	str	r0, [r7, #12]
 8002bee:	60b9      	str	r1, [r7, #8]
 8002bf0:	607a      	str	r2, [r7, #4]
 8002bf2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bf4:	e051      	b.n	8002c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	695b      	ldr	r3, [r3, #20]
 8002bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c04:	d123      	bne.n	8002c4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c14:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c1e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2220      	movs	r2, #32
 8002c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	f043 0204 	orr.w	r2, r3, #4
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e046      	b.n	8002cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c54:	d021      	beq.n	8002c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c56:	f7ff f97f 	bl	8001f58 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d302      	bcc.n	8002c6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d116      	bne.n	8002c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2220      	movs	r2, #32
 8002c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	f043 0220 	orr.w	r2, r3, #32
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e020      	b.n	8002cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	0c1b      	lsrs	r3, r3, #16
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d10c      	bne.n	8002cbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	43da      	mvns	r2, r3
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	bf14      	ite	ne
 8002cb6:	2301      	movne	r3, #1
 8002cb8:	2300      	moveq	r3, #0
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	e00b      	b.n	8002cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	43da      	mvns	r2, r3
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	bf14      	ite	ne
 8002cd0:	2301      	movne	r3, #1
 8002cd2:	2300      	moveq	r3, #0
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d18d      	bne.n	8002bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cf0:	e02d      	b.n	8002d4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f000 f878 	bl	8002de8 <I2C_IsAcknowledgeFailed>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e02d      	b.n	8002d5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d08:	d021      	beq.n	8002d4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d0a:	f7ff f925 	bl	8001f58 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	68ba      	ldr	r2, [r7, #8]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d302      	bcc.n	8002d20 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d116      	bne.n	8002d4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2220      	movs	r2, #32
 8002d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	f043 0220 	orr.w	r2, r3, #32
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e007      	b.n	8002d5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d58:	2b80      	cmp	r3, #128	; 0x80
 8002d5a:	d1ca      	bne.n	8002cf2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b084      	sub	sp, #16
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	60f8      	str	r0, [r7, #12]
 8002d6e:	60b9      	str	r1, [r7, #8]
 8002d70:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d72:	e02d      	b.n	8002dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f000 f837 	bl	8002de8 <I2C_IsAcknowledgeFailed>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e02d      	b.n	8002de0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d8a:	d021      	beq.n	8002dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d8c:	f7ff f8e4 	bl	8001f58 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d302      	bcc.n	8002da2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d116      	bne.n	8002dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2220      	movs	r2, #32
 8002dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbc:	f043 0220 	orr.w	r2, r3, #32
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e007      	b.n	8002de0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	f003 0304 	and.w	r3, r3, #4
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	d1ca      	bne.n	8002d74 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dfe:	d11b      	bne.n	8002e38 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e08:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2220      	movs	r2, #32
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	f043 0204 	orr.w	r2, r3, #4
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e000      	b.n	8002e3a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
	...

08002e48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e267      	b.n	800332a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d075      	beq.n	8002f52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e66:	4b88      	ldr	r3, [pc, #544]	; (8003088 <HAL_RCC_OscConfig+0x240>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 030c 	and.w	r3, r3, #12
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	d00c      	beq.n	8002e8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e72:	4b85      	ldr	r3, [pc, #532]	; (8003088 <HAL_RCC_OscConfig+0x240>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e7a:	2b08      	cmp	r3, #8
 8002e7c:	d112      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e7e:	4b82      	ldr	r3, [pc, #520]	; (8003088 <HAL_RCC_OscConfig+0x240>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e8a:	d10b      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e8c:	4b7e      	ldr	r3, [pc, #504]	; (8003088 <HAL_RCC_OscConfig+0x240>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d05b      	beq.n	8002f50 <HAL_RCC_OscConfig+0x108>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d157      	bne.n	8002f50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e242      	b.n	800332a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eac:	d106      	bne.n	8002ebc <HAL_RCC_OscConfig+0x74>
 8002eae:	4b76      	ldr	r3, [pc, #472]	; (8003088 <HAL_RCC_OscConfig+0x240>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a75      	ldr	r2, [pc, #468]	; (8003088 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb8:	6013      	str	r3, [r2, #0]
 8002eba:	e01d      	b.n	8002ef8 <HAL_RCC_OscConfig+0xb0>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ec4:	d10c      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x98>
 8002ec6:	4b70      	ldr	r3, [pc, #448]	; (8003088 <HAL_RCC_OscConfig+0x240>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a6f      	ldr	r2, [pc, #444]	; (8003088 <HAL_RCC_OscConfig+0x240>)
 8002ecc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ed0:	6013      	str	r3, [r2, #0]
 8002ed2:	4b6d      	ldr	r3, [pc, #436]	; (8003088 <HAL_RCC_OscConfig+0x240>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a6c      	ldr	r2, [pc, #432]	; (8003088 <HAL_RCC_OscConfig+0x240>)
 8002ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002edc:	6013      	str	r3, [r2, #0]
 8002ede:	e00b      	b.n	8002ef8 <HAL_RCC_OscConfig+0xb0>
 8002ee0:	4b69      	ldr	r3, [pc, #420]	; (8003088 <HAL_RCC_OscConfig+0x240>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a68      	ldr	r2, [pc, #416]	; (8003088 <HAL_RCC_OscConfig+0x240>)
 8002ee6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eea:	6013      	str	r3, [r2, #0]
 8002eec:	4b66      	ldr	r3, [pc, #408]	; (8003088 <HAL_RCC_OscConfig+0x240>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a65      	ldr	r2, [pc, #404]	; (8003088 <HAL_RCC_OscConfig+0x240>)
 8002ef2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ef6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d013      	beq.n	8002f28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f00:	f7ff f82a 	bl	8001f58 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f08:	f7ff f826 	bl	8001f58 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b64      	cmp	r3, #100	; 0x64
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e207      	b.n	800332a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f1a:	4b5b      	ldr	r3, [pc, #364]	; (8003088 <HAL_RCC_OscConfig+0x240>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0f0      	beq.n	8002f08 <HAL_RCC_OscConfig+0xc0>
 8002f26:	e014      	b.n	8002f52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f28:	f7ff f816 	bl	8001f58 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f30:	f7ff f812 	bl	8001f58 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b64      	cmp	r3, #100	; 0x64
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e1f3      	b.n	800332a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f42:	4b51      	ldr	r3, [pc, #324]	; (8003088 <HAL_RCC_OscConfig+0x240>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f0      	bne.n	8002f30 <HAL_RCC_OscConfig+0xe8>
 8002f4e:	e000      	b.n	8002f52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d063      	beq.n	8003026 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f5e:	4b4a      	ldr	r3, [pc, #296]	; (8003088 <HAL_RCC_OscConfig+0x240>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f003 030c 	and.w	r3, r3, #12
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00b      	beq.n	8002f82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f6a:	4b47      	ldr	r3, [pc, #284]	; (8003088 <HAL_RCC_OscConfig+0x240>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f72:	2b08      	cmp	r3, #8
 8002f74:	d11c      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f76:	4b44      	ldr	r3, [pc, #272]	; (8003088 <HAL_RCC_OscConfig+0x240>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d116      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f82:	4b41      	ldr	r3, [pc, #260]	; (8003088 <HAL_RCC_OscConfig+0x240>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d005      	beq.n	8002f9a <HAL_RCC_OscConfig+0x152>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d001      	beq.n	8002f9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e1c7      	b.n	800332a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f9a:	4b3b      	ldr	r3, [pc, #236]	; (8003088 <HAL_RCC_OscConfig+0x240>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	4937      	ldr	r1, [pc, #220]	; (8003088 <HAL_RCC_OscConfig+0x240>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fae:	e03a      	b.n	8003026 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d020      	beq.n	8002ffa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fb8:	4b34      	ldr	r3, [pc, #208]	; (800308c <HAL_RCC_OscConfig+0x244>)
 8002fba:	2201      	movs	r2, #1
 8002fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fbe:	f7fe ffcb 	bl	8001f58 <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fc6:	f7fe ffc7 	bl	8001f58 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e1a8      	b.n	800332a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd8:	4b2b      	ldr	r3, [pc, #172]	; (8003088 <HAL_RCC_OscConfig+0x240>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0f0      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe4:	4b28      	ldr	r3, [pc, #160]	; (8003088 <HAL_RCC_OscConfig+0x240>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	4925      	ldr	r1, [pc, #148]	; (8003088 <HAL_RCC_OscConfig+0x240>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	600b      	str	r3, [r1, #0]
 8002ff8:	e015      	b.n	8003026 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ffa:	4b24      	ldr	r3, [pc, #144]	; (800308c <HAL_RCC_OscConfig+0x244>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003000:	f7fe ffaa 	bl	8001f58 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003008:	f7fe ffa6 	bl	8001f58 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e187      	b.n	800332a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800301a:	4b1b      	ldr	r3, [pc, #108]	; (8003088 <HAL_RCC_OscConfig+0x240>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1f0      	bne.n	8003008 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0308 	and.w	r3, r3, #8
 800302e:	2b00      	cmp	r3, #0
 8003030:	d036      	beq.n	80030a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d016      	beq.n	8003068 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800303a:	4b15      	ldr	r3, [pc, #84]	; (8003090 <HAL_RCC_OscConfig+0x248>)
 800303c:	2201      	movs	r2, #1
 800303e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003040:	f7fe ff8a 	bl	8001f58 <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003048:	f7fe ff86 	bl	8001f58 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e167      	b.n	800332a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800305a:	4b0b      	ldr	r3, [pc, #44]	; (8003088 <HAL_RCC_OscConfig+0x240>)
 800305c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0f0      	beq.n	8003048 <HAL_RCC_OscConfig+0x200>
 8003066:	e01b      	b.n	80030a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003068:	4b09      	ldr	r3, [pc, #36]	; (8003090 <HAL_RCC_OscConfig+0x248>)
 800306a:	2200      	movs	r2, #0
 800306c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800306e:	f7fe ff73 	bl	8001f58 <HAL_GetTick>
 8003072:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003074:	e00e      	b.n	8003094 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003076:	f7fe ff6f 	bl	8001f58 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d907      	bls.n	8003094 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e150      	b.n	800332a <HAL_RCC_OscConfig+0x4e2>
 8003088:	40023800 	.word	0x40023800
 800308c:	42470000 	.word	0x42470000
 8003090:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003094:	4b88      	ldr	r3, [pc, #544]	; (80032b8 <HAL_RCC_OscConfig+0x470>)
 8003096:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1ea      	bne.n	8003076 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0304 	and.w	r3, r3, #4
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f000 8097 	beq.w	80031dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ae:	2300      	movs	r3, #0
 80030b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030b2:	4b81      	ldr	r3, [pc, #516]	; (80032b8 <HAL_RCC_OscConfig+0x470>)
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10f      	bne.n	80030de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030be:	2300      	movs	r3, #0
 80030c0:	60bb      	str	r3, [r7, #8]
 80030c2:	4b7d      	ldr	r3, [pc, #500]	; (80032b8 <HAL_RCC_OscConfig+0x470>)
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	4a7c      	ldr	r2, [pc, #496]	; (80032b8 <HAL_RCC_OscConfig+0x470>)
 80030c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030cc:	6413      	str	r3, [r2, #64]	; 0x40
 80030ce:	4b7a      	ldr	r3, [pc, #488]	; (80032b8 <HAL_RCC_OscConfig+0x470>)
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d6:	60bb      	str	r3, [r7, #8]
 80030d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030da:	2301      	movs	r3, #1
 80030dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030de:	4b77      	ldr	r3, [pc, #476]	; (80032bc <HAL_RCC_OscConfig+0x474>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d118      	bne.n	800311c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030ea:	4b74      	ldr	r3, [pc, #464]	; (80032bc <HAL_RCC_OscConfig+0x474>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a73      	ldr	r2, [pc, #460]	; (80032bc <HAL_RCC_OscConfig+0x474>)
 80030f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030f6:	f7fe ff2f 	bl	8001f58 <HAL_GetTick>
 80030fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030fc:	e008      	b.n	8003110 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030fe:	f7fe ff2b 	bl	8001f58 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e10c      	b.n	800332a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003110:	4b6a      	ldr	r3, [pc, #424]	; (80032bc <HAL_RCC_OscConfig+0x474>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003118:	2b00      	cmp	r3, #0
 800311a:	d0f0      	beq.n	80030fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d106      	bne.n	8003132 <HAL_RCC_OscConfig+0x2ea>
 8003124:	4b64      	ldr	r3, [pc, #400]	; (80032b8 <HAL_RCC_OscConfig+0x470>)
 8003126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003128:	4a63      	ldr	r2, [pc, #396]	; (80032b8 <HAL_RCC_OscConfig+0x470>)
 800312a:	f043 0301 	orr.w	r3, r3, #1
 800312e:	6713      	str	r3, [r2, #112]	; 0x70
 8003130:	e01c      	b.n	800316c <HAL_RCC_OscConfig+0x324>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	2b05      	cmp	r3, #5
 8003138:	d10c      	bne.n	8003154 <HAL_RCC_OscConfig+0x30c>
 800313a:	4b5f      	ldr	r3, [pc, #380]	; (80032b8 <HAL_RCC_OscConfig+0x470>)
 800313c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800313e:	4a5e      	ldr	r2, [pc, #376]	; (80032b8 <HAL_RCC_OscConfig+0x470>)
 8003140:	f043 0304 	orr.w	r3, r3, #4
 8003144:	6713      	str	r3, [r2, #112]	; 0x70
 8003146:	4b5c      	ldr	r3, [pc, #368]	; (80032b8 <HAL_RCC_OscConfig+0x470>)
 8003148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314a:	4a5b      	ldr	r2, [pc, #364]	; (80032b8 <HAL_RCC_OscConfig+0x470>)
 800314c:	f043 0301 	orr.w	r3, r3, #1
 8003150:	6713      	str	r3, [r2, #112]	; 0x70
 8003152:	e00b      	b.n	800316c <HAL_RCC_OscConfig+0x324>
 8003154:	4b58      	ldr	r3, [pc, #352]	; (80032b8 <HAL_RCC_OscConfig+0x470>)
 8003156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003158:	4a57      	ldr	r2, [pc, #348]	; (80032b8 <HAL_RCC_OscConfig+0x470>)
 800315a:	f023 0301 	bic.w	r3, r3, #1
 800315e:	6713      	str	r3, [r2, #112]	; 0x70
 8003160:	4b55      	ldr	r3, [pc, #340]	; (80032b8 <HAL_RCC_OscConfig+0x470>)
 8003162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003164:	4a54      	ldr	r2, [pc, #336]	; (80032b8 <HAL_RCC_OscConfig+0x470>)
 8003166:	f023 0304 	bic.w	r3, r3, #4
 800316a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d015      	beq.n	80031a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003174:	f7fe fef0 	bl	8001f58 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800317a:	e00a      	b.n	8003192 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800317c:	f7fe feec 	bl	8001f58 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	f241 3288 	movw	r2, #5000	; 0x1388
 800318a:	4293      	cmp	r3, r2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e0cb      	b.n	800332a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003192:	4b49      	ldr	r3, [pc, #292]	; (80032b8 <HAL_RCC_OscConfig+0x470>)
 8003194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d0ee      	beq.n	800317c <HAL_RCC_OscConfig+0x334>
 800319e:	e014      	b.n	80031ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031a0:	f7fe feda 	bl	8001f58 <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031a6:	e00a      	b.n	80031be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031a8:	f7fe fed6 	bl	8001f58 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e0b5      	b.n	800332a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031be:	4b3e      	ldr	r3, [pc, #248]	; (80032b8 <HAL_RCC_OscConfig+0x470>)
 80031c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1ee      	bne.n	80031a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031ca:	7dfb      	ldrb	r3, [r7, #23]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d105      	bne.n	80031dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031d0:	4b39      	ldr	r3, [pc, #228]	; (80032b8 <HAL_RCC_OscConfig+0x470>)
 80031d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d4:	4a38      	ldr	r2, [pc, #224]	; (80032b8 <HAL_RCC_OscConfig+0x470>)
 80031d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 80a1 	beq.w	8003328 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031e6:	4b34      	ldr	r3, [pc, #208]	; (80032b8 <HAL_RCC_OscConfig+0x470>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 030c 	and.w	r3, r3, #12
 80031ee:	2b08      	cmp	r3, #8
 80031f0:	d05c      	beq.n	80032ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d141      	bne.n	800327e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031fa:	4b31      	ldr	r3, [pc, #196]	; (80032c0 <HAL_RCC_OscConfig+0x478>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003200:	f7fe feaa 	bl	8001f58 <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003208:	f7fe fea6 	bl	8001f58 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e087      	b.n	800332a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800321a:	4b27      	ldr	r3, [pc, #156]	; (80032b8 <HAL_RCC_OscConfig+0x470>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1f0      	bne.n	8003208 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	69da      	ldr	r2, [r3, #28]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	431a      	orrs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003234:	019b      	lsls	r3, r3, #6
 8003236:	431a      	orrs	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323c:	085b      	lsrs	r3, r3, #1
 800323e:	3b01      	subs	r3, #1
 8003240:	041b      	lsls	r3, r3, #16
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003248:	061b      	lsls	r3, r3, #24
 800324a:	491b      	ldr	r1, [pc, #108]	; (80032b8 <HAL_RCC_OscConfig+0x470>)
 800324c:	4313      	orrs	r3, r2
 800324e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003250:	4b1b      	ldr	r3, [pc, #108]	; (80032c0 <HAL_RCC_OscConfig+0x478>)
 8003252:	2201      	movs	r2, #1
 8003254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003256:	f7fe fe7f 	bl	8001f58 <HAL_GetTick>
 800325a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800325c:	e008      	b.n	8003270 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800325e:	f7fe fe7b 	bl	8001f58 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e05c      	b.n	800332a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003270:	4b11      	ldr	r3, [pc, #68]	; (80032b8 <HAL_RCC_OscConfig+0x470>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d0f0      	beq.n	800325e <HAL_RCC_OscConfig+0x416>
 800327c:	e054      	b.n	8003328 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800327e:	4b10      	ldr	r3, [pc, #64]	; (80032c0 <HAL_RCC_OscConfig+0x478>)
 8003280:	2200      	movs	r2, #0
 8003282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003284:	f7fe fe68 	bl	8001f58 <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800328c:	f7fe fe64 	bl	8001f58 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e045      	b.n	800332a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800329e:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <HAL_RCC_OscConfig+0x470>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1f0      	bne.n	800328c <HAL_RCC_OscConfig+0x444>
 80032aa:	e03d      	b.n	8003328 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d107      	bne.n	80032c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e038      	b.n	800332a <HAL_RCC_OscConfig+0x4e2>
 80032b8:	40023800 	.word	0x40023800
 80032bc:	40007000 	.word	0x40007000
 80032c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032c4:	4b1b      	ldr	r3, [pc, #108]	; (8003334 <HAL_RCC_OscConfig+0x4ec>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d028      	beq.n	8003324 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032dc:	429a      	cmp	r2, r3
 80032de:	d121      	bne.n	8003324 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d11a      	bne.n	8003324 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032f4:	4013      	ands	r3, r2
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d111      	bne.n	8003324 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330a:	085b      	lsrs	r3, r3, #1
 800330c:	3b01      	subs	r3, #1
 800330e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003310:	429a      	cmp	r2, r3
 8003312:	d107      	bne.n	8003324 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003320:	429a      	cmp	r2, r3
 8003322:	d001      	beq.n	8003328 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e000      	b.n	800332a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3718      	adds	r7, #24
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40023800 	.word	0x40023800

08003338 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e0cc      	b.n	80034e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800334c:	4b68      	ldr	r3, [pc, #416]	; (80034f0 <HAL_RCC_ClockConfig+0x1b8>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0307 	and.w	r3, r3, #7
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	429a      	cmp	r2, r3
 8003358:	d90c      	bls.n	8003374 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800335a:	4b65      	ldr	r3, [pc, #404]	; (80034f0 <HAL_RCC_ClockConfig+0x1b8>)
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	b2d2      	uxtb	r2, r2
 8003360:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003362:	4b63      	ldr	r3, [pc, #396]	; (80034f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0307 	and.w	r3, r3, #7
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	429a      	cmp	r2, r3
 800336e:	d001      	beq.n	8003374 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e0b8      	b.n	80034e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d020      	beq.n	80033c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0304 	and.w	r3, r3, #4
 8003388:	2b00      	cmp	r3, #0
 800338a:	d005      	beq.n	8003398 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800338c:	4b59      	ldr	r3, [pc, #356]	; (80034f4 <HAL_RCC_ClockConfig+0x1bc>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	4a58      	ldr	r2, [pc, #352]	; (80034f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003392:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003396:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0308 	and.w	r3, r3, #8
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d005      	beq.n	80033b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033a4:	4b53      	ldr	r3, [pc, #332]	; (80034f4 <HAL_RCC_ClockConfig+0x1bc>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	4a52      	ldr	r2, [pc, #328]	; (80034f4 <HAL_RCC_ClockConfig+0x1bc>)
 80033aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033b0:	4b50      	ldr	r3, [pc, #320]	; (80034f4 <HAL_RCC_ClockConfig+0x1bc>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	494d      	ldr	r1, [pc, #308]	; (80034f4 <HAL_RCC_ClockConfig+0x1bc>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d044      	beq.n	8003458 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d107      	bne.n	80033e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033d6:	4b47      	ldr	r3, [pc, #284]	; (80034f4 <HAL_RCC_ClockConfig+0x1bc>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d119      	bne.n	8003416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e07f      	b.n	80034e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d003      	beq.n	80033f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033f2:	2b03      	cmp	r3, #3
 80033f4:	d107      	bne.n	8003406 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033f6:	4b3f      	ldr	r3, [pc, #252]	; (80034f4 <HAL_RCC_ClockConfig+0x1bc>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d109      	bne.n	8003416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e06f      	b.n	80034e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003406:	4b3b      	ldr	r3, [pc, #236]	; (80034f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e067      	b.n	80034e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003416:	4b37      	ldr	r3, [pc, #220]	; (80034f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f023 0203 	bic.w	r2, r3, #3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	4934      	ldr	r1, [pc, #208]	; (80034f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003424:	4313      	orrs	r3, r2
 8003426:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003428:	f7fe fd96 	bl	8001f58 <HAL_GetTick>
 800342c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800342e:	e00a      	b.n	8003446 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003430:	f7fe fd92 	bl	8001f58 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	f241 3288 	movw	r2, #5000	; 0x1388
 800343e:	4293      	cmp	r3, r2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e04f      	b.n	80034e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003446:	4b2b      	ldr	r3, [pc, #172]	; (80034f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f003 020c 	and.w	r2, r3, #12
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	429a      	cmp	r2, r3
 8003456:	d1eb      	bne.n	8003430 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003458:	4b25      	ldr	r3, [pc, #148]	; (80034f0 <HAL_RCC_ClockConfig+0x1b8>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0307 	and.w	r3, r3, #7
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	429a      	cmp	r2, r3
 8003464:	d20c      	bcs.n	8003480 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003466:	4b22      	ldr	r3, [pc, #136]	; (80034f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	b2d2      	uxtb	r2, r2
 800346c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800346e:	4b20      	ldr	r3, [pc, #128]	; (80034f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0307 	and.w	r3, r3, #7
 8003476:	683a      	ldr	r2, [r7, #0]
 8003478:	429a      	cmp	r2, r3
 800347a:	d001      	beq.n	8003480 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e032      	b.n	80034e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	2b00      	cmp	r3, #0
 800348a:	d008      	beq.n	800349e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800348c:	4b19      	ldr	r3, [pc, #100]	; (80034f4 <HAL_RCC_ClockConfig+0x1bc>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	4916      	ldr	r1, [pc, #88]	; (80034f4 <HAL_RCC_ClockConfig+0x1bc>)
 800349a:	4313      	orrs	r3, r2
 800349c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0308 	and.w	r3, r3, #8
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d009      	beq.n	80034be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034aa:	4b12      	ldr	r3, [pc, #72]	; (80034f4 <HAL_RCC_ClockConfig+0x1bc>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	490e      	ldr	r1, [pc, #56]	; (80034f4 <HAL_RCC_ClockConfig+0x1bc>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034be:	f000 f821 	bl	8003504 <HAL_RCC_GetSysClockFreq>
 80034c2:	4602      	mov	r2, r0
 80034c4:	4b0b      	ldr	r3, [pc, #44]	; (80034f4 <HAL_RCC_ClockConfig+0x1bc>)
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	091b      	lsrs	r3, r3, #4
 80034ca:	f003 030f 	and.w	r3, r3, #15
 80034ce:	490a      	ldr	r1, [pc, #40]	; (80034f8 <HAL_RCC_ClockConfig+0x1c0>)
 80034d0:	5ccb      	ldrb	r3, [r1, r3]
 80034d2:	fa22 f303 	lsr.w	r3, r2, r3
 80034d6:	4a09      	ldr	r2, [pc, #36]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 80034d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034da:	4b09      	ldr	r3, [pc, #36]	; (8003500 <HAL_RCC_ClockConfig+0x1c8>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fe fcf6 	bl	8001ed0 <HAL_InitTick>

  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	40023c00 	.word	0x40023c00
 80034f4:	40023800 	.word	0x40023800
 80034f8:	08005024 	.word	0x08005024
 80034fc:	20000000 	.word	0x20000000
 8003500:	20000004 	.word	0x20000004

08003504 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003504:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003508:	b090      	sub	sp, #64	; 0x40
 800350a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800350c:	2300      	movs	r3, #0
 800350e:	637b      	str	r3, [r7, #52]	; 0x34
 8003510:	2300      	movs	r3, #0
 8003512:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003514:	2300      	movs	r3, #0
 8003516:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003518:	2300      	movs	r3, #0
 800351a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800351c:	4b59      	ldr	r3, [pc, #356]	; (8003684 <HAL_RCC_GetSysClockFreq+0x180>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f003 030c 	and.w	r3, r3, #12
 8003524:	2b08      	cmp	r3, #8
 8003526:	d00d      	beq.n	8003544 <HAL_RCC_GetSysClockFreq+0x40>
 8003528:	2b08      	cmp	r3, #8
 800352a:	f200 80a1 	bhi.w	8003670 <HAL_RCC_GetSysClockFreq+0x16c>
 800352e:	2b00      	cmp	r3, #0
 8003530:	d002      	beq.n	8003538 <HAL_RCC_GetSysClockFreq+0x34>
 8003532:	2b04      	cmp	r3, #4
 8003534:	d003      	beq.n	800353e <HAL_RCC_GetSysClockFreq+0x3a>
 8003536:	e09b      	b.n	8003670 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003538:	4b53      	ldr	r3, [pc, #332]	; (8003688 <HAL_RCC_GetSysClockFreq+0x184>)
 800353a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800353c:	e09b      	b.n	8003676 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800353e:	4b53      	ldr	r3, [pc, #332]	; (800368c <HAL_RCC_GetSysClockFreq+0x188>)
 8003540:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003542:	e098      	b.n	8003676 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003544:	4b4f      	ldr	r3, [pc, #316]	; (8003684 <HAL_RCC_GetSysClockFreq+0x180>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800354c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800354e:	4b4d      	ldr	r3, [pc, #308]	; (8003684 <HAL_RCC_GetSysClockFreq+0x180>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d028      	beq.n	80035ac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800355a:	4b4a      	ldr	r3, [pc, #296]	; (8003684 <HAL_RCC_GetSysClockFreq+0x180>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	099b      	lsrs	r3, r3, #6
 8003560:	2200      	movs	r2, #0
 8003562:	623b      	str	r3, [r7, #32]
 8003564:	627a      	str	r2, [r7, #36]	; 0x24
 8003566:	6a3b      	ldr	r3, [r7, #32]
 8003568:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800356c:	2100      	movs	r1, #0
 800356e:	4b47      	ldr	r3, [pc, #284]	; (800368c <HAL_RCC_GetSysClockFreq+0x188>)
 8003570:	fb03 f201 	mul.w	r2, r3, r1
 8003574:	2300      	movs	r3, #0
 8003576:	fb00 f303 	mul.w	r3, r0, r3
 800357a:	4413      	add	r3, r2
 800357c:	4a43      	ldr	r2, [pc, #268]	; (800368c <HAL_RCC_GetSysClockFreq+0x188>)
 800357e:	fba0 1202 	umull	r1, r2, r0, r2
 8003582:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003584:	460a      	mov	r2, r1
 8003586:	62ba      	str	r2, [r7, #40]	; 0x28
 8003588:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800358a:	4413      	add	r3, r2
 800358c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800358e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003590:	2200      	movs	r2, #0
 8003592:	61bb      	str	r3, [r7, #24]
 8003594:	61fa      	str	r2, [r7, #28]
 8003596:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800359a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800359e:	f7fc fe77 	bl	8000290 <__aeabi_uldivmod>
 80035a2:	4602      	mov	r2, r0
 80035a4:	460b      	mov	r3, r1
 80035a6:	4613      	mov	r3, r2
 80035a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035aa:	e053      	b.n	8003654 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ac:	4b35      	ldr	r3, [pc, #212]	; (8003684 <HAL_RCC_GetSysClockFreq+0x180>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	099b      	lsrs	r3, r3, #6
 80035b2:	2200      	movs	r2, #0
 80035b4:	613b      	str	r3, [r7, #16]
 80035b6:	617a      	str	r2, [r7, #20]
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80035be:	f04f 0b00 	mov.w	fp, #0
 80035c2:	4652      	mov	r2, sl
 80035c4:	465b      	mov	r3, fp
 80035c6:	f04f 0000 	mov.w	r0, #0
 80035ca:	f04f 0100 	mov.w	r1, #0
 80035ce:	0159      	lsls	r1, r3, #5
 80035d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035d4:	0150      	lsls	r0, r2, #5
 80035d6:	4602      	mov	r2, r0
 80035d8:	460b      	mov	r3, r1
 80035da:	ebb2 080a 	subs.w	r8, r2, sl
 80035de:	eb63 090b 	sbc.w	r9, r3, fp
 80035e2:	f04f 0200 	mov.w	r2, #0
 80035e6:	f04f 0300 	mov.w	r3, #0
 80035ea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80035ee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80035f2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80035f6:	ebb2 0408 	subs.w	r4, r2, r8
 80035fa:	eb63 0509 	sbc.w	r5, r3, r9
 80035fe:	f04f 0200 	mov.w	r2, #0
 8003602:	f04f 0300 	mov.w	r3, #0
 8003606:	00eb      	lsls	r3, r5, #3
 8003608:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800360c:	00e2      	lsls	r2, r4, #3
 800360e:	4614      	mov	r4, r2
 8003610:	461d      	mov	r5, r3
 8003612:	eb14 030a 	adds.w	r3, r4, sl
 8003616:	603b      	str	r3, [r7, #0]
 8003618:	eb45 030b 	adc.w	r3, r5, fp
 800361c:	607b      	str	r3, [r7, #4]
 800361e:	f04f 0200 	mov.w	r2, #0
 8003622:	f04f 0300 	mov.w	r3, #0
 8003626:	e9d7 4500 	ldrd	r4, r5, [r7]
 800362a:	4629      	mov	r1, r5
 800362c:	028b      	lsls	r3, r1, #10
 800362e:	4621      	mov	r1, r4
 8003630:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003634:	4621      	mov	r1, r4
 8003636:	028a      	lsls	r2, r1, #10
 8003638:	4610      	mov	r0, r2
 800363a:	4619      	mov	r1, r3
 800363c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800363e:	2200      	movs	r2, #0
 8003640:	60bb      	str	r3, [r7, #8]
 8003642:	60fa      	str	r2, [r7, #12]
 8003644:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003648:	f7fc fe22 	bl	8000290 <__aeabi_uldivmod>
 800364c:	4602      	mov	r2, r0
 800364e:	460b      	mov	r3, r1
 8003650:	4613      	mov	r3, r2
 8003652:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003654:	4b0b      	ldr	r3, [pc, #44]	; (8003684 <HAL_RCC_GetSysClockFreq+0x180>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	0c1b      	lsrs	r3, r3, #16
 800365a:	f003 0303 	and.w	r3, r3, #3
 800365e:	3301      	adds	r3, #1
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003664:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003668:	fbb2 f3f3 	udiv	r3, r2, r3
 800366c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800366e:	e002      	b.n	8003676 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003670:	4b05      	ldr	r3, [pc, #20]	; (8003688 <HAL_RCC_GetSysClockFreq+0x184>)
 8003672:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003674:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003678:	4618      	mov	r0, r3
 800367a:	3740      	adds	r7, #64	; 0x40
 800367c:	46bd      	mov	sp, r7
 800367e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003682:	bf00      	nop
 8003684:	40023800 	.word	0x40023800
 8003688:	00f42400 	.word	0x00f42400
 800368c:	017d7840 	.word	0x017d7840

08003690 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003694:	4b03      	ldr	r3, [pc, #12]	; (80036a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003696:	681b      	ldr	r3, [r3, #0]
}
 8003698:	4618      	mov	r0, r3
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	20000000 	.word	0x20000000

080036a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036ac:	f7ff fff0 	bl	8003690 <HAL_RCC_GetHCLKFreq>
 80036b0:	4602      	mov	r2, r0
 80036b2:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	0a9b      	lsrs	r3, r3, #10
 80036b8:	f003 0307 	and.w	r3, r3, #7
 80036bc:	4903      	ldr	r1, [pc, #12]	; (80036cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80036be:	5ccb      	ldrb	r3, [r1, r3]
 80036c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40023800 	.word	0x40023800
 80036cc:	08005034 	.word	0x08005034

080036d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e041      	b.n	8003766 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d106      	bne.n	80036fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7fe fb78 	bl	8001dec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2202      	movs	r2, #2
 8003700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3304      	adds	r3, #4
 800370c:	4619      	mov	r1, r3
 800370e:	4610      	mov	r0, r2
 8003710:	f000 fac0 	bl	8003c94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
	...

08003770 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800377e:	b2db      	uxtb	r3, r3
 8003780:	2b01      	cmp	r3, #1
 8003782:	d001      	beq.n	8003788 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e044      	b.n	8003812 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2202      	movs	r2, #2
 800378c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68da      	ldr	r2, [r3, #12]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f042 0201 	orr.w	r2, r2, #1
 800379e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a1e      	ldr	r2, [pc, #120]	; (8003820 <HAL_TIM_Base_Start_IT+0xb0>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d018      	beq.n	80037dc <HAL_TIM_Base_Start_IT+0x6c>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037b2:	d013      	beq.n	80037dc <HAL_TIM_Base_Start_IT+0x6c>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a1a      	ldr	r2, [pc, #104]	; (8003824 <HAL_TIM_Base_Start_IT+0xb4>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d00e      	beq.n	80037dc <HAL_TIM_Base_Start_IT+0x6c>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a19      	ldr	r2, [pc, #100]	; (8003828 <HAL_TIM_Base_Start_IT+0xb8>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d009      	beq.n	80037dc <HAL_TIM_Base_Start_IT+0x6c>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a17      	ldr	r2, [pc, #92]	; (800382c <HAL_TIM_Base_Start_IT+0xbc>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d004      	beq.n	80037dc <HAL_TIM_Base_Start_IT+0x6c>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a16      	ldr	r2, [pc, #88]	; (8003830 <HAL_TIM_Base_Start_IT+0xc0>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d111      	bne.n	8003800 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2b06      	cmp	r3, #6
 80037ec:	d010      	beq.n	8003810 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f042 0201 	orr.w	r2, r2, #1
 80037fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037fe:	e007      	b.n	8003810 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 0201 	orr.w	r2, r2, #1
 800380e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3714      	adds	r7, #20
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	40010000 	.word	0x40010000
 8003824:	40000400 	.word	0x40000400
 8003828:	40000800 	.word	0x40000800
 800382c:	40000c00 	.word	0x40000c00
 8003830:	40014000 	.word	0x40014000

08003834 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68da      	ldr	r2, [r3, #12]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 0201 	bic.w	r2, r2, #1
 800384a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6a1a      	ldr	r2, [r3, #32]
 8003852:	f241 1311 	movw	r3, #4369	; 0x1111
 8003856:	4013      	ands	r3, r2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10f      	bne.n	800387c <HAL_TIM_Base_Stop_IT+0x48>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6a1a      	ldr	r2, [r3, #32]
 8003862:	f240 4344 	movw	r3, #1092	; 0x444
 8003866:	4013      	ands	r3, r2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d107      	bne.n	800387c <HAL_TIM_Base_Stop_IT+0x48>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 0201 	bic.w	r2, r2, #1
 800387a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr

08003892 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b082      	sub	sp, #8
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d122      	bne.n	80038ee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d11b      	bne.n	80038ee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f06f 0202 	mvn.w	r2, #2
 80038be:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	f003 0303 	and.w	r3, r3, #3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d003      	beq.n	80038dc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 f9bf 	bl	8003c58 <HAL_TIM_IC_CaptureCallback>
 80038da:	e005      	b.n	80038e8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 f9b1 	bl	8003c44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f9c2 	bl	8003c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	f003 0304 	and.w	r3, r3, #4
 80038f8:	2b04      	cmp	r3, #4
 80038fa:	d122      	bne.n	8003942 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	f003 0304 	and.w	r3, r3, #4
 8003906:	2b04      	cmp	r3, #4
 8003908:	d11b      	bne.n	8003942 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f06f 0204 	mvn.w	r2, #4
 8003912:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2202      	movs	r2, #2
 8003918:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003924:	2b00      	cmp	r3, #0
 8003926:	d003      	beq.n	8003930 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 f995 	bl	8003c58 <HAL_TIM_IC_CaptureCallback>
 800392e:	e005      	b.n	800393c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 f987 	bl	8003c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f998 	bl	8003c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	f003 0308 	and.w	r3, r3, #8
 800394c:	2b08      	cmp	r3, #8
 800394e:	d122      	bne.n	8003996 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	f003 0308 	and.w	r3, r3, #8
 800395a:	2b08      	cmp	r3, #8
 800395c:	d11b      	bne.n	8003996 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f06f 0208 	mvn.w	r2, #8
 8003966:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2204      	movs	r2, #4
 800396c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	69db      	ldr	r3, [r3, #28]
 8003974:	f003 0303 	and.w	r3, r3, #3
 8003978:	2b00      	cmp	r3, #0
 800397a:	d003      	beq.n	8003984 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 f96b 	bl	8003c58 <HAL_TIM_IC_CaptureCallback>
 8003982:	e005      	b.n	8003990 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 f95d 	bl	8003c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 f96e 	bl	8003c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	f003 0310 	and.w	r3, r3, #16
 80039a0:	2b10      	cmp	r3, #16
 80039a2:	d122      	bne.n	80039ea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	f003 0310 	and.w	r3, r3, #16
 80039ae:	2b10      	cmp	r3, #16
 80039b0:	d11b      	bne.n	80039ea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f06f 0210 	mvn.w	r2, #16
 80039ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2208      	movs	r2, #8
 80039c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	69db      	ldr	r3, [r3, #28]
 80039c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d003      	beq.n	80039d8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 f941 	bl	8003c58 <HAL_TIM_IC_CaptureCallback>
 80039d6:	e005      	b.n	80039e4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 f933 	bl	8003c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 f944 	bl	8003c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d10e      	bne.n	8003a16 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d107      	bne.n	8003a16 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f06f 0201 	mvn.w	r2, #1
 8003a0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 f90d 	bl	8003c30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a20:	2b80      	cmp	r3, #128	; 0x80
 8003a22:	d10e      	bne.n	8003a42 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a2e:	2b80      	cmp	r3, #128	; 0x80
 8003a30:	d107      	bne.n	8003a42 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 fabb 	bl	8003fb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a4c:	2b40      	cmp	r3, #64	; 0x40
 8003a4e:	d10e      	bne.n	8003a6e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a5a:	2b40      	cmp	r3, #64	; 0x40
 8003a5c:	d107      	bne.n	8003a6e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 f909 	bl	8003c80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	f003 0320 	and.w	r3, r3, #32
 8003a78:	2b20      	cmp	r3, #32
 8003a7a:	d10e      	bne.n	8003a9a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	f003 0320 	and.w	r3, r3, #32
 8003a86:	2b20      	cmp	r3, #32
 8003a88:	d107      	bne.n	8003a9a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f06f 0220 	mvn.w	r2, #32
 8003a92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 fa85 	bl	8003fa4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a9a:	bf00      	nop
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b084      	sub	sp, #16
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
 8003aaa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aac:	2300      	movs	r3, #0
 8003aae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d101      	bne.n	8003abe <HAL_TIM_ConfigClockSource+0x1c>
 8003aba:	2302      	movs	r3, #2
 8003abc:	e0b4      	b.n	8003c28 <HAL_TIM_ConfigClockSource+0x186>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2202      	movs	r2, #2
 8003aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003adc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ae4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68ba      	ldr	r2, [r7, #8]
 8003aec:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003af6:	d03e      	beq.n	8003b76 <HAL_TIM_ConfigClockSource+0xd4>
 8003af8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003afc:	f200 8087 	bhi.w	8003c0e <HAL_TIM_ConfigClockSource+0x16c>
 8003b00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b04:	f000 8086 	beq.w	8003c14 <HAL_TIM_ConfigClockSource+0x172>
 8003b08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b0c:	d87f      	bhi.n	8003c0e <HAL_TIM_ConfigClockSource+0x16c>
 8003b0e:	2b70      	cmp	r3, #112	; 0x70
 8003b10:	d01a      	beq.n	8003b48 <HAL_TIM_ConfigClockSource+0xa6>
 8003b12:	2b70      	cmp	r3, #112	; 0x70
 8003b14:	d87b      	bhi.n	8003c0e <HAL_TIM_ConfigClockSource+0x16c>
 8003b16:	2b60      	cmp	r3, #96	; 0x60
 8003b18:	d050      	beq.n	8003bbc <HAL_TIM_ConfigClockSource+0x11a>
 8003b1a:	2b60      	cmp	r3, #96	; 0x60
 8003b1c:	d877      	bhi.n	8003c0e <HAL_TIM_ConfigClockSource+0x16c>
 8003b1e:	2b50      	cmp	r3, #80	; 0x50
 8003b20:	d03c      	beq.n	8003b9c <HAL_TIM_ConfigClockSource+0xfa>
 8003b22:	2b50      	cmp	r3, #80	; 0x50
 8003b24:	d873      	bhi.n	8003c0e <HAL_TIM_ConfigClockSource+0x16c>
 8003b26:	2b40      	cmp	r3, #64	; 0x40
 8003b28:	d058      	beq.n	8003bdc <HAL_TIM_ConfigClockSource+0x13a>
 8003b2a:	2b40      	cmp	r3, #64	; 0x40
 8003b2c:	d86f      	bhi.n	8003c0e <HAL_TIM_ConfigClockSource+0x16c>
 8003b2e:	2b30      	cmp	r3, #48	; 0x30
 8003b30:	d064      	beq.n	8003bfc <HAL_TIM_ConfigClockSource+0x15a>
 8003b32:	2b30      	cmp	r3, #48	; 0x30
 8003b34:	d86b      	bhi.n	8003c0e <HAL_TIM_ConfigClockSource+0x16c>
 8003b36:	2b20      	cmp	r3, #32
 8003b38:	d060      	beq.n	8003bfc <HAL_TIM_ConfigClockSource+0x15a>
 8003b3a:	2b20      	cmp	r3, #32
 8003b3c:	d867      	bhi.n	8003c0e <HAL_TIM_ConfigClockSource+0x16c>
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d05c      	beq.n	8003bfc <HAL_TIM_ConfigClockSource+0x15a>
 8003b42:	2b10      	cmp	r3, #16
 8003b44:	d05a      	beq.n	8003bfc <HAL_TIM_ConfigClockSource+0x15a>
 8003b46:	e062      	b.n	8003c0e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6818      	ldr	r0, [r3, #0]
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	6899      	ldr	r1, [r3, #8]
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	f000 f996 	bl	8003e88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b6a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	609a      	str	r2, [r3, #8]
      break;
 8003b74:	e04f      	b.n	8003c16 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6818      	ldr	r0, [r3, #0]
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	6899      	ldr	r1, [r3, #8]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	f000 f97f 	bl	8003e88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	689a      	ldr	r2, [r3, #8]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b98:	609a      	str	r2, [r3, #8]
      break;
 8003b9a:	e03c      	b.n	8003c16 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6818      	ldr	r0, [r3, #0]
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	6859      	ldr	r1, [r3, #4]
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	461a      	mov	r2, r3
 8003baa:	f000 f8f3 	bl	8003d94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2150      	movs	r1, #80	; 0x50
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f000 f94c 	bl	8003e52 <TIM_ITRx_SetConfig>
      break;
 8003bba:	e02c      	b.n	8003c16 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6818      	ldr	r0, [r3, #0]
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	6859      	ldr	r1, [r3, #4]
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	461a      	mov	r2, r3
 8003bca:	f000 f912 	bl	8003df2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2160      	movs	r1, #96	; 0x60
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f000 f93c 	bl	8003e52 <TIM_ITRx_SetConfig>
      break;
 8003bda:	e01c      	b.n	8003c16 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6818      	ldr	r0, [r3, #0]
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	6859      	ldr	r1, [r3, #4]
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	461a      	mov	r2, r3
 8003bea:	f000 f8d3 	bl	8003d94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2140      	movs	r1, #64	; 0x40
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f000 f92c 	bl	8003e52 <TIM_ITRx_SetConfig>
      break;
 8003bfa:	e00c      	b.n	8003c16 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4619      	mov	r1, r3
 8003c06:	4610      	mov	r0, r2
 8003c08:	f000 f923 	bl	8003e52 <TIM_ITRx_SetConfig>
      break;
 8003c0c:	e003      	b.n	8003c16 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	73fb      	strb	r3, [r7, #15]
      break;
 8003c12:	e000      	b.n	8003c16 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c14:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a34      	ldr	r2, [pc, #208]	; (8003d78 <TIM_Base_SetConfig+0xe4>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d00f      	beq.n	8003ccc <TIM_Base_SetConfig+0x38>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cb2:	d00b      	beq.n	8003ccc <TIM_Base_SetConfig+0x38>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a31      	ldr	r2, [pc, #196]	; (8003d7c <TIM_Base_SetConfig+0xe8>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d007      	beq.n	8003ccc <TIM_Base_SetConfig+0x38>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a30      	ldr	r2, [pc, #192]	; (8003d80 <TIM_Base_SetConfig+0xec>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d003      	beq.n	8003ccc <TIM_Base_SetConfig+0x38>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a2f      	ldr	r2, [pc, #188]	; (8003d84 <TIM_Base_SetConfig+0xf0>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d108      	bne.n	8003cde <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a25      	ldr	r2, [pc, #148]	; (8003d78 <TIM_Base_SetConfig+0xe4>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d01b      	beq.n	8003d1e <TIM_Base_SetConfig+0x8a>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cec:	d017      	beq.n	8003d1e <TIM_Base_SetConfig+0x8a>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a22      	ldr	r2, [pc, #136]	; (8003d7c <TIM_Base_SetConfig+0xe8>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d013      	beq.n	8003d1e <TIM_Base_SetConfig+0x8a>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a21      	ldr	r2, [pc, #132]	; (8003d80 <TIM_Base_SetConfig+0xec>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d00f      	beq.n	8003d1e <TIM_Base_SetConfig+0x8a>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a20      	ldr	r2, [pc, #128]	; (8003d84 <TIM_Base_SetConfig+0xf0>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d00b      	beq.n	8003d1e <TIM_Base_SetConfig+0x8a>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a1f      	ldr	r2, [pc, #124]	; (8003d88 <TIM_Base_SetConfig+0xf4>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d007      	beq.n	8003d1e <TIM_Base_SetConfig+0x8a>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a1e      	ldr	r2, [pc, #120]	; (8003d8c <TIM_Base_SetConfig+0xf8>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d003      	beq.n	8003d1e <TIM_Base_SetConfig+0x8a>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a1d      	ldr	r2, [pc, #116]	; (8003d90 <TIM_Base_SetConfig+0xfc>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d108      	bne.n	8003d30 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a08      	ldr	r2, [pc, #32]	; (8003d78 <TIM_Base_SetConfig+0xe4>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d103      	bne.n	8003d64 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	691a      	ldr	r2, [r3, #16]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	615a      	str	r2, [r3, #20]
}
 8003d6a:	bf00      	nop
 8003d6c:	3714      	adds	r7, #20
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	40010000 	.word	0x40010000
 8003d7c:	40000400 	.word	0x40000400
 8003d80:	40000800 	.word	0x40000800
 8003d84:	40000c00 	.word	0x40000c00
 8003d88:	40014000 	.word	0x40014000
 8003d8c:	40014400 	.word	0x40014400
 8003d90:	40014800 	.word	0x40014800

08003d94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b087      	sub	sp, #28
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6a1b      	ldr	r3, [r3, #32]
 8003da4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	f023 0201 	bic.w	r2, r3, #1
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	011b      	lsls	r3, r3, #4
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	f023 030a 	bic.w	r3, r3, #10
 8003dd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	621a      	str	r2, [r3, #32]
}
 8003de6:	bf00      	nop
 8003de8:	371c      	adds	r7, #28
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr

08003df2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b087      	sub	sp, #28
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	60f8      	str	r0, [r7, #12]
 8003dfa:	60b9      	str	r1, [r7, #8]
 8003dfc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	f023 0210 	bic.w	r2, r3, #16
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	031b      	lsls	r3, r3, #12
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	011b      	lsls	r3, r3, #4
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	621a      	str	r2, [r3, #32]
}
 8003e46:	bf00      	nop
 8003e48:	371c      	adds	r7, #28
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr

08003e52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e52:	b480      	push	{r7}
 8003e54:	b085      	sub	sp, #20
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
 8003e5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e6a:	683a      	ldr	r2, [r7, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	f043 0307 	orr.w	r3, r3, #7
 8003e74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	609a      	str	r2, [r3, #8]
}
 8003e7c:	bf00      	nop
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b087      	sub	sp, #28
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
 8003e94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ea2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	021a      	lsls	r2, r3, #8
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	697a      	ldr	r2, [r7, #20]
 8003eba:	609a      	str	r2, [r3, #8]
}
 8003ebc:	bf00      	nop
 8003ebe:	371c      	adds	r7, #28
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d101      	bne.n	8003ee0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003edc:	2302      	movs	r3, #2
 8003ede:	e050      	b.n	8003f82 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2202      	movs	r2, #2
 8003eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a1c      	ldr	r2, [pc, #112]	; (8003f90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d018      	beq.n	8003f56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f2c:	d013      	beq.n	8003f56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a18      	ldr	r2, [pc, #96]	; (8003f94 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d00e      	beq.n	8003f56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a16      	ldr	r2, [pc, #88]	; (8003f98 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d009      	beq.n	8003f56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a15      	ldr	r2, [pc, #84]	; (8003f9c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d004      	beq.n	8003f56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a13      	ldr	r2, [pc, #76]	; (8003fa0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d10c      	bne.n	8003f70 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	68ba      	ldr	r2, [r7, #8]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3714      	adds	r7, #20
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	40010000 	.word	0x40010000
 8003f94:	40000400 	.word	0x40000400
 8003f98:	40000800 	.word	0x40000800
 8003f9c:	40000c00 	.word	0x40000c00
 8003fa0:	40014000 	.word	0x40014000

08003fa4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <siprintf>:
 8003fcc:	b40e      	push	{r1, r2, r3}
 8003fce:	b500      	push	{lr}
 8003fd0:	b09c      	sub	sp, #112	; 0x70
 8003fd2:	ab1d      	add	r3, sp, #116	; 0x74
 8003fd4:	9002      	str	r0, [sp, #8]
 8003fd6:	9006      	str	r0, [sp, #24]
 8003fd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003fdc:	4809      	ldr	r0, [pc, #36]	; (8004004 <siprintf+0x38>)
 8003fde:	9107      	str	r1, [sp, #28]
 8003fe0:	9104      	str	r1, [sp, #16]
 8003fe2:	4909      	ldr	r1, [pc, #36]	; (8004008 <siprintf+0x3c>)
 8003fe4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fe8:	9105      	str	r1, [sp, #20]
 8003fea:	6800      	ldr	r0, [r0, #0]
 8003fec:	9301      	str	r3, [sp, #4]
 8003fee:	a902      	add	r1, sp, #8
 8003ff0:	f000 f992 	bl	8004318 <_svfiprintf_r>
 8003ff4:	9b02      	ldr	r3, [sp, #8]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	701a      	strb	r2, [r3, #0]
 8003ffa:	b01c      	add	sp, #112	; 0x70
 8003ffc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004000:	b003      	add	sp, #12
 8004002:	4770      	bx	lr
 8004004:	20000058 	.word	0x20000058
 8004008:	ffff0208 	.word	0xffff0208

0800400c <memset>:
 800400c:	4402      	add	r2, r0
 800400e:	4603      	mov	r3, r0
 8004010:	4293      	cmp	r3, r2
 8004012:	d100      	bne.n	8004016 <memset+0xa>
 8004014:	4770      	bx	lr
 8004016:	f803 1b01 	strb.w	r1, [r3], #1
 800401a:	e7f9      	b.n	8004010 <memset+0x4>

0800401c <__errno>:
 800401c:	4b01      	ldr	r3, [pc, #4]	; (8004024 <__errno+0x8>)
 800401e:	6818      	ldr	r0, [r3, #0]
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	20000058 	.word	0x20000058

08004028 <__libc_init_array>:
 8004028:	b570      	push	{r4, r5, r6, lr}
 800402a:	4d0d      	ldr	r5, [pc, #52]	; (8004060 <__libc_init_array+0x38>)
 800402c:	4c0d      	ldr	r4, [pc, #52]	; (8004064 <__libc_init_array+0x3c>)
 800402e:	1b64      	subs	r4, r4, r5
 8004030:	10a4      	asrs	r4, r4, #2
 8004032:	2600      	movs	r6, #0
 8004034:	42a6      	cmp	r6, r4
 8004036:	d109      	bne.n	800404c <__libc_init_array+0x24>
 8004038:	4d0b      	ldr	r5, [pc, #44]	; (8004068 <__libc_init_array+0x40>)
 800403a:	4c0c      	ldr	r4, [pc, #48]	; (800406c <__libc_init_array+0x44>)
 800403c:	f000 fc6a 	bl	8004914 <_init>
 8004040:	1b64      	subs	r4, r4, r5
 8004042:	10a4      	asrs	r4, r4, #2
 8004044:	2600      	movs	r6, #0
 8004046:	42a6      	cmp	r6, r4
 8004048:	d105      	bne.n	8004056 <__libc_init_array+0x2e>
 800404a:	bd70      	pop	{r4, r5, r6, pc}
 800404c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004050:	4798      	blx	r3
 8004052:	3601      	adds	r6, #1
 8004054:	e7ee      	b.n	8004034 <__libc_init_array+0xc>
 8004056:	f855 3b04 	ldr.w	r3, [r5], #4
 800405a:	4798      	blx	r3
 800405c:	3601      	adds	r6, #1
 800405e:	e7f2      	b.n	8004046 <__libc_init_array+0x1e>
 8004060:	08005078 	.word	0x08005078
 8004064:	08005078 	.word	0x08005078
 8004068:	08005078 	.word	0x08005078
 800406c:	0800507c 	.word	0x0800507c

08004070 <__retarget_lock_acquire_recursive>:
 8004070:	4770      	bx	lr

08004072 <__retarget_lock_release_recursive>:
 8004072:	4770      	bx	lr

08004074 <_free_r>:
 8004074:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004076:	2900      	cmp	r1, #0
 8004078:	d044      	beq.n	8004104 <_free_r+0x90>
 800407a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800407e:	9001      	str	r0, [sp, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	f1a1 0404 	sub.w	r4, r1, #4
 8004086:	bfb8      	it	lt
 8004088:	18e4      	addlt	r4, r4, r3
 800408a:	f000 f8df 	bl	800424c <__malloc_lock>
 800408e:	4a1e      	ldr	r2, [pc, #120]	; (8004108 <_free_r+0x94>)
 8004090:	9801      	ldr	r0, [sp, #4]
 8004092:	6813      	ldr	r3, [r2, #0]
 8004094:	b933      	cbnz	r3, 80040a4 <_free_r+0x30>
 8004096:	6063      	str	r3, [r4, #4]
 8004098:	6014      	str	r4, [r2, #0]
 800409a:	b003      	add	sp, #12
 800409c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80040a0:	f000 b8da 	b.w	8004258 <__malloc_unlock>
 80040a4:	42a3      	cmp	r3, r4
 80040a6:	d908      	bls.n	80040ba <_free_r+0x46>
 80040a8:	6825      	ldr	r5, [r4, #0]
 80040aa:	1961      	adds	r1, r4, r5
 80040ac:	428b      	cmp	r3, r1
 80040ae:	bf01      	itttt	eq
 80040b0:	6819      	ldreq	r1, [r3, #0]
 80040b2:	685b      	ldreq	r3, [r3, #4]
 80040b4:	1949      	addeq	r1, r1, r5
 80040b6:	6021      	streq	r1, [r4, #0]
 80040b8:	e7ed      	b.n	8004096 <_free_r+0x22>
 80040ba:	461a      	mov	r2, r3
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	b10b      	cbz	r3, 80040c4 <_free_r+0x50>
 80040c0:	42a3      	cmp	r3, r4
 80040c2:	d9fa      	bls.n	80040ba <_free_r+0x46>
 80040c4:	6811      	ldr	r1, [r2, #0]
 80040c6:	1855      	adds	r5, r2, r1
 80040c8:	42a5      	cmp	r5, r4
 80040ca:	d10b      	bne.n	80040e4 <_free_r+0x70>
 80040cc:	6824      	ldr	r4, [r4, #0]
 80040ce:	4421      	add	r1, r4
 80040d0:	1854      	adds	r4, r2, r1
 80040d2:	42a3      	cmp	r3, r4
 80040d4:	6011      	str	r1, [r2, #0]
 80040d6:	d1e0      	bne.n	800409a <_free_r+0x26>
 80040d8:	681c      	ldr	r4, [r3, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	6053      	str	r3, [r2, #4]
 80040de:	440c      	add	r4, r1
 80040e0:	6014      	str	r4, [r2, #0]
 80040e2:	e7da      	b.n	800409a <_free_r+0x26>
 80040e4:	d902      	bls.n	80040ec <_free_r+0x78>
 80040e6:	230c      	movs	r3, #12
 80040e8:	6003      	str	r3, [r0, #0]
 80040ea:	e7d6      	b.n	800409a <_free_r+0x26>
 80040ec:	6825      	ldr	r5, [r4, #0]
 80040ee:	1961      	adds	r1, r4, r5
 80040f0:	428b      	cmp	r3, r1
 80040f2:	bf04      	itt	eq
 80040f4:	6819      	ldreq	r1, [r3, #0]
 80040f6:	685b      	ldreq	r3, [r3, #4]
 80040f8:	6063      	str	r3, [r4, #4]
 80040fa:	bf04      	itt	eq
 80040fc:	1949      	addeq	r1, r1, r5
 80040fe:	6021      	streq	r1, [r4, #0]
 8004100:	6054      	str	r4, [r2, #4]
 8004102:	e7ca      	b.n	800409a <_free_r+0x26>
 8004104:	b003      	add	sp, #12
 8004106:	bd30      	pop	{r4, r5, pc}
 8004108:	20000688 	.word	0x20000688

0800410c <sbrk_aligned>:
 800410c:	b570      	push	{r4, r5, r6, lr}
 800410e:	4e0e      	ldr	r6, [pc, #56]	; (8004148 <sbrk_aligned+0x3c>)
 8004110:	460c      	mov	r4, r1
 8004112:	6831      	ldr	r1, [r6, #0]
 8004114:	4605      	mov	r5, r0
 8004116:	b911      	cbnz	r1, 800411e <sbrk_aligned+0x12>
 8004118:	f000 fba6 	bl	8004868 <_sbrk_r>
 800411c:	6030      	str	r0, [r6, #0]
 800411e:	4621      	mov	r1, r4
 8004120:	4628      	mov	r0, r5
 8004122:	f000 fba1 	bl	8004868 <_sbrk_r>
 8004126:	1c43      	adds	r3, r0, #1
 8004128:	d00a      	beq.n	8004140 <sbrk_aligned+0x34>
 800412a:	1cc4      	adds	r4, r0, #3
 800412c:	f024 0403 	bic.w	r4, r4, #3
 8004130:	42a0      	cmp	r0, r4
 8004132:	d007      	beq.n	8004144 <sbrk_aligned+0x38>
 8004134:	1a21      	subs	r1, r4, r0
 8004136:	4628      	mov	r0, r5
 8004138:	f000 fb96 	bl	8004868 <_sbrk_r>
 800413c:	3001      	adds	r0, #1
 800413e:	d101      	bne.n	8004144 <sbrk_aligned+0x38>
 8004140:	f04f 34ff 	mov.w	r4, #4294967295
 8004144:	4620      	mov	r0, r4
 8004146:	bd70      	pop	{r4, r5, r6, pc}
 8004148:	2000068c 	.word	0x2000068c

0800414c <_malloc_r>:
 800414c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004150:	1ccd      	adds	r5, r1, #3
 8004152:	f025 0503 	bic.w	r5, r5, #3
 8004156:	3508      	adds	r5, #8
 8004158:	2d0c      	cmp	r5, #12
 800415a:	bf38      	it	cc
 800415c:	250c      	movcc	r5, #12
 800415e:	2d00      	cmp	r5, #0
 8004160:	4607      	mov	r7, r0
 8004162:	db01      	blt.n	8004168 <_malloc_r+0x1c>
 8004164:	42a9      	cmp	r1, r5
 8004166:	d905      	bls.n	8004174 <_malloc_r+0x28>
 8004168:	230c      	movs	r3, #12
 800416a:	603b      	str	r3, [r7, #0]
 800416c:	2600      	movs	r6, #0
 800416e:	4630      	mov	r0, r6
 8004170:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004174:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004248 <_malloc_r+0xfc>
 8004178:	f000 f868 	bl	800424c <__malloc_lock>
 800417c:	f8d8 3000 	ldr.w	r3, [r8]
 8004180:	461c      	mov	r4, r3
 8004182:	bb5c      	cbnz	r4, 80041dc <_malloc_r+0x90>
 8004184:	4629      	mov	r1, r5
 8004186:	4638      	mov	r0, r7
 8004188:	f7ff ffc0 	bl	800410c <sbrk_aligned>
 800418c:	1c43      	adds	r3, r0, #1
 800418e:	4604      	mov	r4, r0
 8004190:	d155      	bne.n	800423e <_malloc_r+0xf2>
 8004192:	f8d8 4000 	ldr.w	r4, [r8]
 8004196:	4626      	mov	r6, r4
 8004198:	2e00      	cmp	r6, #0
 800419a:	d145      	bne.n	8004228 <_malloc_r+0xdc>
 800419c:	2c00      	cmp	r4, #0
 800419e:	d048      	beq.n	8004232 <_malloc_r+0xe6>
 80041a0:	6823      	ldr	r3, [r4, #0]
 80041a2:	4631      	mov	r1, r6
 80041a4:	4638      	mov	r0, r7
 80041a6:	eb04 0903 	add.w	r9, r4, r3
 80041aa:	f000 fb5d 	bl	8004868 <_sbrk_r>
 80041ae:	4581      	cmp	r9, r0
 80041b0:	d13f      	bne.n	8004232 <_malloc_r+0xe6>
 80041b2:	6821      	ldr	r1, [r4, #0]
 80041b4:	1a6d      	subs	r5, r5, r1
 80041b6:	4629      	mov	r1, r5
 80041b8:	4638      	mov	r0, r7
 80041ba:	f7ff ffa7 	bl	800410c <sbrk_aligned>
 80041be:	3001      	adds	r0, #1
 80041c0:	d037      	beq.n	8004232 <_malloc_r+0xe6>
 80041c2:	6823      	ldr	r3, [r4, #0]
 80041c4:	442b      	add	r3, r5
 80041c6:	6023      	str	r3, [r4, #0]
 80041c8:	f8d8 3000 	ldr.w	r3, [r8]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d038      	beq.n	8004242 <_malloc_r+0xf6>
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	42a2      	cmp	r2, r4
 80041d4:	d12b      	bne.n	800422e <_malloc_r+0xe2>
 80041d6:	2200      	movs	r2, #0
 80041d8:	605a      	str	r2, [r3, #4]
 80041da:	e00f      	b.n	80041fc <_malloc_r+0xb0>
 80041dc:	6822      	ldr	r2, [r4, #0]
 80041de:	1b52      	subs	r2, r2, r5
 80041e0:	d41f      	bmi.n	8004222 <_malloc_r+0xd6>
 80041e2:	2a0b      	cmp	r2, #11
 80041e4:	d917      	bls.n	8004216 <_malloc_r+0xca>
 80041e6:	1961      	adds	r1, r4, r5
 80041e8:	42a3      	cmp	r3, r4
 80041ea:	6025      	str	r5, [r4, #0]
 80041ec:	bf18      	it	ne
 80041ee:	6059      	strne	r1, [r3, #4]
 80041f0:	6863      	ldr	r3, [r4, #4]
 80041f2:	bf08      	it	eq
 80041f4:	f8c8 1000 	streq.w	r1, [r8]
 80041f8:	5162      	str	r2, [r4, r5]
 80041fa:	604b      	str	r3, [r1, #4]
 80041fc:	4638      	mov	r0, r7
 80041fe:	f104 060b 	add.w	r6, r4, #11
 8004202:	f000 f829 	bl	8004258 <__malloc_unlock>
 8004206:	f026 0607 	bic.w	r6, r6, #7
 800420a:	1d23      	adds	r3, r4, #4
 800420c:	1af2      	subs	r2, r6, r3
 800420e:	d0ae      	beq.n	800416e <_malloc_r+0x22>
 8004210:	1b9b      	subs	r3, r3, r6
 8004212:	50a3      	str	r3, [r4, r2]
 8004214:	e7ab      	b.n	800416e <_malloc_r+0x22>
 8004216:	42a3      	cmp	r3, r4
 8004218:	6862      	ldr	r2, [r4, #4]
 800421a:	d1dd      	bne.n	80041d8 <_malloc_r+0x8c>
 800421c:	f8c8 2000 	str.w	r2, [r8]
 8004220:	e7ec      	b.n	80041fc <_malloc_r+0xb0>
 8004222:	4623      	mov	r3, r4
 8004224:	6864      	ldr	r4, [r4, #4]
 8004226:	e7ac      	b.n	8004182 <_malloc_r+0x36>
 8004228:	4634      	mov	r4, r6
 800422a:	6876      	ldr	r6, [r6, #4]
 800422c:	e7b4      	b.n	8004198 <_malloc_r+0x4c>
 800422e:	4613      	mov	r3, r2
 8004230:	e7cc      	b.n	80041cc <_malloc_r+0x80>
 8004232:	230c      	movs	r3, #12
 8004234:	603b      	str	r3, [r7, #0]
 8004236:	4638      	mov	r0, r7
 8004238:	f000 f80e 	bl	8004258 <__malloc_unlock>
 800423c:	e797      	b.n	800416e <_malloc_r+0x22>
 800423e:	6025      	str	r5, [r4, #0]
 8004240:	e7dc      	b.n	80041fc <_malloc_r+0xb0>
 8004242:	605b      	str	r3, [r3, #4]
 8004244:	deff      	udf	#255	; 0xff
 8004246:	bf00      	nop
 8004248:	20000688 	.word	0x20000688

0800424c <__malloc_lock>:
 800424c:	4801      	ldr	r0, [pc, #4]	; (8004254 <__malloc_lock+0x8>)
 800424e:	f7ff bf0f 	b.w	8004070 <__retarget_lock_acquire_recursive>
 8004252:	bf00      	nop
 8004254:	20000684 	.word	0x20000684

08004258 <__malloc_unlock>:
 8004258:	4801      	ldr	r0, [pc, #4]	; (8004260 <__malloc_unlock+0x8>)
 800425a:	f7ff bf0a 	b.w	8004072 <__retarget_lock_release_recursive>
 800425e:	bf00      	nop
 8004260:	20000684 	.word	0x20000684

08004264 <__ssputs_r>:
 8004264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004268:	688e      	ldr	r6, [r1, #8]
 800426a:	461f      	mov	r7, r3
 800426c:	42be      	cmp	r6, r7
 800426e:	680b      	ldr	r3, [r1, #0]
 8004270:	4682      	mov	sl, r0
 8004272:	460c      	mov	r4, r1
 8004274:	4690      	mov	r8, r2
 8004276:	d82c      	bhi.n	80042d2 <__ssputs_r+0x6e>
 8004278:	898a      	ldrh	r2, [r1, #12]
 800427a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800427e:	d026      	beq.n	80042ce <__ssputs_r+0x6a>
 8004280:	6965      	ldr	r5, [r4, #20]
 8004282:	6909      	ldr	r1, [r1, #16]
 8004284:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004288:	eba3 0901 	sub.w	r9, r3, r1
 800428c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004290:	1c7b      	adds	r3, r7, #1
 8004292:	444b      	add	r3, r9
 8004294:	106d      	asrs	r5, r5, #1
 8004296:	429d      	cmp	r5, r3
 8004298:	bf38      	it	cc
 800429a:	461d      	movcc	r5, r3
 800429c:	0553      	lsls	r3, r2, #21
 800429e:	d527      	bpl.n	80042f0 <__ssputs_r+0x8c>
 80042a0:	4629      	mov	r1, r5
 80042a2:	f7ff ff53 	bl	800414c <_malloc_r>
 80042a6:	4606      	mov	r6, r0
 80042a8:	b360      	cbz	r0, 8004304 <__ssputs_r+0xa0>
 80042aa:	6921      	ldr	r1, [r4, #16]
 80042ac:	464a      	mov	r2, r9
 80042ae:	f000 faeb 	bl	8004888 <memcpy>
 80042b2:	89a3      	ldrh	r3, [r4, #12]
 80042b4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80042b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042bc:	81a3      	strh	r3, [r4, #12]
 80042be:	6126      	str	r6, [r4, #16]
 80042c0:	6165      	str	r5, [r4, #20]
 80042c2:	444e      	add	r6, r9
 80042c4:	eba5 0509 	sub.w	r5, r5, r9
 80042c8:	6026      	str	r6, [r4, #0]
 80042ca:	60a5      	str	r5, [r4, #8]
 80042cc:	463e      	mov	r6, r7
 80042ce:	42be      	cmp	r6, r7
 80042d0:	d900      	bls.n	80042d4 <__ssputs_r+0x70>
 80042d2:	463e      	mov	r6, r7
 80042d4:	6820      	ldr	r0, [r4, #0]
 80042d6:	4632      	mov	r2, r6
 80042d8:	4641      	mov	r1, r8
 80042da:	f000 faab 	bl	8004834 <memmove>
 80042de:	68a3      	ldr	r3, [r4, #8]
 80042e0:	1b9b      	subs	r3, r3, r6
 80042e2:	60a3      	str	r3, [r4, #8]
 80042e4:	6823      	ldr	r3, [r4, #0]
 80042e6:	4433      	add	r3, r6
 80042e8:	6023      	str	r3, [r4, #0]
 80042ea:	2000      	movs	r0, #0
 80042ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042f0:	462a      	mov	r2, r5
 80042f2:	f000 fad7 	bl	80048a4 <_realloc_r>
 80042f6:	4606      	mov	r6, r0
 80042f8:	2800      	cmp	r0, #0
 80042fa:	d1e0      	bne.n	80042be <__ssputs_r+0x5a>
 80042fc:	6921      	ldr	r1, [r4, #16]
 80042fe:	4650      	mov	r0, sl
 8004300:	f7ff feb8 	bl	8004074 <_free_r>
 8004304:	230c      	movs	r3, #12
 8004306:	f8ca 3000 	str.w	r3, [sl]
 800430a:	89a3      	ldrh	r3, [r4, #12]
 800430c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004310:	81a3      	strh	r3, [r4, #12]
 8004312:	f04f 30ff 	mov.w	r0, #4294967295
 8004316:	e7e9      	b.n	80042ec <__ssputs_r+0x88>

08004318 <_svfiprintf_r>:
 8004318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800431c:	4698      	mov	r8, r3
 800431e:	898b      	ldrh	r3, [r1, #12]
 8004320:	061b      	lsls	r3, r3, #24
 8004322:	b09d      	sub	sp, #116	; 0x74
 8004324:	4607      	mov	r7, r0
 8004326:	460d      	mov	r5, r1
 8004328:	4614      	mov	r4, r2
 800432a:	d50e      	bpl.n	800434a <_svfiprintf_r+0x32>
 800432c:	690b      	ldr	r3, [r1, #16]
 800432e:	b963      	cbnz	r3, 800434a <_svfiprintf_r+0x32>
 8004330:	2140      	movs	r1, #64	; 0x40
 8004332:	f7ff ff0b 	bl	800414c <_malloc_r>
 8004336:	6028      	str	r0, [r5, #0]
 8004338:	6128      	str	r0, [r5, #16]
 800433a:	b920      	cbnz	r0, 8004346 <_svfiprintf_r+0x2e>
 800433c:	230c      	movs	r3, #12
 800433e:	603b      	str	r3, [r7, #0]
 8004340:	f04f 30ff 	mov.w	r0, #4294967295
 8004344:	e0d0      	b.n	80044e8 <_svfiprintf_r+0x1d0>
 8004346:	2340      	movs	r3, #64	; 0x40
 8004348:	616b      	str	r3, [r5, #20]
 800434a:	2300      	movs	r3, #0
 800434c:	9309      	str	r3, [sp, #36]	; 0x24
 800434e:	2320      	movs	r3, #32
 8004350:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004354:	f8cd 800c 	str.w	r8, [sp, #12]
 8004358:	2330      	movs	r3, #48	; 0x30
 800435a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004500 <_svfiprintf_r+0x1e8>
 800435e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004362:	f04f 0901 	mov.w	r9, #1
 8004366:	4623      	mov	r3, r4
 8004368:	469a      	mov	sl, r3
 800436a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800436e:	b10a      	cbz	r2, 8004374 <_svfiprintf_r+0x5c>
 8004370:	2a25      	cmp	r2, #37	; 0x25
 8004372:	d1f9      	bne.n	8004368 <_svfiprintf_r+0x50>
 8004374:	ebba 0b04 	subs.w	fp, sl, r4
 8004378:	d00b      	beq.n	8004392 <_svfiprintf_r+0x7a>
 800437a:	465b      	mov	r3, fp
 800437c:	4622      	mov	r2, r4
 800437e:	4629      	mov	r1, r5
 8004380:	4638      	mov	r0, r7
 8004382:	f7ff ff6f 	bl	8004264 <__ssputs_r>
 8004386:	3001      	adds	r0, #1
 8004388:	f000 80a9 	beq.w	80044de <_svfiprintf_r+0x1c6>
 800438c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800438e:	445a      	add	r2, fp
 8004390:	9209      	str	r2, [sp, #36]	; 0x24
 8004392:	f89a 3000 	ldrb.w	r3, [sl]
 8004396:	2b00      	cmp	r3, #0
 8004398:	f000 80a1 	beq.w	80044de <_svfiprintf_r+0x1c6>
 800439c:	2300      	movs	r3, #0
 800439e:	f04f 32ff 	mov.w	r2, #4294967295
 80043a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043a6:	f10a 0a01 	add.w	sl, sl, #1
 80043aa:	9304      	str	r3, [sp, #16]
 80043ac:	9307      	str	r3, [sp, #28]
 80043ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80043b2:	931a      	str	r3, [sp, #104]	; 0x68
 80043b4:	4654      	mov	r4, sl
 80043b6:	2205      	movs	r2, #5
 80043b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043bc:	4850      	ldr	r0, [pc, #320]	; (8004500 <_svfiprintf_r+0x1e8>)
 80043be:	f7fb ff17 	bl	80001f0 <memchr>
 80043c2:	9a04      	ldr	r2, [sp, #16]
 80043c4:	b9d8      	cbnz	r0, 80043fe <_svfiprintf_r+0xe6>
 80043c6:	06d0      	lsls	r0, r2, #27
 80043c8:	bf44      	itt	mi
 80043ca:	2320      	movmi	r3, #32
 80043cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043d0:	0711      	lsls	r1, r2, #28
 80043d2:	bf44      	itt	mi
 80043d4:	232b      	movmi	r3, #43	; 0x2b
 80043d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043da:	f89a 3000 	ldrb.w	r3, [sl]
 80043de:	2b2a      	cmp	r3, #42	; 0x2a
 80043e0:	d015      	beq.n	800440e <_svfiprintf_r+0xf6>
 80043e2:	9a07      	ldr	r2, [sp, #28]
 80043e4:	4654      	mov	r4, sl
 80043e6:	2000      	movs	r0, #0
 80043e8:	f04f 0c0a 	mov.w	ip, #10
 80043ec:	4621      	mov	r1, r4
 80043ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043f2:	3b30      	subs	r3, #48	; 0x30
 80043f4:	2b09      	cmp	r3, #9
 80043f6:	d94d      	bls.n	8004494 <_svfiprintf_r+0x17c>
 80043f8:	b1b0      	cbz	r0, 8004428 <_svfiprintf_r+0x110>
 80043fa:	9207      	str	r2, [sp, #28]
 80043fc:	e014      	b.n	8004428 <_svfiprintf_r+0x110>
 80043fe:	eba0 0308 	sub.w	r3, r0, r8
 8004402:	fa09 f303 	lsl.w	r3, r9, r3
 8004406:	4313      	orrs	r3, r2
 8004408:	9304      	str	r3, [sp, #16]
 800440a:	46a2      	mov	sl, r4
 800440c:	e7d2      	b.n	80043b4 <_svfiprintf_r+0x9c>
 800440e:	9b03      	ldr	r3, [sp, #12]
 8004410:	1d19      	adds	r1, r3, #4
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	9103      	str	r1, [sp, #12]
 8004416:	2b00      	cmp	r3, #0
 8004418:	bfbb      	ittet	lt
 800441a:	425b      	neglt	r3, r3
 800441c:	f042 0202 	orrlt.w	r2, r2, #2
 8004420:	9307      	strge	r3, [sp, #28]
 8004422:	9307      	strlt	r3, [sp, #28]
 8004424:	bfb8      	it	lt
 8004426:	9204      	strlt	r2, [sp, #16]
 8004428:	7823      	ldrb	r3, [r4, #0]
 800442a:	2b2e      	cmp	r3, #46	; 0x2e
 800442c:	d10c      	bne.n	8004448 <_svfiprintf_r+0x130>
 800442e:	7863      	ldrb	r3, [r4, #1]
 8004430:	2b2a      	cmp	r3, #42	; 0x2a
 8004432:	d134      	bne.n	800449e <_svfiprintf_r+0x186>
 8004434:	9b03      	ldr	r3, [sp, #12]
 8004436:	1d1a      	adds	r2, r3, #4
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	9203      	str	r2, [sp, #12]
 800443c:	2b00      	cmp	r3, #0
 800443e:	bfb8      	it	lt
 8004440:	f04f 33ff 	movlt.w	r3, #4294967295
 8004444:	3402      	adds	r4, #2
 8004446:	9305      	str	r3, [sp, #20]
 8004448:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004510 <_svfiprintf_r+0x1f8>
 800444c:	7821      	ldrb	r1, [r4, #0]
 800444e:	2203      	movs	r2, #3
 8004450:	4650      	mov	r0, sl
 8004452:	f7fb fecd 	bl	80001f0 <memchr>
 8004456:	b138      	cbz	r0, 8004468 <_svfiprintf_r+0x150>
 8004458:	9b04      	ldr	r3, [sp, #16]
 800445a:	eba0 000a 	sub.w	r0, r0, sl
 800445e:	2240      	movs	r2, #64	; 0x40
 8004460:	4082      	lsls	r2, r0
 8004462:	4313      	orrs	r3, r2
 8004464:	3401      	adds	r4, #1
 8004466:	9304      	str	r3, [sp, #16]
 8004468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800446c:	4825      	ldr	r0, [pc, #148]	; (8004504 <_svfiprintf_r+0x1ec>)
 800446e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004472:	2206      	movs	r2, #6
 8004474:	f7fb febc 	bl	80001f0 <memchr>
 8004478:	2800      	cmp	r0, #0
 800447a:	d038      	beq.n	80044ee <_svfiprintf_r+0x1d6>
 800447c:	4b22      	ldr	r3, [pc, #136]	; (8004508 <_svfiprintf_r+0x1f0>)
 800447e:	bb1b      	cbnz	r3, 80044c8 <_svfiprintf_r+0x1b0>
 8004480:	9b03      	ldr	r3, [sp, #12]
 8004482:	3307      	adds	r3, #7
 8004484:	f023 0307 	bic.w	r3, r3, #7
 8004488:	3308      	adds	r3, #8
 800448a:	9303      	str	r3, [sp, #12]
 800448c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800448e:	4433      	add	r3, r6
 8004490:	9309      	str	r3, [sp, #36]	; 0x24
 8004492:	e768      	b.n	8004366 <_svfiprintf_r+0x4e>
 8004494:	fb0c 3202 	mla	r2, ip, r2, r3
 8004498:	460c      	mov	r4, r1
 800449a:	2001      	movs	r0, #1
 800449c:	e7a6      	b.n	80043ec <_svfiprintf_r+0xd4>
 800449e:	2300      	movs	r3, #0
 80044a0:	3401      	adds	r4, #1
 80044a2:	9305      	str	r3, [sp, #20]
 80044a4:	4619      	mov	r1, r3
 80044a6:	f04f 0c0a 	mov.w	ip, #10
 80044aa:	4620      	mov	r0, r4
 80044ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044b0:	3a30      	subs	r2, #48	; 0x30
 80044b2:	2a09      	cmp	r2, #9
 80044b4:	d903      	bls.n	80044be <_svfiprintf_r+0x1a6>
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d0c6      	beq.n	8004448 <_svfiprintf_r+0x130>
 80044ba:	9105      	str	r1, [sp, #20]
 80044bc:	e7c4      	b.n	8004448 <_svfiprintf_r+0x130>
 80044be:	fb0c 2101 	mla	r1, ip, r1, r2
 80044c2:	4604      	mov	r4, r0
 80044c4:	2301      	movs	r3, #1
 80044c6:	e7f0      	b.n	80044aa <_svfiprintf_r+0x192>
 80044c8:	ab03      	add	r3, sp, #12
 80044ca:	9300      	str	r3, [sp, #0]
 80044cc:	462a      	mov	r2, r5
 80044ce:	4b0f      	ldr	r3, [pc, #60]	; (800450c <_svfiprintf_r+0x1f4>)
 80044d0:	a904      	add	r1, sp, #16
 80044d2:	4638      	mov	r0, r7
 80044d4:	f3af 8000 	nop.w
 80044d8:	1c42      	adds	r2, r0, #1
 80044da:	4606      	mov	r6, r0
 80044dc:	d1d6      	bne.n	800448c <_svfiprintf_r+0x174>
 80044de:	89ab      	ldrh	r3, [r5, #12]
 80044e0:	065b      	lsls	r3, r3, #25
 80044e2:	f53f af2d 	bmi.w	8004340 <_svfiprintf_r+0x28>
 80044e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80044e8:	b01d      	add	sp, #116	; 0x74
 80044ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044ee:	ab03      	add	r3, sp, #12
 80044f0:	9300      	str	r3, [sp, #0]
 80044f2:	462a      	mov	r2, r5
 80044f4:	4b05      	ldr	r3, [pc, #20]	; (800450c <_svfiprintf_r+0x1f4>)
 80044f6:	a904      	add	r1, sp, #16
 80044f8:	4638      	mov	r0, r7
 80044fa:	f000 f879 	bl	80045f0 <_printf_i>
 80044fe:	e7eb      	b.n	80044d8 <_svfiprintf_r+0x1c0>
 8004500:	0800503c 	.word	0x0800503c
 8004504:	08005046 	.word	0x08005046
 8004508:	00000000 	.word	0x00000000
 800450c:	08004265 	.word	0x08004265
 8004510:	08005042 	.word	0x08005042

08004514 <_printf_common>:
 8004514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004518:	4616      	mov	r6, r2
 800451a:	4699      	mov	r9, r3
 800451c:	688a      	ldr	r2, [r1, #8]
 800451e:	690b      	ldr	r3, [r1, #16]
 8004520:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004524:	4293      	cmp	r3, r2
 8004526:	bfb8      	it	lt
 8004528:	4613      	movlt	r3, r2
 800452a:	6033      	str	r3, [r6, #0]
 800452c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004530:	4607      	mov	r7, r0
 8004532:	460c      	mov	r4, r1
 8004534:	b10a      	cbz	r2, 800453a <_printf_common+0x26>
 8004536:	3301      	adds	r3, #1
 8004538:	6033      	str	r3, [r6, #0]
 800453a:	6823      	ldr	r3, [r4, #0]
 800453c:	0699      	lsls	r1, r3, #26
 800453e:	bf42      	ittt	mi
 8004540:	6833      	ldrmi	r3, [r6, #0]
 8004542:	3302      	addmi	r3, #2
 8004544:	6033      	strmi	r3, [r6, #0]
 8004546:	6825      	ldr	r5, [r4, #0]
 8004548:	f015 0506 	ands.w	r5, r5, #6
 800454c:	d106      	bne.n	800455c <_printf_common+0x48>
 800454e:	f104 0a19 	add.w	sl, r4, #25
 8004552:	68e3      	ldr	r3, [r4, #12]
 8004554:	6832      	ldr	r2, [r6, #0]
 8004556:	1a9b      	subs	r3, r3, r2
 8004558:	42ab      	cmp	r3, r5
 800455a:	dc26      	bgt.n	80045aa <_printf_common+0x96>
 800455c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004560:	1e13      	subs	r3, r2, #0
 8004562:	6822      	ldr	r2, [r4, #0]
 8004564:	bf18      	it	ne
 8004566:	2301      	movne	r3, #1
 8004568:	0692      	lsls	r2, r2, #26
 800456a:	d42b      	bmi.n	80045c4 <_printf_common+0xb0>
 800456c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004570:	4649      	mov	r1, r9
 8004572:	4638      	mov	r0, r7
 8004574:	47c0      	blx	r8
 8004576:	3001      	adds	r0, #1
 8004578:	d01e      	beq.n	80045b8 <_printf_common+0xa4>
 800457a:	6823      	ldr	r3, [r4, #0]
 800457c:	6922      	ldr	r2, [r4, #16]
 800457e:	f003 0306 	and.w	r3, r3, #6
 8004582:	2b04      	cmp	r3, #4
 8004584:	bf02      	ittt	eq
 8004586:	68e5      	ldreq	r5, [r4, #12]
 8004588:	6833      	ldreq	r3, [r6, #0]
 800458a:	1aed      	subeq	r5, r5, r3
 800458c:	68a3      	ldr	r3, [r4, #8]
 800458e:	bf0c      	ite	eq
 8004590:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004594:	2500      	movne	r5, #0
 8004596:	4293      	cmp	r3, r2
 8004598:	bfc4      	itt	gt
 800459a:	1a9b      	subgt	r3, r3, r2
 800459c:	18ed      	addgt	r5, r5, r3
 800459e:	2600      	movs	r6, #0
 80045a0:	341a      	adds	r4, #26
 80045a2:	42b5      	cmp	r5, r6
 80045a4:	d11a      	bne.n	80045dc <_printf_common+0xc8>
 80045a6:	2000      	movs	r0, #0
 80045a8:	e008      	b.n	80045bc <_printf_common+0xa8>
 80045aa:	2301      	movs	r3, #1
 80045ac:	4652      	mov	r2, sl
 80045ae:	4649      	mov	r1, r9
 80045b0:	4638      	mov	r0, r7
 80045b2:	47c0      	blx	r8
 80045b4:	3001      	adds	r0, #1
 80045b6:	d103      	bne.n	80045c0 <_printf_common+0xac>
 80045b8:	f04f 30ff 	mov.w	r0, #4294967295
 80045bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045c0:	3501      	adds	r5, #1
 80045c2:	e7c6      	b.n	8004552 <_printf_common+0x3e>
 80045c4:	18e1      	adds	r1, r4, r3
 80045c6:	1c5a      	adds	r2, r3, #1
 80045c8:	2030      	movs	r0, #48	; 0x30
 80045ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045ce:	4422      	add	r2, r4
 80045d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80045d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045d8:	3302      	adds	r3, #2
 80045da:	e7c7      	b.n	800456c <_printf_common+0x58>
 80045dc:	2301      	movs	r3, #1
 80045de:	4622      	mov	r2, r4
 80045e0:	4649      	mov	r1, r9
 80045e2:	4638      	mov	r0, r7
 80045e4:	47c0      	blx	r8
 80045e6:	3001      	adds	r0, #1
 80045e8:	d0e6      	beq.n	80045b8 <_printf_common+0xa4>
 80045ea:	3601      	adds	r6, #1
 80045ec:	e7d9      	b.n	80045a2 <_printf_common+0x8e>
	...

080045f0 <_printf_i>:
 80045f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045f4:	7e0f      	ldrb	r7, [r1, #24]
 80045f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80045f8:	2f78      	cmp	r7, #120	; 0x78
 80045fa:	4691      	mov	r9, r2
 80045fc:	4680      	mov	r8, r0
 80045fe:	460c      	mov	r4, r1
 8004600:	469a      	mov	sl, r3
 8004602:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004606:	d807      	bhi.n	8004618 <_printf_i+0x28>
 8004608:	2f62      	cmp	r7, #98	; 0x62
 800460a:	d80a      	bhi.n	8004622 <_printf_i+0x32>
 800460c:	2f00      	cmp	r7, #0
 800460e:	f000 80d4 	beq.w	80047ba <_printf_i+0x1ca>
 8004612:	2f58      	cmp	r7, #88	; 0x58
 8004614:	f000 80c0 	beq.w	8004798 <_printf_i+0x1a8>
 8004618:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800461c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004620:	e03a      	b.n	8004698 <_printf_i+0xa8>
 8004622:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004626:	2b15      	cmp	r3, #21
 8004628:	d8f6      	bhi.n	8004618 <_printf_i+0x28>
 800462a:	a101      	add	r1, pc, #4	; (adr r1, 8004630 <_printf_i+0x40>)
 800462c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004630:	08004689 	.word	0x08004689
 8004634:	0800469d 	.word	0x0800469d
 8004638:	08004619 	.word	0x08004619
 800463c:	08004619 	.word	0x08004619
 8004640:	08004619 	.word	0x08004619
 8004644:	08004619 	.word	0x08004619
 8004648:	0800469d 	.word	0x0800469d
 800464c:	08004619 	.word	0x08004619
 8004650:	08004619 	.word	0x08004619
 8004654:	08004619 	.word	0x08004619
 8004658:	08004619 	.word	0x08004619
 800465c:	080047a1 	.word	0x080047a1
 8004660:	080046c9 	.word	0x080046c9
 8004664:	0800475b 	.word	0x0800475b
 8004668:	08004619 	.word	0x08004619
 800466c:	08004619 	.word	0x08004619
 8004670:	080047c3 	.word	0x080047c3
 8004674:	08004619 	.word	0x08004619
 8004678:	080046c9 	.word	0x080046c9
 800467c:	08004619 	.word	0x08004619
 8004680:	08004619 	.word	0x08004619
 8004684:	08004763 	.word	0x08004763
 8004688:	682b      	ldr	r3, [r5, #0]
 800468a:	1d1a      	adds	r2, r3, #4
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	602a      	str	r2, [r5, #0]
 8004690:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004694:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004698:	2301      	movs	r3, #1
 800469a:	e09f      	b.n	80047dc <_printf_i+0x1ec>
 800469c:	6820      	ldr	r0, [r4, #0]
 800469e:	682b      	ldr	r3, [r5, #0]
 80046a0:	0607      	lsls	r7, r0, #24
 80046a2:	f103 0104 	add.w	r1, r3, #4
 80046a6:	6029      	str	r1, [r5, #0]
 80046a8:	d501      	bpl.n	80046ae <_printf_i+0xbe>
 80046aa:	681e      	ldr	r6, [r3, #0]
 80046ac:	e003      	b.n	80046b6 <_printf_i+0xc6>
 80046ae:	0646      	lsls	r6, r0, #25
 80046b0:	d5fb      	bpl.n	80046aa <_printf_i+0xba>
 80046b2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80046b6:	2e00      	cmp	r6, #0
 80046b8:	da03      	bge.n	80046c2 <_printf_i+0xd2>
 80046ba:	232d      	movs	r3, #45	; 0x2d
 80046bc:	4276      	negs	r6, r6
 80046be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046c2:	485a      	ldr	r0, [pc, #360]	; (800482c <_printf_i+0x23c>)
 80046c4:	230a      	movs	r3, #10
 80046c6:	e012      	b.n	80046ee <_printf_i+0xfe>
 80046c8:	682b      	ldr	r3, [r5, #0]
 80046ca:	6820      	ldr	r0, [r4, #0]
 80046cc:	1d19      	adds	r1, r3, #4
 80046ce:	6029      	str	r1, [r5, #0]
 80046d0:	0605      	lsls	r5, r0, #24
 80046d2:	d501      	bpl.n	80046d8 <_printf_i+0xe8>
 80046d4:	681e      	ldr	r6, [r3, #0]
 80046d6:	e002      	b.n	80046de <_printf_i+0xee>
 80046d8:	0641      	lsls	r1, r0, #25
 80046da:	d5fb      	bpl.n	80046d4 <_printf_i+0xe4>
 80046dc:	881e      	ldrh	r6, [r3, #0]
 80046de:	4853      	ldr	r0, [pc, #332]	; (800482c <_printf_i+0x23c>)
 80046e0:	2f6f      	cmp	r7, #111	; 0x6f
 80046e2:	bf0c      	ite	eq
 80046e4:	2308      	moveq	r3, #8
 80046e6:	230a      	movne	r3, #10
 80046e8:	2100      	movs	r1, #0
 80046ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80046ee:	6865      	ldr	r5, [r4, #4]
 80046f0:	60a5      	str	r5, [r4, #8]
 80046f2:	2d00      	cmp	r5, #0
 80046f4:	bfa2      	ittt	ge
 80046f6:	6821      	ldrge	r1, [r4, #0]
 80046f8:	f021 0104 	bicge.w	r1, r1, #4
 80046fc:	6021      	strge	r1, [r4, #0]
 80046fe:	b90e      	cbnz	r6, 8004704 <_printf_i+0x114>
 8004700:	2d00      	cmp	r5, #0
 8004702:	d04b      	beq.n	800479c <_printf_i+0x1ac>
 8004704:	4615      	mov	r5, r2
 8004706:	fbb6 f1f3 	udiv	r1, r6, r3
 800470a:	fb03 6711 	mls	r7, r3, r1, r6
 800470e:	5dc7      	ldrb	r7, [r0, r7]
 8004710:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004714:	4637      	mov	r7, r6
 8004716:	42bb      	cmp	r3, r7
 8004718:	460e      	mov	r6, r1
 800471a:	d9f4      	bls.n	8004706 <_printf_i+0x116>
 800471c:	2b08      	cmp	r3, #8
 800471e:	d10b      	bne.n	8004738 <_printf_i+0x148>
 8004720:	6823      	ldr	r3, [r4, #0]
 8004722:	07de      	lsls	r6, r3, #31
 8004724:	d508      	bpl.n	8004738 <_printf_i+0x148>
 8004726:	6923      	ldr	r3, [r4, #16]
 8004728:	6861      	ldr	r1, [r4, #4]
 800472a:	4299      	cmp	r1, r3
 800472c:	bfde      	ittt	le
 800472e:	2330      	movle	r3, #48	; 0x30
 8004730:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004734:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004738:	1b52      	subs	r2, r2, r5
 800473a:	6122      	str	r2, [r4, #16]
 800473c:	f8cd a000 	str.w	sl, [sp]
 8004740:	464b      	mov	r3, r9
 8004742:	aa03      	add	r2, sp, #12
 8004744:	4621      	mov	r1, r4
 8004746:	4640      	mov	r0, r8
 8004748:	f7ff fee4 	bl	8004514 <_printf_common>
 800474c:	3001      	adds	r0, #1
 800474e:	d14a      	bne.n	80047e6 <_printf_i+0x1f6>
 8004750:	f04f 30ff 	mov.w	r0, #4294967295
 8004754:	b004      	add	sp, #16
 8004756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800475a:	6823      	ldr	r3, [r4, #0]
 800475c:	f043 0320 	orr.w	r3, r3, #32
 8004760:	6023      	str	r3, [r4, #0]
 8004762:	4833      	ldr	r0, [pc, #204]	; (8004830 <_printf_i+0x240>)
 8004764:	2778      	movs	r7, #120	; 0x78
 8004766:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800476a:	6823      	ldr	r3, [r4, #0]
 800476c:	6829      	ldr	r1, [r5, #0]
 800476e:	061f      	lsls	r7, r3, #24
 8004770:	f851 6b04 	ldr.w	r6, [r1], #4
 8004774:	d402      	bmi.n	800477c <_printf_i+0x18c>
 8004776:	065f      	lsls	r7, r3, #25
 8004778:	bf48      	it	mi
 800477a:	b2b6      	uxthmi	r6, r6
 800477c:	07df      	lsls	r7, r3, #31
 800477e:	bf48      	it	mi
 8004780:	f043 0320 	orrmi.w	r3, r3, #32
 8004784:	6029      	str	r1, [r5, #0]
 8004786:	bf48      	it	mi
 8004788:	6023      	strmi	r3, [r4, #0]
 800478a:	b91e      	cbnz	r6, 8004794 <_printf_i+0x1a4>
 800478c:	6823      	ldr	r3, [r4, #0]
 800478e:	f023 0320 	bic.w	r3, r3, #32
 8004792:	6023      	str	r3, [r4, #0]
 8004794:	2310      	movs	r3, #16
 8004796:	e7a7      	b.n	80046e8 <_printf_i+0xf8>
 8004798:	4824      	ldr	r0, [pc, #144]	; (800482c <_printf_i+0x23c>)
 800479a:	e7e4      	b.n	8004766 <_printf_i+0x176>
 800479c:	4615      	mov	r5, r2
 800479e:	e7bd      	b.n	800471c <_printf_i+0x12c>
 80047a0:	682b      	ldr	r3, [r5, #0]
 80047a2:	6826      	ldr	r6, [r4, #0]
 80047a4:	6961      	ldr	r1, [r4, #20]
 80047a6:	1d18      	adds	r0, r3, #4
 80047a8:	6028      	str	r0, [r5, #0]
 80047aa:	0635      	lsls	r5, r6, #24
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	d501      	bpl.n	80047b4 <_printf_i+0x1c4>
 80047b0:	6019      	str	r1, [r3, #0]
 80047b2:	e002      	b.n	80047ba <_printf_i+0x1ca>
 80047b4:	0670      	lsls	r0, r6, #25
 80047b6:	d5fb      	bpl.n	80047b0 <_printf_i+0x1c0>
 80047b8:	8019      	strh	r1, [r3, #0]
 80047ba:	2300      	movs	r3, #0
 80047bc:	6123      	str	r3, [r4, #16]
 80047be:	4615      	mov	r5, r2
 80047c0:	e7bc      	b.n	800473c <_printf_i+0x14c>
 80047c2:	682b      	ldr	r3, [r5, #0]
 80047c4:	1d1a      	adds	r2, r3, #4
 80047c6:	602a      	str	r2, [r5, #0]
 80047c8:	681d      	ldr	r5, [r3, #0]
 80047ca:	6862      	ldr	r2, [r4, #4]
 80047cc:	2100      	movs	r1, #0
 80047ce:	4628      	mov	r0, r5
 80047d0:	f7fb fd0e 	bl	80001f0 <memchr>
 80047d4:	b108      	cbz	r0, 80047da <_printf_i+0x1ea>
 80047d6:	1b40      	subs	r0, r0, r5
 80047d8:	6060      	str	r0, [r4, #4]
 80047da:	6863      	ldr	r3, [r4, #4]
 80047dc:	6123      	str	r3, [r4, #16]
 80047de:	2300      	movs	r3, #0
 80047e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047e4:	e7aa      	b.n	800473c <_printf_i+0x14c>
 80047e6:	6923      	ldr	r3, [r4, #16]
 80047e8:	462a      	mov	r2, r5
 80047ea:	4649      	mov	r1, r9
 80047ec:	4640      	mov	r0, r8
 80047ee:	47d0      	blx	sl
 80047f0:	3001      	adds	r0, #1
 80047f2:	d0ad      	beq.n	8004750 <_printf_i+0x160>
 80047f4:	6823      	ldr	r3, [r4, #0]
 80047f6:	079b      	lsls	r3, r3, #30
 80047f8:	d413      	bmi.n	8004822 <_printf_i+0x232>
 80047fa:	68e0      	ldr	r0, [r4, #12]
 80047fc:	9b03      	ldr	r3, [sp, #12]
 80047fe:	4298      	cmp	r0, r3
 8004800:	bfb8      	it	lt
 8004802:	4618      	movlt	r0, r3
 8004804:	e7a6      	b.n	8004754 <_printf_i+0x164>
 8004806:	2301      	movs	r3, #1
 8004808:	4632      	mov	r2, r6
 800480a:	4649      	mov	r1, r9
 800480c:	4640      	mov	r0, r8
 800480e:	47d0      	blx	sl
 8004810:	3001      	adds	r0, #1
 8004812:	d09d      	beq.n	8004750 <_printf_i+0x160>
 8004814:	3501      	adds	r5, #1
 8004816:	68e3      	ldr	r3, [r4, #12]
 8004818:	9903      	ldr	r1, [sp, #12]
 800481a:	1a5b      	subs	r3, r3, r1
 800481c:	42ab      	cmp	r3, r5
 800481e:	dcf2      	bgt.n	8004806 <_printf_i+0x216>
 8004820:	e7eb      	b.n	80047fa <_printf_i+0x20a>
 8004822:	2500      	movs	r5, #0
 8004824:	f104 0619 	add.w	r6, r4, #25
 8004828:	e7f5      	b.n	8004816 <_printf_i+0x226>
 800482a:	bf00      	nop
 800482c:	0800504d 	.word	0x0800504d
 8004830:	0800505e 	.word	0x0800505e

08004834 <memmove>:
 8004834:	4288      	cmp	r0, r1
 8004836:	b510      	push	{r4, lr}
 8004838:	eb01 0402 	add.w	r4, r1, r2
 800483c:	d902      	bls.n	8004844 <memmove+0x10>
 800483e:	4284      	cmp	r4, r0
 8004840:	4623      	mov	r3, r4
 8004842:	d807      	bhi.n	8004854 <memmove+0x20>
 8004844:	1e43      	subs	r3, r0, #1
 8004846:	42a1      	cmp	r1, r4
 8004848:	d008      	beq.n	800485c <memmove+0x28>
 800484a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800484e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004852:	e7f8      	b.n	8004846 <memmove+0x12>
 8004854:	4402      	add	r2, r0
 8004856:	4601      	mov	r1, r0
 8004858:	428a      	cmp	r2, r1
 800485a:	d100      	bne.n	800485e <memmove+0x2a>
 800485c:	bd10      	pop	{r4, pc}
 800485e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004862:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004866:	e7f7      	b.n	8004858 <memmove+0x24>

08004868 <_sbrk_r>:
 8004868:	b538      	push	{r3, r4, r5, lr}
 800486a:	4d06      	ldr	r5, [pc, #24]	; (8004884 <_sbrk_r+0x1c>)
 800486c:	2300      	movs	r3, #0
 800486e:	4604      	mov	r4, r0
 8004870:	4608      	mov	r0, r1
 8004872:	602b      	str	r3, [r5, #0]
 8004874:	f7fd fa26 	bl	8001cc4 <_sbrk>
 8004878:	1c43      	adds	r3, r0, #1
 800487a:	d102      	bne.n	8004882 <_sbrk_r+0x1a>
 800487c:	682b      	ldr	r3, [r5, #0]
 800487e:	b103      	cbz	r3, 8004882 <_sbrk_r+0x1a>
 8004880:	6023      	str	r3, [r4, #0]
 8004882:	bd38      	pop	{r3, r4, r5, pc}
 8004884:	20000680 	.word	0x20000680

08004888 <memcpy>:
 8004888:	440a      	add	r2, r1
 800488a:	4291      	cmp	r1, r2
 800488c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004890:	d100      	bne.n	8004894 <memcpy+0xc>
 8004892:	4770      	bx	lr
 8004894:	b510      	push	{r4, lr}
 8004896:	f811 4b01 	ldrb.w	r4, [r1], #1
 800489a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800489e:	4291      	cmp	r1, r2
 80048a0:	d1f9      	bne.n	8004896 <memcpy+0xe>
 80048a2:	bd10      	pop	{r4, pc}

080048a4 <_realloc_r>:
 80048a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048a8:	4680      	mov	r8, r0
 80048aa:	4614      	mov	r4, r2
 80048ac:	460e      	mov	r6, r1
 80048ae:	b921      	cbnz	r1, 80048ba <_realloc_r+0x16>
 80048b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048b4:	4611      	mov	r1, r2
 80048b6:	f7ff bc49 	b.w	800414c <_malloc_r>
 80048ba:	b92a      	cbnz	r2, 80048c8 <_realloc_r+0x24>
 80048bc:	f7ff fbda 	bl	8004074 <_free_r>
 80048c0:	4625      	mov	r5, r4
 80048c2:	4628      	mov	r0, r5
 80048c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048c8:	f000 f81b 	bl	8004902 <_malloc_usable_size_r>
 80048cc:	4284      	cmp	r4, r0
 80048ce:	4607      	mov	r7, r0
 80048d0:	d802      	bhi.n	80048d8 <_realloc_r+0x34>
 80048d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80048d6:	d812      	bhi.n	80048fe <_realloc_r+0x5a>
 80048d8:	4621      	mov	r1, r4
 80048da:	4640      	mov	r0, r8
 80048dc:	f7ff fc36 	bl	800414c <_malloc_r>
 80048e0:	4605      	mov	r5, r0
 80048e2:	2800      	cmp	r0, #0
 80048e4:	d0ed      	beq.n	80048c2 <_realloc_r+0x1e>
 80048e6:	42bc      	cmp	r4, r7
 80048e8:	4622      	mov	r2, r4
 80048ea:	4631      	mov	r1, r6
 80048ec:	bf28      	it	cs
 80048ee:	463a      	movcs	r2, r7
 80048f0:	f7ff ffca 	bl	8004888 <memcpy>
 80048f4:	4631      	mov	r1, r6
 80048f6:	4640      	mov	r0, r8
 80048f8:	f7ff fbbc 	bl	8004074 <_free_r>
 80048fc:	e7e1      	b.n	80048c2 <_realloc_r+0x1e>
 80048fe:	4635      	mov	r5, r6
 8004900:	e7df      	b.n	80048c2 <_realloc_r+0x1e>

08004902 <_malloc_usable_size_r>:
 8004902:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004906:	1f18      	subs	r0, r3, #4
 8004908:	2b00      	cmp	r3, #0
 800490a:	bfbc      	itt	lt
 800490c:	580b      	ldrlt	r3, [r1, r0]
 800490e:	18c0      	addlt	r0, r0, r3
 8004910:	4770      	bx	lr
	...

08004914 <_init>:
 8004914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004916:	bf00      	nop
 8004918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800491a:	bc08      	pop	{r3}
 800491c:	469e      	mov	lr, r3
 800491e:	4770      	bx	lr

08004920 <_fini>:
 8004920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004922:	bf00      	nop
 8004924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004926:	bc08      	pop	{r3}
 8004928:	469e      	mov	lr, r3
 800492a:	4770      	bx	lr
